schema {
  query: QueryRoot
  mutation: Mutation
}

"""
Represents the access scope permission that is applicable to a merchant's shop, such as `read_orders`.

"""
type AccessScope {
  """Description of the access scopes enabled on an api permission."""
  description: String!

  """A human-friendly string for an access scope."""
  handle: String!
}

"""Succinct overview of a shop activity."""
type Activity {
  """True if the message already contains the author name."""
  attributed: Boolean!

  """Event author name. This may be a user name, app name or `Shopify`."""
  author: String!

  """When the activity event occured."""
  createdAt: DateTime!

  """
  An array of formatted messages, each providing detail about the activity. Typically only a single message is present.
  """
  messages: [FormattedString!]!

  """The topic of the activity, used to display an appropriate icon."""
  topic: ActivityTopic!
}

type ActivityConnection {
  """A list of edges."""
  edges: [ActivityEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ActivityEdge."""
  node: Activity!
}

"""
The topic of the activity, used to display an appropriate icon or a default icon.
"""
enum ActivityTopic {
  PRODUCTS
  PAYMENTS
  ONLINE_STORE
  COLLECTIONS
  BLOGS
  APPS
  MERCHANT
  DOMAINS
  SCRIPT
  PAGES
  DEFAULT
}

input AdminGenerateLoginTokenInput {
  """
  This argument is deprecated: Relay is moving away from requiring this field.
  """
  clientMutationId: String
}

type AdminGenerateLoginTokenPayload {
  """Returned login token."""
  passwordlessLoginToken: String!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsActionClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The key for the selected feedback option for an item."""
enum AnalyticsFeedbackSubmitKey {
  """Indicates that the item was marked as useful."""
  USEFUL

  """Indicates that the item was marked as not useful."""
  NOT_USEFUL
}

type AnalyticsFeedbackSubmitPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsItemClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsPrimarySuggestionClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsSuggestionExpandPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsSuggestionsClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type AnalyticsViewMoreClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""A Shopify application."""
type App implements Node {
  """A unique application API identifier."""
  apiKey: String!

  """App store page URL of the app."""
  appStoreAppUrl: URL

  """App store page URL of the developer who created the app."""
  appStoreDeveloperUrl: URL

  """Banner image for the app."""
  banner: Image!

  """Whether the specified beta feature is enabled on the app."""
  beta(
    """Code name of the beta."""
    name: String!
  ): Boolean!

  """Channel associated with the app."""
  channel: Channel @deprecated(reason: "Use AppInstallation.channel instead")

  """Description of the app."""
  description: String

  """App's developer name."""
  developerName: String

  """Website of the developer who created the app."""
  developerUrl: URL! @deprecated(reason: "Use `appStoreDeveloperUrl` instead")

  """Whether the app uses the Embedded App SDK."""
  embedded: Boolean!

  """Requirements that must be met before the app can be installed."""
  failedRequirements: [FailedRequirement!]!

  """List of app features."""
  features: [String!]!

  """Feedback from this app about the store."""
  feedback: AppFeedback

  """Handle of the app."""
  handle: String

  """Icon that represents the app."""
  icon: Image!

  """Globally unique identifier."""
  id: ID!

  """Webpage where you can install the app."""
  installUrl: URL

  """
  Corresponding AppInstallation for this shop and App.
  Returns null if the App is not installed.

  """
  installation: AppInstallation

  """Webpage that the app starts in."""
  launchUrl: URL! @deprecated(reason: "Use AppInstallation.launchUrl instead")

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.

  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use AppInstallation.navigationItems instead")

  """Detailed information about the app pricing."""
  pricingDetails: String

  """Summary of the app pricing details."""
  pricingDetailsSummary: String!

  """Link to app privacy policy."""
  privacyPolicyUrl: URL

  """Whether the app is published."""
  published: Boolean!

  """Whitelisted redirect URLs."""
  redirectUrls: [URL!]!

  """Screenshots of the app."""
  screenshots: [Image!]!

  """Whether the app was developed by Shopify."""
  shopifyDeveloped: Boolean!

  """Name of the app."""
  title: String!

  """
  Message that appears when the app is uninstalled.

  For example, _By removing this app, you will no longer be able to publish
  products to MySocialSite or view this app in your Shopify admin. You can
  re-enable this channel at any time._

  """
  uninstallMessage: String!

  """Webpage where you can uninstall the app."""
  uninstallUrl: URL @deprecated(reason: "Use AppInstallation.uninstallUrl instead")
}

type AppConnection {
  """A list of edges."""
  edges: [AppEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type AppEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppEdge."""
  node: App!
}

"""
Reports the status of shops and their resources and displays this information
within Shopify admin. AppFeedback is used to notify merchants about steps they need to take
to set up an app on their store.

"""
type AppFeedback {
  """The application associated to the feedback."""
  app: App!

  """A link to where merchants can resolve errors."""
  callToAction: URL @deprecated(reason: "Use `link` instead")

  """A link to where merchants can resolve errors."""
  link: Link

  """The feedback message presented to the merchant."""
  messages: [UserError!]!
}

"""Represents an installed application on a shop."""
type AppInstallation implements Node {
  """Access scopes granted to an app by a merchant during installation."""
  accessScopes: [AccessScope!]!

  """Application which is installed."""
  app: App!

  """The url used for rendering the app inside of an iframe."""
  appUrl(
    """
    Optional additional query parameters to include in the URL.
    Example: `very=cool&super=modern`

    """
    parameters: String
  ): URL!

  """Channel associated with the installed application."""
  channel: Channel @deprecated(reason: "Use `publication` instead")

  """Globally unique identifier."""
  id: ID!

  """Url used to launch the app."""
  launchUrl: URL!

  """
  App's navigation item. Applicable to primary navs only. Please use navigationItems if you need to retrieve sales channels.
  """
  navigationItem(
    """Type for navigation item."""
    type: NavigationItemV2Type!
  ): NavigationItemV2

  """
  Menu items for the app, which also appear as submenu items in left navigation sidebar in the Shopify admin.

  """
  navigationItems: [NavigationItem!]!

  """The personally identifiable information the app has access to."""
  pii: [String!]!

  """A count of products with feedback for the app."""
  productFeedbackCount: Int!

  """Publication associated with the installed application."""
  publication: Publication

  """Subscriptions charge to a shop on a recurring basis."""
  subscriptions: [AppSubscription!]!

  """Trial information. If null the app does not have a trial."""
  trial: AppTrial

  """Webpage where you can uninstall the app."""
  uninstallUrl: URL
}

"""Possible categories of an app installation."""
enum AppInstallationCategory {
  """Sales channel apps."""
  CHANNEL

  """Apps that can be used in the POS mobile client."""
  POS_EMBEDDED
}

type AppInstallationConnection {
  """A list of edges."""
  edges: [AppInstallationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type AppInstallationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of AppInstallationEdge."""
  node: AppInstallation!
}

"""Possible privacy types of an app installation."""
enum AppInstallationPrivacy {
  PUBLIC
  PRIVATE
}

"""The set of valid sort keys for the appInstallations query."""
enum AppInstallationSortKeys {
  """Sort by the `installed_at` value."""
  INSTALLED_AT

  """Sort by the `app_title` value."""
  APP_TITLE

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""Fields required to install an app."""
input AppInstallInput {
  """The ID for the channel API client to be installed."""
  id: ID!
}

type AppInstallPayload {
  app: App @deprecated(reason: "Field not necessary since this mutation works with app installations now")

  """AppInstallation created during the installation process."""
  appInstallation: AppInstallation
  channel: Channel @deprecated(reason: "Field not necessary since this mutation works with apps now")

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
App links make apps accessible to the merchant throughout the Shopify admin.
Configured app links appear in the *More actions* menu on specified pages in Shopify admin.

"""
type AppLink {
  """Whether the app link uses the Embedded App SDK."""
  embedded: Boolean!

  """The merchant facing icon of the app link."""
  icon: Image!

  """Globally unique identifier."""
  id: ID!

  """
  Specifies whether the app link is opened in the context of the current page or not.
  """
  inContext: Boolean!

  """Task-oriented text that appears to the merchant in the App menu."""
  text: String!

  """The title of the app link."""
  title: String!

  """The URL where your app is hosted, or a specific URL for this task."""
  url: URL!
}

"""Plan billed to a shop on a recurring basis."""
union AppPlan = RecurringAppPlan | UsageAppPlan

"""The set of valid sort keys for the installedApps query."""
enum AppsSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

type AppStoreUrlGeneratePayload {
  appStoreUrl: URL!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents the billing info for the app."""
type AppSubscription implements Node {
  """The billing interval of the subscription."""
  billingInterval: AppSubscriptionBillingInterval!

  """The date and time when the current app subscription period ends."""
  currentPeriodEnd: DateTime

  """Globally unique identifier."""
  id: ID!

  """Defines the cost of an app subscription."""
  plans: [AppPlan!]!
}

"""Possible billing intervals for an app subscription."""
enum AppSubscriptionBillingInterval {
  """App charge applied every 30 days."""
  EVERY_30_DAYS
}

"""App trial information."""
type AppTrial {
  """Whether the app is in trial."""
  active: Boolean!

  """Description of time remaining in trial."""
  statusMessage: String!
}

"""Input fields used to uninstall an app."""
input AppUninstallInput {
  """The id for the app api client to be uninstalled."""
  id: ID!

  """Reason for uninstalling the app."""
  feedback: String
}

type AppUninstallPayload {
  app: App

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields for an attachment."""
input AttachmentInput {
  """ID of the attachment."""
  id: ID

  """The URL of the attachment. Must be a signed upload URL."""
  url: String
}

"""Represents a generic custom attribute."""
type Attribute {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String
}

"""Specifies the input fields required for an attribute."""
input AttributeInput {
  """Key or name of the attribute."""
  key: String!

  """Value of the attribute."""
  value: String!
}

"""
Basic events chronicle resource activities such as the creation of an article, the fulfillment of an order, or
the addition of a product.

"""
type BasicEvent implements Node & Event {
  """
  The name of the app that created the event. Returns null when the event originates from the Shopify admin.
  """
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """Globally unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

"""Represents the dimensions of a three-dimensional box."""
type BoxDimensions {
  """The height in `unit`s."""
  height: Float!

  """The length in `unit`s."""
  length: Float!

  """Unit of measurement for `length`, `width`, and `height`."""
  unit: LengthUnit!

  """The width in `unit`s."""
  width: Float!
}

type BulkExportByIdsPayload {
  """Number of resources exported."""
  exportedCount: Int

  """URL of the export file."""
  url: URL

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type BulkExportBySearchPayload {
  """The asynchronous job exporting the resources."""
  job: Job!

  """
  Message displayed about how to get the file when the operation has succeeded.
  """
  resultInstructions: String!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The computed properties for a draft order."""
type CalculatedDraftOrder {
  """Order-level discount applied to the draft order."""
  appliedDiscount: DraftOrderAppliedDiscount

  """
  The available shipping rates for the draft order. Requires a customer with a
  valid shipping address and at least one line item.
  """
  availableShippingRates: [ShippingRate!]!

  """
  Customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Customer

  """Line items in the draft order with their computed properties."""
  lineItems: [CalculatedDraftOrderLineItem!]!

  """Line item that contains the shipping costs."""
  shippingLine: ShippingLine

  """
  Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).

  """
  subtotalPrice: Money!

  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [TaxLine!]!

  """
  Total amount of the draft order (includes taxes, shipping charges, and discounts).
  """
  totalPrice: Money!

  """Total shipping charge for the draft order."""
  totalShippingPrice: Money!

  """Total amount of taxes for the draft order."""
  totalTax: Money!
}

"""The computed line items for a draft order."""
type CalculatedDraftOrderLineItem {
  """Discount applied to the line item."""
  appliedDiscount: DraftOrderAppliedDiscount

  """
  Indicates if this is a product variant line item, or a custom line item.
  """
  custom: Boolean!

  """List of additional information (metafields) about the line item."""
  customAttributes: [Attribute!]!

  """Total price with discounts applied."""
  discountedTotal: MoneyV2!

  """Unit price with discounts applied."""
  discountedUnitPrice: MoneyV2!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  """
  fulfillmentService: FulfillmentService!

  """Image associated with the draft order line item."""
  image: Image

  """
  Indicates whether the line item represents the puchase of a gift card.
  """
  isGiftCard: Boolean!

  """Name of the product."""
  name: String!

  """
  Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.

  """
  originalTotal: MoneyV2!

  """Variant price without any discounts applied."""
  originalUnitPrice: MoneyV2!

  """Product associated with the draft order line item."""
  product: Product

  """Number of variant items requested in the draft order."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Variant SKU number."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  """Total value of the discount."""
  totalDiscount: MoneyV2!

  """Variant associated with the draft order line item."""
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String

  """Weight unit and value for a draft order line item."""
  weight: Weight
}

"""
A calculated exchange containing a refund and checkout to be processed.
"""
type CalculatedExchange {
  """The amount of funds that must be transferred during the exchange."""
  balance: MoneyV2!

  """The checkout portion of an exchange."""
  checkout: CalculatedExchangeCheckout!

  """The refund portion of an exchange."""
  intendedRefund: IntendedExchangeRefund!

  """Staff member who is processing the exchange."""
  staffMember: StaffMember!

  """Suggested transactions for the exchange."""
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """The total amount that customer owes for the exchange."""
  totalOwing: MoneyV2! @deprecated(reason: "Use `balance` instead")

  """The total amount of refund to pay for the exchange."""
  totalRefund: MoneyV2! @deprecated(reason: "Use `balance` instead")

  """Specifies the flow of the balance on the exchange."""
  type: ExchangeType!
}

"""A checkout that will be created upon completing an exchange."""
type CalculatedExchangeCheckout {
  """Customer of exchange."""
  customer: Customer

  """The discount amounts that have been applied to the checkout."""
  discountAllocations: [DiscountAllocation!]!

  """Discounts that have been applied on the checkout."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """Line items on the exchange checkout."""
  lineItems: [ExchangeCheckoutLineItem!]!

  """Shipping address for the exchange checkout."""
  shippingAddress: MailingAddress

  """Shipping line for the exchange checkout."""
  shippingLine: ExchangeCheckoutShippingLine

  """Subtotal price for the exchange checkout."""
  subtotalPrice: MoneyV2!

  """Tax lines belonging to an exchange checkout."""
  taxLines: [ExchangeCheckoutTaxLine!]!

  """Total discounts for the exchange checkout."""
  totalDiscounts: MoneyV2!

  """Total line items price for the exchange checkout."""
  totalLineItemsPrice: MoneyV2!

  """Total price for the exchange checkout."""
  totalPrice: MoneyV2!

  """Total tax for the exchange checkout."""
  totalTax: MoneyV2!
}

"""
The calculated exchange payload. Contains the actual exchange if successful or any potential errors.
"""
type CalculatedExchangePayload {
  """The calculated exchange."""
  exchange: CalculatedExchange

  """List of errors that occurred calculating the exchange."""
  userErrors: [ExchangeError!]!
}

type CarrierShippingPackagingCreatePayload {
  """The shipping packaging that was created."""
  shippingPackaging: DeliveryCarrierShippingPackaging

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
A channel is a group of products and collections that is published to an app. A
channel can be a platform or marketplace such
as Facebook or Pinterest, an online store, or POS.

"""
type Channel implements Node {
  """Underlying app used by the channel."""
  app: App!

  """
  The collection publications for the list of collections published to the channel.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of collections published to the channel."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """Unique identifier for the channel."""
  handle: String! @deprecated(reason: "Use `id` instead")

  """Whether the collection is available to the channel."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """Globally unique identifier."""
  id: ID!

  """Name of the channel."""
  name: String!

  """
  Menu items for the channel, which also appear as submenu items in left navigation sidebar in the Shopify admin.

  """
  navigationItems: [NavigationItem!]! @deprecated(reason: "Use App.navigation_items instead")

  """Home page for the channel."""
  overviewPath: URL @deprecated(reason: "Use App.launch_url instead")
  productPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `productPublicationsV3` instead")

  """
  The product publications for the list of products published to the channel.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of products published to the channel."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether or not this channel supports future publishing."""
  supportsFuturePublishing: Boolean!
}

type ChannelConnection {
  """A list of edges."""
  edges: [ChannelEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ChannelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ChannelEdge."""
  node: Channel!
}

"""Chat event origin tag."""
enum ChatEventOriginTag {
  """Plus"""
  ORIGIN_PLUS

  """Plus segmented"""
  ORIGIN_PLUS_SEGMENTED
}

"""
Represents a collection of products.

"""
type Collection implements Node & Publishable {
  """
  The number of publication a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """
  The stripped description of the collection, in a single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the collection, complete with HTML formatting."""
  descriptionHtml: HTML!

  """
  Information about the collection that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """
  A unique human-friendly string for the collection. Automatically generated from the collection's title.

  """
  handle: String!

  """Whether the collection includes a product."""
  hasProduct(
    """The ID of the product to check."""
    id: ID!
  ): Boolean!

  """Globally unique identifier."""
  id: ID!

  """The image associated with the collection."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """Checks if a collection is being rebuilt or not."""
  isRebuilding: Boolean!

  """The products that are included in the collection."""
  products(
    """
    Filters products returned based on how they are sorted in a smart collection. Does not apply to custom collections.
    If this argument is not passed then it will return both automatically and manually sorted products.

    """
    onlySorted: SmartCollectionSortingType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductCollectionSortKeys = COLLECTION_DEFAULT

    """
    This field is only used when the collection is smart. If the collection is custom it returns an error.
    Supported filter parameters:
     - `title`
     - `product_type`
     - `vendor`
     - `gift_card`
     - `created_at`
     - `updated_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): ProductConnection!

  """The number of products automatically sorted in the collection."""
  productsAutomaticallySortedCount: Int!

  """The number of products included in the collection."""
  productsCount: Int!

  """The number of products manually sorted in the collection."""
  productsManuallySortedCount: Int!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false it
    will return all resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """The channels where the collection is published."""
  publications(
    """
    Whether or not to return only the collection publications that are published.
    """
    onlyPublished: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  """Check to see if resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see if resource is published to the calling app's channel."""
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see if resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see if resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Return only the resources that are published. If false it will return all resource publications.
    """
    onlyPublished: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """
  The rules used to assign products to the collection. This applies only to smart collections.

  """
  ruleSet: CollectionRuleSet

  """SEO information for the collection."""
  seo: SEO!

  """The order in which the collection's products are sorted."""
  sortOrder: CollectionSortOrder!

  """The storefront ID of the collection."""
  storefrontId: StorefrontID!

  """The theme template used when viewing this collection in a store."""
  templateSuffix: String

  """The title of the collection."""
  title: String!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the collection was last modified.

  """
  updatedAt: DateTime!
}

type CollectionAddProductsPayload {
  """The updated collection."""
  collection: Collection

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionAddProductsToManualSortPayload {
  """The collection that's been updated."""
  collection: Collection

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionBulkDeletePayload {
  """The asynchronous job removing the collections."""
  job: Job!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionBulkPublishPayload {
  """
  The asynchronous job publishing collections on the publications given.
  """
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionBulkUnpublishPayload {
  """
  The asynchronous job which unpublishes collections on the publications given.
  """
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionConnection {
  """A list of edges."""
  edges: [CollectionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type CollectionCreatePayload {
  """The collection that has been created."""
  collection: Collection

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the collection to delete."""
input CollectionDeleteInput {
  """The ID of the collection to be deleted."""
  id: ID!
}

type CollectionDeletePayload {
  """The ID of the collection that was deleted."""
  deletedCollectionId: ID

  """The shop associated with the collection."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionEdge."""
  node: Collection!
}

"""Specifies the input fields required to create a collection."""
input CollectionInput {
  """The description of the collection, in HTML format."""
  descriptionHtml: String

  """
  A unique human-friendly string for the collection. Automatically generated from the collection's title.

  """
  handle: String

  """
  Specifies the collection to update or create a new collection if absent.
  """
  id: ID

  """The image associated with the collection."""
  image: ImageInput

  """
  Initial list of collection products. Only valid with `productCreate` and without rules.
  """
  products: [ID!]

  """
  Initial list of collection publications. Only valid with `productCreate`. This
  argument is deprecated: Use PublishablePublish instead.
  """
  publications: [CollectionPublicationInput!]

  """
  The rules used to assign products to the collection.

  """
  ruleSet: CollectionRuleSetInput

  """The theme template used when viewing the collection in a store."""
  templateSuffix: String

  """The order in which the collection's products are sorted."""
  sortOrder: CollectionSortOrder

  """Required for creating a new collection."""
  title: String

  """SEO information for the collection."""
  seo: SEOInput

  """
  Indicates whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.

  """
  redirectNewHandle: Boolean = false
}

"""Represents the publications where a collection is published."""
type CollectionPublication {
  """The channel where the collection will be published."""
  channel: Channel! @deprecated(reason: "Use `publication` instead")

  """The collection to be published on the publication."""
  collection: Collection!

  """Whether the publication is published or not."""
  isPublished: Boolean!

  """The publication where the collection will be published."""
  publication: Publication!

  """The date that the publication was or is going to be published."""
  publishDate: DateTime!
}

type CollectionPublicationConnection {
  """A list of edges."""
  edges: [CollectionPublicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type CollectionPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CollectionPublicationEdge."""
  node: CollectionPublication!
}

"""Specifies the publications to which a collection will be published."""
input CollectionPublicationInput {
  """The ID of the publication."""
  publicationId: ID

  """
  The ID of the channel. This argument is deprecated: Use publicationId instead.
  """
  channelId: ID

  """This argument is deprecated: Use publicationId instead."""
  channelHandle: String
}

"""
Specifies a collection to publish and the sales channels to publish it to.
"""
input CollectionPublishInput {
  """The collection to create or update publications for."""
  id: ID!

  """The channels where the collection will be published."""
  collectionPublications: [CollectionPublicationInput!]!
}

type CollectionPublishPayload {
  """The published collection."""
  collection: Collection

  """The channels where the collection has been published."""
  collectionPublications: [CollectionPublication!]

  """The shop associated with the collection."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionRemoveAllProductsFromManualSortPayload {
  """The collection that's been updated."""
  collection: Collection

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionRemoveProductsFromManualSortPayload {
  """The collection that's been updated."""
  collection: Collection

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionRemoveProductsPayload {
  """The asynchronous job removing the products."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionReorderProductsPayload {
  """The asynchronous job reordering the products."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents at rule that's used to assign products to a collection."""
type CollectionRule {
  """
  The attribute that the rule focuses on (for example, `title` or `product_type`).
  """
  column: CollectionRuleColumn!

  """The value that the operator is applied to (for example, `Hats`)."""
  condition: String!

  """
  The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).

  """
  relation: CollectionRuleRelation!
}

"""
Specifies the property of a product being used to populate the smart collection.
"""
enum CollectionRuleColumn {
  TAG
  TITLE
  TYPE
  VENDOR
  VARIANT_PRICE
  VARIANT_COMPARE_AT_PRICE
  VARIANT_WEIGHT
  VARIANT_INVENTORY
  VARIANT_TITLE
}

"""
Collections may use rules to automatically include the matching products. This defines restrictions for a type of rule.
"""
type CollectionRuleConditions {
  """Allowed relations of the rule."""
  allowedRelations: [CollectionRuleRelation!]!

  """Most commonly used relation for this rule."""
  defaultRelation: CollectionRuleRelation!

  """Type of the rule."""
  ruleType: CollectionRuleColumn!
}

"""Specifies a rule to associate with a collection."""
input CollectionRuleInput {
  """
  The attribute that the rule focuses on (for example, `title` or `product_type`).
  """
  column: CollectionRuleColumn!

  """
  The type of operator that the rule is based on (for example, `equals`, `contains`, or `not_equals`).

  """
  relation: CollectionRuleRelation!

  """The value that the operator is applied to (for example, `Hats`)."""
  condition: String!
}

"""Specifies the relationship between the `column` and the condition."""
enum CollectionRuleRelation {
  EQUALS
  NOT_EQUALS
  GREATER_THAN
  LESS_THAN
  STARTS_WITH
  ENDS_WITH
  CONTAINS
  NOT_CONTAINS
}

"""
The set of rules that are used to determine which products are included in the collection.
"""
type CollectionRuleSet {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match one or more of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.

  """
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [CollectionRule!]!
}

"""Specifies a rule set for the collection."""
input CollectionRuleSetInput {
  """
  Whether products must match any or all of the rules to be included in the collection.
  If true, then products must match one or more of the rules to be included in the collection.
  If false, then products must match all of the rules to be included in the collection.

  """
  appliedDisjunctively: Boolean!

  """The rules used to assign products to the collection."""
  rules: [CollectionRuleInput!]
}

"""The set of valid sort keys for the collections query."""
enum CollectionSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""Specifies the sort order for the products in the collection."""
enum CollectionSortOrder {
  MANUAL
  BEST_SELLING
  ALPHA_ASC
  ALPHA_DESC
  PRICE_DESC
  PRICE_ASC
  CREATED_DESC
  CREATED
}

"""
Specifies the collection to unpublish and the sales channels to remove it from.
"""
input CollectionUnpublishInput {
  """The collection to create or update publications for."""
  id: ID!

  """The channels where the collection is published."""
  collectionPublications: [CollectionPublicationInput!]!
}

type CollectionUnpublishPayload {
  """The collection that has been unpublished."""
  collection: Collection

  """The shop associated with the collection."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CollectionUpdatePayload {
  """The updated collection."""
  collection: Collection

  """The asynchronous job updating the products based on the new rule set."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Comment events are generated by staff members of a shop.
They are created when a staff member adds a comment to the timeline of an order, draft order, customer, or transfer.

"""
type CommentEvent implements Node & Event {
  """
  The name of the app that created the event. Returns null when the event originates from the Shopify admin.
  """
  appTitle: String

  """The attachments associated with the comment event."""
  attachments: [CommentEventAttachment!]!

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The name of the user that authored the comment event."""
  author: StaffMember!

  """
  Whether the comment event can be deleted. If true, then the comment event can be deleted.
  """
  canDelete: Boolean!

  """
  Whether the comment event can be edited. If true, then the comment event can be edited.
  """
  canEdit: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """
  Whether the comment event has been edited. If true, then the comment event has been edited.
  """
  edited: Boolean!

  """Globally unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!

  """The raw body of the comment event."""
  rawMessage: String!

  """The subject of the comment event."""
  subject: CommentEventSubject!
}

"""A file attachment associated to a comment event."""
type CommentEventAttachment {
  """
  The file extension of the comment event attachment, indicating the file format.
  """
  fileExtension: String

  """Globally unique identifier."""
  id: ID!

  """The image attached to the comment event."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """The filename of the comment event attachment."""
  name: String!

  """The size of the attachment."""
  size: Int!

  """The URL of the attachment."""
  url: URL!
}

"""The subject line of a comment event."""
interface CommentEventSubject {
  """
  Whether the timeline subject has a timeline comment. If true, then a timeline comment exists.
  """
  hasTimelineComment: Boolean!

  """Globally unique identifier."""
  id: ID!
}

"""Indicates how HTTP response content should be handled."""
enum ContentDisposition {
  """
  Content is displayed inline in the browser (ie: as a web page or as part of a web page)
  """
  INLINE

  """Content is downloaded and saved locally."""
  ATTACHMENT
}

"""Countries that have been defined in shipping zones for the shop."""
type CountriesInShippingZones {
  """Countries that have been defined in shipping zones."""
  countryCodes: [CountryCode!]!

  """Whether 'Rest of World' has been defined in any shipping zones."""
  includeRestOfWorld: Boolean!
}

"""ISO 3166-1 alpha-2 country codes with some differences."""
enum CountryCode {
  """Afghanistan."""
  AF

  """Aland Islands."""
  AX

  """Albania."""
  AL

  """Algeria."""
  DZ

  """Andorra."""
  AD

  """Angola."""
  AO

  """Anguilla."""
  AI

  """Antigua And Barbuda."""
  AG

  """Argentina."""
  AR

  """Armenia."""
  AM

  """Aruba."""
  AW

  """Australia."""
  AU

  """Austria."""
  AT

  """Azerbaijan."""
  AZ

  """Bahamas."""
  BS

  """Bahrain."""
  BH

  """Bangladesh."""
  BD

  """Barbados."""
  BB

  """Belarus."""
  BY

  """Belgium."""
  BE

  """Belize."""
  BZ

  """Benin."""
  BJ

  """Bermuda."""
  BM

  """Bhutan."""
  BT

  """Bolivia."""
  BO

  """Bonaire, Sint Eustatius and Saba."""
  BQ

  """Bosnia And Herzegovina."""
  BA

  """Botswana."""
  BW

  """Bouvet Island."""
  BV

  """Brazil."""
  BR

  """British Indian Ocean Territory."""
  IO

  """Brunei."""
  BN

  """Bulgaria."""
  BG

  """Burkina Faso."""
  BF

  """Burundi."""
  BI

  """Cambodia."""
  KH

  """Canada."""
  CA

  """Cape Verde."""
  CV

  """Cayman Islands."""
  KY

  """Central African Republic."""
  CF

  """Chad."""
  TD

  """Chile."""
  CL

  """China."""
  CN

  """Christmas Island."""
  CX

  """Cocos (Keeling) Islands."""
  CC

  """Colombia."""
  CO

  """Comoros."""
  KM

  """Congo."""
  CG

  """Congo, The Democratic Republic Of The."""
  CD

  """Cook Islands."""
  CK

  """Costa Rica."""
  CR

  """Croatia."""
  HR

  """Cuba."""
  CU

  """Curaçao."""
  CW

  """Cyprus."""
  CY

  """Czech Republic."""
  CZ

  """Côte d'Ivoire."""
  CI

  """Denmark."""
  DK

  """Djibouti."""
  DJ

  """Dominica."""
  DM

  """Dominican Republic."""
  DO

  """Ecuador."""
  EC

  """Egypt."""
  EG

  """El Salvador."""
  SV

  """Equatorial Guinea."""
  GQ

  """Eritrea."""
  ER

  """Estonia."""
  EE

  """Ethiopia."""
  ET

  """Falkland Islands (Malvinas)."""
  FK

  """Faroe Islands."""
  FO

  """Fiji."""
  FJ

  """Finland."""
  FI

  """France."""
  FR

  """French Guiana."""
  GF

  """French Polynesia."""
  PF

  """French Southern Territories."""
  TF

  """Gabon."""
  GA

  """Gambia."""
  GM

  """Georgia."""
  GE

  """Germany."""
  DE

  """Ghana."""
  GH

  """Gibraltar."""
  GI

  """Greece."""
  GR

  """Greenland."""
  GL

  """Grenada."""
  GD

  """Guadeloupe."""
  GP

  """Guatemala."""
  GT

  """Guernsey."""
  GG

  """Guinea."""
  GN

  """Guinea Bissau."""
  GW

  """Guyana."""
  GY

  """Haiti."""
  HT

  """Heard Island And Mcdonald Islands."""
  HM

  """Holy See (Vatican City State)."""
  VA

  """Honduras."""
  HN

  """Hong Kong."""
  HK

  """Hungary."""
  HU

  """Iceland."""
  IS

  """India."""
  IN

  """Indonesia."""
  ID

  """Iran, Islamic Republic Of."""
  IR

  """Iraq."""
  IQ

  """Ireland."""
  IE

  """Isle Of Man."""
  IM

  """Israel."""
  IL

  """Italy."""
  IT

  """Jamaica."""
  JM

  """Japan."""
  JP

  """Jersey."""
  JE

  """Jordan."""
  JO

  """Kazakhstan."""
  KZ

  """Kenya."""
  KE

  """Kiribati."""
  KI

  """Korea, Democratic People's Republic Of."""
  KP

  """Kosovo."""
  XK

  """Kuwait."""
  KW

  """Kyrgyzstan."""
  KG

  """Lao People's Democratic Republic."""
  LA

  """Latvia."""
  LV

  """Lebanon."""
  LB

  """Lesotho."""
  LS

  """Liberia."""
  LR

  """Libyan Arab Jamahiriya."""
  LY

  """Liechtenstein."""
  LI

  """Lithuania."""
  LT

  """Luxembourg."""
  LU

  """Macao."""
  MO

  """Macedonia, Republic Of."""
  MK

  """Madagascar."""
  MG

  """Malawi."""
  MW

  """Malaysia."""
  MY

  """Maldives."""
  MV

  """Mali."""
  ML

  """Malta."""
  MT

  """Martinique."""
  MQ

  """Mauritania."""
  MR

  """Mauritius."""
  MU

  """Mayotte."""
  YT

  """Mexico."""
  MX

  """Moldova, Republic of."""
  MD

  """Monaco."""
  MC

  """Mongolia."""
  MN

  """Montenegro."""
  ME

  """Montserrat."""
  MS

  """Morocco."""
  MA

  """Mozambique."""
  MZ

  """Myanmar."""
  MM

  """Namibia."""
  NA

  """Nauru."""
  NR

  """Nepal."""
  NP

  """Netherlands."""
  NL

  """Netherlands Antilles."""
  AN

  """New Caledonia."""
  NC

  """New Zealand."""
  NZ

  """Nicaragua."""
  NI

  """Niger."""
  NE

  """Nigeria."""
  NG

  """Niue."""
  NU

  """Norfolk Island."""
  NF

  """Norway."""
  NO

  """Oman."""
  OM

  """Pakistan."""
  PK

  """Palestinian Territory, Occupied."""
  PS

  """Panama."""
  PA

  """Papua New Guinea."""
  PG

  """Paraguay."""
  PY

  """Peru."""
  PE

  """Philippines."""
  PH

  """Pitcairn."""
  PN

  """Poland."""
  PL

  """Portugal."""
  PT

  """Qatar."""
  QA

  """Republic of Cameroon."""
  CM

  """Reunion."""
  RE

  """Romania."""
  RO

  """Russia."""
  RU

  """Rwanda."""
  RW

  """Saint Barthélemy."""
  BL

  """Saint Helena."""
  SH

  """Saint Kitts And Nevis."""
  KN

  """Saint Lucia."""
  LC

  """Saint Martin."""
  MF

  """Saint Pierre And Miquelon."""
  PM

  """Samoa."""
  WS

  """San Marino."""
  SM

  """Sao Tome And Principe."""
  ST

  """Saudi Arabia."""
  SA

  """Senegal."""
  SN

  """Serbia."""
  RS

  """Seychelles."""
  SC

  """Sierra Leone."""
  SL

  """Singapore."""
  SG

  """Sint Maarten."""
  SX

  """Slovakia."""
  SK

  """Slovenia."""
  SI

  """Solomon Islands."""
  SB

  """Somalia."""
  SO

  """South Africa."""
  ZA

  """South Georgia And The South Sandwich Islands."""
  GS

  """South Korea."""
  KR

  """South Sudan."""
  SS

  """Spain."""
  ES

  """Sri Lanka."""
  LK

  """St. Vincent."""
  VC

  """Sudan."""
  SD

  """Suriname."""
  SR

  """Svalbard And Jan Mayen."""
  SJ

  """Swaziland."""
  SZ

  """Sweden."""
  SE

  """Switzerland."""
  CH

  """Syria."""
  SY

  """Taiwan."""
  TW

  """Tajikistan."""
  TJ

  """Tanzania, United Republic Of."""
  TZ

  """Thailand."""
  TH

  """Timor Leste."""
  TL

  """Togo."""
  TG

  """Tokelau."""
  TK

  """Tonga."""
  TO

  """Trinidad and Tobago."""
  TT

  """Tunisia."""
  TN

  """Turkey."""
  TR

  """Turkmenistan."""
  TM

  """Turks and Caicos Islands."""
  TC

  """Tuvalu."""
  TV

  """Uganda."""
  UG

  """Ukraine."""
  UA

  """United Arab Emirates."""
  AE

  """United Kingdom."""
  GB

  """United States."""
  US

  """United States Minor Outlying Islands."""
  UM

  """Uruguay."""
  UY

  """Uzbekistan."""
  UZ

  """Vanuatu."""
  VU

  """Venezuela."""
  VE

  """Vietnam."""
  VN

  """Virgin Islands, British."""
  VG

  """Wallis And Futuna."""
  WF

  """Western Sahara."""
  EH

  """Yemen."""
  YE

  """Zambia."""
  ZM

  """Zimbabwe."""
  ZW
}

"""The part of the image that should remain after cropping."""
enum CropRegion {
  """Keep the center of the image"""
  CENTER

  """Keep the top of the image"""
  TOP

  """Keep the bottom of the image"""
  BOTTOM

  """Keep the left of the image"""
  LEFT

  """Keep the right of the image"""
  RIGHT
}

"""Currency codes"""
enum CurrencyCode {
  """United States Dollars (USD)."""
  USD

  """Euro (EUR)."""
  EUR

  """United Kingdom Pounds (GBP)."""
  GBP

  """Canadian Dollars (CAD)."""
  CAD

  """Afghan Afghani (AFN)."""
  AFN

  """Albanian Lek (ALL)."""
  ALL

  """Algerian Dinar (DZD)."""
  DZD

  """Angolan Kwanza (AOA)."""
  AOA

  """Argentine Pesos (ARS)."""
  ARS

  """Armenian Dram (AMD)."""
  AMD

  """Aruban Florin (AWG)."""
  AWG

  """Australian Dollars (AUD)."""
  AUD

  """Barbadian Dollar (BBD)."""
  BBD

  """Azerbaijani Manat (AZN)."""
  AZN

  """Bangladesh Taka (BDT)."""
  BDT

  """Bahamian Dollar (BSD)."""
  BSD

  """Bahraini Dinar (BHD)."""
  BHD

  """Burundian Franc (BIF)."""
  BIF

  """Belarusian Ruble (BYR)."""
  BYR

  """Belize Dollar (BZD)."""
  BZD

  """Bhutanese Ngultrum (BTN)."""
  BTN

  """Bosnia and Herzegovina Convertible Mark (BAM)."""
  BAM

  """Brazilian Real (BRL)."""
  BRL

  """Bolivian Boliviano (BOB)."""
  BOB

  """Botswana Pula (BWP)."""
  BWP

  """Brunei Dollar (BND)."""
  BND

  """Bulgarian Lev (BGN)."""
  BGN

  """Burmese Kyat (MMK)."""
  MMK

  """Cambodian Riel."""
  KHR

  """Cape Verdean escudo (CVE)."""
  CVE

  """Cayman Dollars (KYD)."""
  KYD

  """Central African CFA Franc (XAF)."""
  XAF

  """Chilean Peso (CLP)."""
  CLP

  """Chinese Yuan Renminbi (CNY)."""
  CNY

  """Colombian Peso (COP)."""
  COP

  """Comorian Franc (KMF)."""
  KMF

  """Congolese franc (CDF)."""
  CDF

  """Costa Rican Colones (CRC)."""
  CRC

  """Croatian Kuna (HRK)."""
  HRK

  """Czech Koruny (CZK)."""
  CZK

  """Danish Kroner (DKK)."""
  DKK

  """Dominican Peso (DOP)."""
  DOP

  """East Caribbean Dollar (XCD)."""
  XCD

  """Egyptian Pound (EGP)."""
  EGP

  """Ethiopian Birr (ETB)."""
  ETB

  """CFP Franc (XPF)."""
  XPF

  """Fijian Dollars (FJD)."""
  FJD

  """Gambian Dalasi (GMD)."""
  GMD

  """Ghanaian Cedi (GHS)."""
  GHS

  """Guatemalan Quetzal (GTQ)."""
  GTQ

  """Guyanese Dollar (GYD)."""
  GYD

  """Georgian Lari (GEL)."""
  GEL

  """Haitian Gourde (HTG)."""
  HTG

  """Honduran Lempira (HNL)."""
  HNL

  """Hong Kong Dollars (HKD)."""
  HKD

  """Hungarian Forint (HUF)."""
  HUF

  """Icelandic Kronur (ISK)."""
  ISK

  """Indian Rupees (INR)."""
  INR

  """Indonesian Rupiah (IDR)."""
  IDR

  """Israeli New Shekel (NIS)."""
  ILS

  """Iraqi Dinar (IQD)."""
  IQD

  """Jamaican Dollars (JMD)."""
  JMD

  """Japanese Yen (JPY)."""
  JPY

  """Jersey Pound."""
  JEP

  """Jordanian Dinar (JOD)."""
  JOD

  """Kazakhstani Tenge (KZT)."""
  KZT

  """Kenyan Shilling (KES)."""
  KES

  """Kuwaiti Dinar (KWD)."""
  KWD

  """Kyrgyzstani Som (KGS)."""
  KGS

  """Laotian Kip (LAK)."""
  LAK

  """Latvian Lati (LVL)."""
  LVL

  """Lebanese Pounds (LBP)."""
  LBP

  """Lesotho Loti (LSL)."""
  LSL

  """Liberian Dollar (LRD)."""
  LRD

  """Lithuanian Litai (LTL)."""
  LTL

  """Malagasy Ariary (MGA)."""
  MGA

  """Macedonia Denar (MKD)."""
  MKD

  """Macanese Pataca (MOP)."""
  MOP

  """Malawian Kwacha (MWK)."""
  MWK

  """Maldivian Rufiyaa (MVR)."""
  MVR

  """Mexican Pesos (MXN)."""
  MXN

  """Malaysian Ringgits (MYR)."""
  MYR

  """Mauritian Rupee (MUR)."""
  MUR

  """Moldovan Leu (MDL)."""
  MDL

  """Moroccan Dirham."""
  MAD

  """Mongolian Tugrik."""
  MNT

  """Mozambican Metical."""
  MZN

  """Namibian Dollar."""
  NAD

  """Nepalese Rupee (NPR)."""
  NPR

  """Netherlands Antillean Guilder."""
  ANG

  """New Zealand Dollars (NZD)."""
  NZD

  """Nicaraguan Córdoba (NIO)."""
  NIO

  """Nigerian Naira (NGN)."""
  NGN

  """Norwegian Kroner (NOK)."""
  NOK

  """Omani Rial (OMR)."""
  OMR

  """Pakistani Rupee (PKR)."""
  PKR

  """Papua New Guinean Kina (PGK)."""
  PGK

  """Paraguayan Guarani (PYG)."""
  PYG

  """Peruvian Nuevo Sol (PEN)."""
  PEN

  """Philippine Peso (PHP)."""
  PHP

  """Polish Zlotych (PLN)."""
  PLN

  """Qatari Rial (QAR)."""
  QAR

  """Romanian Lei (RON)."""
  RON

  """Russian Rubles (RUB)."""
  RUB

  """Rwandan Franc (RWF)."""
  RWF

  """Samoan Tala (WST)."""
  WST

  """Saudi Riyal (SAR)."""
  SAR

  """Sao Tome And Principe Dobra (STD)."""
  STD

  """Serbian dinar (RSD)."""
  RSD

  """Seychellois Rupee (SCR)."""
  SCR

  """Singapore Dollars (SGD)."""
  SGD

  """Sudanese Pound (SDG)."""
  SDG

  """Syrian Pound (SYP)."""
  SYP

  """South African Rand (ZAR)."""
  ZAR

  """South Korean Won (KRW)."""
  KRW

  """South Sudanese Pound (SSP)."""
  SSP

  """Solomon Islands Dollar (SBD)."""
  SBD

  """Sri Lankan Rupees (LKR)."""
  LKR

  """Surinamese Dollar (SRD)."""
  SRD

  """Swazi Lilangeni (SZL)."""
  SZL

  """Swedish Kronor (SEK)."""
  SEK

  """Swiss Francs (CHF)."""
  CHF

  """Taiwan Dollars (TWD)."""
  TWD

  """Thai baht (THB)."""
  THB

  """Tanzanian Shilling (TZS)."""
  TZS

  """Trinidad and Tobago Dollars (TTD)."""
  TTD

  """Tunisian Dinar (TND)."""
  TND

  """Turkish Lira (TRY)."""
  TRY

  """Turkmenistani Manat (TMT)."""
  TMT

  """Ugandan Shilling (UGX)."""
  UGX

  """Ukrainian Hryvnia (UAH)."""
  UAH

  """United Arab Emirates Dirham (AED)."""
  AED

  """Uruguayan Pesos (UYU)."""
  UYU

  """Uzbekistan som (UZS)."""
  UZS

  """Vanuatu Vatu (VUV)."""
  VUV

  """Venezuelan Bolivares (VEF)."""
  VEF

  """Vietnamese đồng (VND)."""
  VND

  """West African CFA franc (XOF)."""
  XOF

  """Yemeni Rial (YER)."""
  YER

  """Zambian Kwacha (ZMW)."""
  ZMW
}

"""
Represents information about a customer of the shop, such as the customer's
contact details, their order history, and whether they've agreed to receive
email marketing.

"""
type Customer implements Node & CommentEventSubject & HasMetafields & LegacyInteroperability {
  """Whether the customer has agreed to receive marketing materials."""
  acceptsMarketing: Boolean!

  """A list of addresses associated with the customer."""
  addresses(
    """Truncate the array result to this size."""
    first: Int
  ): [MailingAddress!]!

  """The average amount that the customer spent per order."""
  averageOrderAmount: Money @deprecated(reason: "Use `averageOrderAmountV2` instead")

  """The average amount that the customer spent per order."""
  averageOrderAmountV2: MoneyV2

  """
  Whether the merchant can delete the customer from their store.

  A customer can be deleted from a store only if they have not yet made an
  order. After a customer makes an order, they can't be deleted from a store.

  """
  canDelete: Boolean!

  """The date and time when the customer was added to the store."""
  createdAt: DateTime!

  """The default address associated with the customer."""
  defaultAddress: MailingAddress

  """
  The full name of the customer, based on the values for first_name and last_name.

  """
  displayName: String!

  """The customer's email address."""
  email: String

  """A list of events associated with the customer."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `comments`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): EventConnection!

  """The customer's first name."""
  firstName: String

  """Whether the customer has a note associated with them."""
  hasNote: Boolean!

  """
  Whether the merchant has added timeline comments about the customer on the customer's page.

  """
  hasTimelineComment: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The image associated with the customer."""
  image(
    """
    Image width and height (1 - 2048 pixels) This argument is deprecated: Use
    `maxWidth` or `maxHeight` on `Image.transformedSrc` instead.
    """
    size: Int
  ): Image!

  """The customer's last name."""
  lastName: String

  """The customer's last order."""
  lastOrder: Order

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The amount of time since the customer was first added to the store.

  Example: 'about 12 years'.

  """
  lifetimeDuration: String!

  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """A note about the customer."""
  note: String

  """A list of the customer's orders."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = ID

    """
    Supported filter parameters:
     - `status`
     - `financial_status`
     - `fulfillment_status`
     - `source_name`
     - `chargeback_status`
     - `risk_level`
     - `customer_id`
     - `email`
     - `credit_card_last4`
     - `processed_at`
     - `checkout_token`
     - `cart_token`
     - `location_id`
     - `channel_id`
     - `sales_channel`
     - `discount_code`
     - `test`
     - `fraud_protection_level`
     - `reference_location_id`
     - `tag`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): OrderConnection!

  """
  The number of orders that the customer has made at the store in their lifetime.

  """
  ordersCount: UnsignedInt64!

  """The customer's phone number."""
  phone: String

  """The state of the customer's account with the shop."""
  state: CustomerState!

  """A list of tags assigned to the customer."""
  tags: [String!]!

  """
  Whether the customer is exempt from being charged taxes on their orders.
  """
  taxExempt: Boolean!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpent: Money!

  """
  The total amount that the customer has spent on orders in their lifetime.
  """
  totalSpentV2: MoneyV2!

  """The date and time when the customer was last updated."""
  updatedAt: DateTime!

  """
  Whether the email address is formatted correctly. This does not
  guarantee that the email address actually exists.

  """
  validEmailAddress: Boolean!

  """Whether the customer has verified their email address."""
  verifiedEmail: Boolean!
}

type CustomerConnection {
  """A list of edges."""
  edges: [CustomerEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type CustomerCreatePayload {
  """The created customer."""
  customer: Customer

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the customer to delete."""
input CustomerDeleteInput {
  """The ID of the customer to delete."""
  id: ID!
}

type CustomerDeletePayload {
  """ID of the deleted customer."""
  deletedCustomerId: ID

  """Shop of the deleted customer."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CustomerEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of CustomerEdge."""
  node: Customer!
}

"""
Provides the fields and values to use when creating or updating a customer.
"""
input CustomerInput {
  """
  Whether the customer has consented to receive marketing material via email.
  """
  acceptsMarketing: Boolean

  """An input that specifies addresses for a customer."""
  addresses: [MailingAddressInput!]

  """The unique email address of the customer."""
  email: String

  """The customer's first name."""
  firstName: String

  """
  Specifies the customer to update, or creates a new customer if one doesn't exist.
  """
  id: ID

  """The customer's last name."""
  lastName: String

  """Attaches additional metadata to the customer."""
  metafields: [MetafieldInput!]

  """A note about the customer."""
  note: String

  """The unique phone number for the customer."""
  phone: String

  """Tags that the shop owner has attached to the customer."""
  tags: [String!]

  """Whether the customer is exempt from paying taxes on their order."""
  taxExempt: Boolean
}

"""Represents a customer's activity on a shop's online store."""
type CustomerJourney {
  """
  The position of the current order within the customer's order history.
  """
  customerOrderIndex: Int!

  """
  The amount of days between first session and order creation date. First
  session represents first session since the last order, or first session within
  the 30 day attribution window, if more than 30 days has passed since the last order.
  """
  daysToConversion: Int!

  """The customer's first session going into the shop."""
  firstVisit: CustomerVisit!

  """The last session before an order is made."""
  lastVisit: CustomerVisit

  """Events preceding a customer order, such as shop sessions."""
  moments: [CustomerMoment!]!
}

"""Represents events preceding a customer order, such as shop sessions."""
interface CustomerMoment {
  """When the customer moment occurred."""
  occurredAt: DateTime!
}

"""The set of valid sort keys for the customerSavedSearches query."""
enum CustomerSavedSearchSortKeys {
  """Sort by the `name` value."""
  NAME

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The set of valid sort keys for the customers query."""
enum CustomerSortKeys {
  """Sort by the `name` value."""
  NAME

  """Sort by the `location` value."""
  LOCATION

  """Sort by the `orders_count` value."""
  ORDERS_COUNT

  """Sort by the `last_order_date` value."""
  LAST_ORDER_DATE

  """Sort by the `total_spent` value."""
  TOTAL_SPENT

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The valid values for the state of a customer's account with a shop."""
enum CustomerState {
  DECLINED
  DISABLED
  ENABLED
  INVITED
}

type CustomerUpdateDefaultAddressPayload {
  """The customer whose address was updated."""
  customer: Customer

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CustomerUpdatePayload {
  """The updated customer."""
  customer: Customer

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Information about a customer's session on a shop's online store."""
type CustomerVisit implements CustomerMoment & Node {
  """Globally unique identifier."""
  id: ID!

  """URL of the first page the customer landed on for the session."""
  landingPage: URL

  """
  Landing page information with URL linked in HTML. For example, the first page
  the customer visited was store.myshopify.com/products/1.
  """
  landingPageHtml: HTML

  """
  Represent actions taken by an app, on behalf of a merchant,
  to market Shopify resources such as products, collections, and discounts.

  """
  marketingEvent: MarketingEvent

  """When the customer moment occurred."""
  occurredAt: DateTime!

  """
  Marketing referral code from the link that the customer clicked to visit the store.
  Supports the following URL attributes: _ref_, _source_, or _r_.
  For example, if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.

  """
  referralCode: String

  """
  Describes the source type and platform of the session,         such as a
  session started via a store's home page from a Facebook ad.
  """
  referralInfo: String! @deprecated(reason: "Use `referralInfoHtml` instead")

  """Referral information with URLs linked in HTML."""
  referralInfoHtml: FormattedString!

  """
  Webpage where the customer clicked a link that sent them to the online store.
  For example, _https://randomblog.com/page1_ or _android-app://com.google.android.gm_.

  """
  referrerUrl: URL

  """
  Source from which the customer visited the store, such as a platform (Facebook, Google), email, direct,
  a website domain, QR code, or unknown.

  """
  source: String!

  """Describes the source explicitly for first or last session."""
  sourceDescription: String

  """Type of marketing tactic."""
  sourceType: MarketingTactic

  """
  A set of UTM parameters gathered from the URL parameters of the referrer.
  """
  utmParameters: UTMParameters
}

"""The input fields used to create a custom fulfillment service."""
input CustomFulfillmentServiceCreateInput {
  """The name of the fulfillment service."""
  name: String!

  """
  The address to which an email is sent when the custom fulfillment service
  receives a fulfill request.

  """
  email: String!
}

type CustomFulfillmentServiceCreatePayload {
  """The created custom fulfillment service."""
  customFulfillmentService: FulfillmentService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CustomFulfillmentServiceDeletePayload {
  """The ID of the deleted custom fulfillment service."""
  deletedId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type CustomFulfillmentServiceUpdatePayload {
  """The updated custom fulfillment service."""
  customFulfillmentService: FulfillmentService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
A checkout line item that represents a gift card with a custom amount (no variant).
"""
input CustomGiftCardLineItemInput {
  """Gift card product that the custom gift card belongs to."""
  giftCardProductId: ID

  """Price of the custom gift card."""
  price: Decimal!

  """Title of the custom gift card."""
  title: String!
}

type CustomShippingPackagingCreatePayload {
  """The shipping packaging that was created."""
  shippingPackaging: DeliveryShippingPackaging

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""An ISO-8601 encoded UTC date string."""
scalar Date

"""An ISO-8601 encoded UTC date time string."""
scalar DateTime

"""
A signed decimal number, which supports arbitrary precision and is serialized as a string.
"""
scalar Decimal

"""
Deletion events chronicle the destruction of resources (e.g. products and collections).
Once deleted, the deletion event is the only trace of the original's existence,
as the resource itself has been removed and can no longer be accessed.

"""
type DeletionEvent {
  """
  The date and time when the deletion event for the related resource was generated.
  """
  occurredAt: DateTime!

  """The id of the resource that was deleted."""
  subjectId: ID!

  """The type of resource that was deleted."""
  subjectType: DeletionEventSubjectType!
}

type DeletionEventConnection {
  """A list of edges."""
  edges: [DeletionEventEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DeletionEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeletionEventEdge."""
  node: DeletionEvent!
}

"""The set of valid sort keys for the deletionEvents query."""
enum DeletionEventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The supported subject types of deletion events."""
enum DeletionEventSubjectType {
  COLLECTION
  PRODUCT
}

"""
Specifies the input fields with informations of a carrier and a specific service it provides.
"""
input DeliveryCarrierInput {
  """The id of the carrier that will process the label."""
  carrierServiceId: ID!

  """The code defining the service type provided by the carrier."""
  carrierServiceCode: String!

  """
  The user friendly name defining the service type provided by the carrier.
  """
  carrierServiceName: String!
}

"""Information regarding a carrier service."""
type DeliveryCarrierService implements Node {
  """Globally unique identifier."""
  id: ID!

  """Name of the carrier service."""
  name: String
}

"""Shipping packaging supplied by carrier used to pack shipment."""
type DeliveryCarrierShippingPackaging implements Node & DeliveryShippingPackaging {
  """Carrier supplying the packaging."""
  carrier: String!

  """Code identifying this packaging."""
  carrierPackagingCode: String!

  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """Outside dimensions of the empty shipping packaging."""
  dimensions: BoxDimensions!

  """Globally unique identifier."""
  id: ID!

  """Descriptive name for the packaging."""
  name: String!

  """Type of packaging."""
  type: ShippingPackaging!

  """Weight of the empty shipping packaging."""
  weight: Weight!
}

"""
A condition that must pass for a method definition to be applied to an order.
"""
interface DeliveryCondition {
  """Globally unique identifier."""
  id: ID!

  """The operator to compare the field and criteria."""
  operator: DeliveryConditionOperator!
}

type DeliveryConditionConnection {
  """A list of edges."""
  edges: [DeliveryConditionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DeliveryConditionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryConditionEdge."""
  node: DeliveryCondition!
}

"""The field type that the condition will be applied to."""
enum DeliveryConditionOperator {
  """The condition will check if the field is equal to the criteria."""
  EQUAL_TO

  """The condition will check if the field is not equal to the criteria."""
  NOT_EQUAL_TO

  """The condition will check if the field is greater than the criteria."""
  GREATER_THAN

  """
  The condition will check if the field is greater than or equal to the criteria.
  """
  GREATER_THAN_OR_EQUAL_TO

  """The condition will check if the field is less than the criteria."""
  LESS_THAN

  """
  The condition will check if the field is less than or equal to the criteria.
  """
  LESS_THAN_OR_EQUAL_TO
}

"""Custom shipping packaging used to pack shipment."""
type DeliveryCustomShippingPackaging implements Node & DeliveryShippingPackaging {
  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """Outside dimensions of the empty shipping packaging."""
  dimensions: BoxDimensions!

  """Globally unique identifier."""
  id: ID!

  """Descriptive name for the packaging."""
  name: String!

  """Type of packaging."""
  type: ShippingPackaging!

  """Weight of the empty shipping packaging."""
  weight: Weight!
}

"""
Input fields for a new custom shipping packaging used to pack shipment.
"""
input DeliveryCustomShippingPackagingInput {
  """Weight of the empty shipping packaging."""
  weight: WeightInput!

  """Outside dimensions of the empty shipping packaging."""
  dimensions: ObjectDimensionsInput!

  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean

  """Descriptive name for the packaging."""
  name: String!

  """Type of packaging."""
  type: ShippingPackaging!
}

"""Represents an error that happened during a Shipping Label Purchase."""
type DeliveryLabelPurchaseError implements DisplayableError {
  """Carrier to which this error pertains."""
  carrier: String

  """Possible error classifications an error can be classified as."""
  classification: DeliveryLabelPurchaseErrorClassification!

  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error classifications an error can be classified as."""
enum DeliveryLabelPurchaseErrorClassification {
  """Errors with label's custom lines."""
  CUSTOMS_LINES

  """Errors with label's line items."""
  LINE_ITEMS

  """General errors with this label."""
  BASE

  """Errors with the label size or weight."""
  PACKAGE_AND_WEIGHT

  """Errors with the shipping address."""
  SHIPPING_ADDRESS
}

"""
A method definition describes the delivery rate and the conditions that must be met for the method to be applied.
"""
type DeliveryMethodDefinition implements Node {
  """Whether this method definition is active."""
  active: Boolean!

  """Returns a Condition by ID."""
  condition(
    """The ID of the DeliveryCondition to return."""
    id: ID!
  ): DeliveryCondition

  """
  The conditions that must pass for this method definition to be applied to an order.
  """
  conditions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DeliveryConditionConnection!

  """The description of the method definition."""
  description: String

  """Globally unique identifier."""
  id: ID!

  """The name of the method definition."""
  name: String!

  """TODO: Refactor with new model."""
  participant: DeliveryParticipant

  """TODO: Refactor with new model."""
  rateDefinition: DeliveryRateDefinition
}

type DeliveryMethodDefinitionConnection {
  """A list of edges."""
  edges: [DeliveryMethodDefinitionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DeliveryMethodDefinitionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryMethodDefinitionEdge."""
  node: DeliveryMethodDefinition!
}

"""
A carrier defined rate with possible merchant defined fixed fee or percentage of rate fee.
"""
type DeliveryParticipant implements Node {
  """Use this carrier service for this participant."""
  carrierService: DeliveryCarrierService!

  """The merchant set fixed fee for this participant."""
  fixedFee: MoneyV2

  """Globally unique identifier."""
  id: ID!

  """The merchant set percentage of rate fee for this participant."""
  percentageOfRateFee: Float!
}

"""The Merchant defined rate of the DeliveryMethodDefinition."""
type DeliveryRateDefinition implements Node {
  """Globally unique identifier."""
  id: ID!

  """The price of this rate."""
  price: MoneyV2!
}

"""The optional return label for an order."""
type DeliveryReturnLabel implements Node {
  """User-friendly name of the carrier that will handle this return label."""
  carrierName: String

  """Address that the packaging is going to."""
  destinationAddress: MailingAddress!

  """Represents whether a return label is a draft."""
  draft: Boolean!

  """Globally unique identifier."""
  id: ID!

  """Errors resulting from the last purchase request."""
  lastPurchaseRequestErrors: [DeliveryLabelPurchaseError!]

  """Errors resulting from the last rate request."""
  lastRateRequestErrors: [DeliveryLabelPurchaseError!]

  """
  Sequential number scoped by order that provides a user friendly identifier for the return label.
  """
  number: Int!

  """Address that the packaging is coming from."""
  originAddress: MailingAddress!

  """
  A public link that can be used to download the label image. The value will be
  null if the label has not yet been purchased.
  """
  publicFileUrl: URL

  """Name of the service purchased for this return label."""
  serviceName: String

  """The shipping packaging that this return label will be affixed to."""
  shippingPackaging: DeliveryShippingPackaging!

  """The shipping rates for a return label."""
  shippingRates: [ShippingRate!]!

  """Total weight of the returned items including packaging."""
  totalWeight: Weight!

  """Tracking number for the purchased return label."""
  trackingNumber: String

  """
  URL pointing to the website where you can see tracking information about this label.
  """
  trackingUrl: URL
}

"""Specifies the input fields for a return label."""
input DeliveryReturnLabelInput {
  """Address that the packaging is going to."""
  destinationAddress: MailingAddressInput

  """Shipping packaging associated with the return label."""
  shippingPackagingId: ID

  """Total weight of the returned items including packaging."""
  totalWeight: WeightInput
}

"""Shipping packaging used to pack shipment."""
interface DeliveryShippingPackaging {
  """
  The default packaging is the one used to calculate shipping costs on checkout.
  """
  default: Boolean!

  """Outside dimensions of the empty shipping packaging."""
  dimensions: BoxDimensions!

  """Globally unique identifier."""
  id: ID!

  """Descriptive name for the packaging."""
  name: String!

  """Type of packaging."""
  type: ShippingPackaging!

  """Weight of the empty shipping packaging."""
  weight: Weight!
}

type DeliveryShippingPackagingConnection {
  """A list of edges."""
  edges: [DeliveryShippingPackagingEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DeliveryShippingPackagingEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DeliveryShippingPackagingEdge."""
  node: DeliveryShippingPackaging!
}

"""The condition applies to the total price of the order."""
type DeliveryTotalPriceCondition implements DeliveryCondition & Node {
  """
  The criteria that the field will be compared to based on the operator.
  """
  criteria: MoneyV2!

  """Globally unique identifier."""
  id: ID!

  """The operator to compare the field and criteria."""
  operator: DeliveryConditionOperator!
}

"""The condition applies to the total weight of the order."""
type DeliveryTotalWeightCondition implements DeliveryCondition & Node {
  """
  The criteria that the field will be compared to based on the operator.
  """
  criteria: Weight!

  """Globally unique identifier."""
  id: ID!

  """The operator to compare the field and criteria."""
  operator: DeliveryConditionOperator!
}

type DeviceAttributesReportPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Digital wallet, such as Apple Pay, which can be used for accelerated checkouts.
"""
enum DigitalWallet {
  """Apple Pay"""
  APPLE_PAY

  """Android Pay"""
  ANDROID_PAY

  """Google Pay"""
  GOOGLE_PAY

  """Shopify Pay"""
  SHOPIFY_PAY
}

"""
An amount discounting the line that has been allocated by an associated discount application.

"""
type DiscountAllocation {
  """Money amount allocated by the discount application."""
  allocatedAmount: MoneyV2! @deprecated(reason: "Use `allocatedAmountSet` instead")

  """
  Money amount allocated by the discount application in shop and presentment currencies.
  """
  allocatedAmountSet: MoneyBag!

  """The discount of which this allocated amount originated from."""
  discountApplication: DiscountApplication!
}

"""
Discount applications capture the intentions of a discount source at
the time of application on an order's line items or shipping lines.

"""
interface DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  An ordered index which can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.

  """
  index: Int!

  """
  Which lines of targetType on the order that the discount is allocated over.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  The type of line on the order that the discount is applicable towards.
  """
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""
The method by which the discount's value is allocated onto its entitled lines.
"""
enum DiscountApplicationAllocationMethod {
  """The value is spread across all entitled lines."""
  ACROSS

  """The value is applied onto every entitled line."""
  EACH

  """The value is specifically applied onto a particular line."""
  ONE
}

type DiscountApplicationConnection {
  """A list of edges."""
  edges: [DiscountApplicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DiscountApplicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountApplicationEdge."""
  node: DiscountApplication!
}

"""
Which lines on the order that the discount is allocated over, of the type
defined by the Discount Application's target_type.

"""
enum DiscountApplicationTargetSelection {
  """The discount is allocated onto all the lines."""
  ALL

  """The discount is allocated onto only the lines it is entitled for."""
  ENTITLED

  """The discount is allocated onto explicitly chosen lines."""
  EXPLICIT
}

"""
The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.

"""
enum DiscountApplicationTargetType {
  """The discount applies onto line items."""
  LINE_ITEM

  """The discount applies onto shipping lines."""
  SHIPPING_LINE
}

"""An automatic discount."""
union DiscountAutomatic = DiscountAutomaticBxgy

type DiscountAutomaticActivatePayload {
  """The deactivated automatic discount."""
  automaticDiscount: DiscountAutomatic

  """List of errors that occurred while activating discount."""
  userErrors: [DiscountUserError!]!
}

"""An automatic bxgy discount."""
type DiscountAutomaticBxgy implements Node {
  """When the discount was created."""
  createdAt: DateTime!

  """
  Qualifying items and quantity that customer has to buy to be eligible for this discount.
  """
  customerBuys: DiscountCustomerBuys!

  """
  Qualifying items and quantity that will be discounted and the value of the discount.
  """
  customerGets: DiscountCustomerGets!

  """When the discount expires, or never if null."""
  endsAt: DateTime

  """List of discount features."""
  features: [DiscountFeature!]!

  """Globally unique identifier."""
  id: ID!

  """When the discount is starting to be active."""
  startsAt: DateTime!

  """The status of the discount."""
  status: DiscountStatus!

  """A summary of the discount."""
  summary: String

  """The title of the discount."""
  title: String!

  """How many times the automatic discount has been used."""
  usageCount: Int!

  """
  The maximum number of times the discount will be allocated onto an order.
  """
  usesPerOrderLimit: Int
}

type DiscountAutomaticBxgyCreatePayload {
  """Created discount."""
  automaticBxgyDiscount: DiscountAutomaticBxgy

  """List of errors that occurred while creating discount."""
  userErrors: [DiscountUserError!]!
}

"""Specifies input field to create or update automatic bogo discount."""
input DiscountAutomaticBxgyInput {
  """When the discount is starting to be active."""
  startsAt: DateTime

  """When the discount expires, or never if null."""
  endsAt: DateTime

  """The title of the discount."""
  title: String

  """
  Specifies maximum number of times the discount will be allocated onto an order.
  """
  usesPerOrderLimit: UnsignedInt64

  """Specifies what customer needs to buy."""
  customerBuys: DiscountCustomerBuysInput

  """Specifies what the customer will get."""
  customerGets: DiscountCustomerGetsInput
}

type DiscountAutomaticBxgyUpdatePayload {
  """The updated discount."""
  automaticBxgyDiscount: DiscountAutomaticBxgy

  """List of errors that occurred while updating discount."""
  userErrors: [DiscountUserError!]!
}

type DiscountAutomaticConnection {
  """A list of edges."""
  edges: [DiscountAutomaticEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DiscountAutomaticDeactivatePayload {
  """The deactivated automatic discount."""
  automaticDiscount: DiscountAutomatic

  """List of errors that occurred while deactivating discount."""
  userErrors: [DiscountUserError!]!
}

type DiscountAutomaticDeletePayload {
  """The deleted automatic discount id."""
  deletedAutomaticDiscountId: ID

  """List of errors that occurred while deleting discount."""
  userErrors: [DiscountUserError!]!
}

type DiscountAutomaticEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DiscountAutomaticEdge."""
  node: DiscountAutomatic!
}

"""
Discount code applications capture the intentions of a discount code at
the time that it is applied onto an order.

"""
type DiscountCodeApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """
  The string identifying the discount code that was used at the time of application.
  """
  code: String!

  """
  An ordered index which can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.

  """
  index: Int!

  """
  Which lines of targetType on the order that the discount is allocated over.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  The type of line on the order that the discount is applicable towards.
  """
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""The set of valid sort keys for the discountCodes query."""
enum DiscountCodeSortKeys {
  """Sort by the `code` value."""
  CODE

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""Entitled or prerequisite collections on a discount."""
type DiscountCollections {
  """
  List of collections that discount can have as prerequisite or entitlement.
  """
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!
}

"""Specifies collections attached to a discount."""
input DiscountCollectionsInput {
  """Specifies list of collection ids."""
  collectionIds: [ID!]
}

"""Prerequisite items and prerequisite quantity."""
type DiscountCustomerBuys {
  """Prerequisites items for discount."""
  items: DiscountItems!

  """Prerequisite quantity."""
  value: DiscountCustomerBuysValue!
}

"""Specifies prerequisite items and prerequisite quantity."""
input DiscountCustomerBuysInput {
  """Specifies quantity of prerequisite items."""
  value: DiscountCustomerBuysValueInput

  """
  Specifies prerequisite item ids. Items could be either collections or products.
  """
  items: DiscountItemsInput
}

"""Prerequisite quantity required for discount to be applicable."""
union DiscountCustomerBuysValue = DiscountQuantity

"""Specifies prerequisite quantity for the discount."""
input DiscountCustomerBuysValueInput {
  """Specifies quantity of prerequisite items."""
  quantity: UnsignedInt64
}

"""
Combines items that will be discounted, the quantity that will be discounted and the value of discount.

"""
type DiscountCustomerGets {
  """Entitled items."""
  items: DiscountItems!

  """Entitled quantity and the discount value."""
  value: DiscountCustomerGetsValue!
}

"""
Specifies items that will be discounted, quantity of items that will be discounted and the value of discount.

"""
input DiscountCustomerGetsInput {
  """Specifies quantity of items discounted and the discount value."""
  value: DiscountCustomerGetsValueInput

  """
  Specifies ids of items that customer gets. Items could be either collections or products.
  """
  items: DiscountItemsInput
}

"""Represents the value of the discount and how it will be applied."""
union DiscountCustomerGetsValue = DiscountOnQuantity

"""
Specifies quantity of items discounted and the discount value.

"""
input DiscountCustomerGetsValueInput {
  """Specifies quantity of items discounted and the discount value."""
  discountOnQuantity: DiscountOnQuantityInput
}

"""
Represents how the discount will be applied. Currently, only percentage off is supported.
"""
union DiscountEffect = DiscountPercentage

"""
Specifies how the discount will be applied. Currently, only percentage off is supported.
"""
input DiscountEffectInput {
  """
  Specifies percentage discount value. Value must be between 0.00 - 1.00.
  """
  percentage: Float
}

"""Possible error codes that could be returned by a discounts mutation."""
enum DiscountErrorCode {
  """Input value is blank."""
  BLANK

  """Input value is not present."""
  PRESENT

  """Input value should be equal to allowed value."""
  EQUAL_TO

  """Input value should be greater than minimum allowed value."""
  GREATER_THAN

  """Input value is invalid."""
  INVALID

  """Input value should be less or equal to maximum allowed value."""
  LESS_THAN_OR_EQUAL_TO

  """Input value is already taken."""
  TAKEN

  """Input value is too long."""
  TOO_LONG

  """Input value is too short."""
  TOO_SHORT

  """Unexpected internal error happened."""
  INTERNAL_ERROR

  """Value is outside allowed range."""
  VALUE_OUTSIDE_RANGE

  """Exceeded maximum allowed value."""
  EXCEEDED_MAX

  """End date should be after start date."""
  END_DATE_BEFORE_START_DATE

  """Exceeded maximum number of discounts for this shop."""
  EXCEEDED_MAX_NUMBER_OF_DISCOUNT

  """Exceeded maximum number of collections for this discount."""
  EXCEEDED_MAX_COLLECTION

  """Exceeded maximum number of products for this discount."""
  EXCEEDED_MAX_PRODUCT

  """Duplicate collection id present."""
  DUPLICATE_COLLECTION

  """Exceeded maximum number of variants for this discount."""
  EXCEEDED_MAX_VARIANT

  """Duplicate product id present."""
  DUPLICATE_PRODUCT

  """Variant is already selected through product."""
  VARIANT_ALREADY_SELECTED_THROUGH_PRODUCT

  """Duplicate variant id present."""
  DUPLICATE_VARIANT

  """Cannot select collections if product or variants are selected."""
  CANNOT_COMBINE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS

  """Invalid collection id present."""
  INVALID_COLLECTION

  """Invalid product id present."""
  INVALID_PRODUCT

  """Invalid variant id present."""
  INVALID_VARIANT

  """
  Active period overlaps with other automatic discounts. At any given time, only one automatic discount can be active.
  """
  ACTIVE_PERIOD_OVERLAP
}

"""Feature implemented by the discount."""
enum DiscountFeature {
  """The discount supports base features."""
  BASE
}

"""
Entitled or prerequisite items on a discount. An item could be either collection or product or product_variant.

"""
union DiscountItems = DiscountProducts | DiscountCollections

"""Specifies items attached to a discount."""
input DiscountItemsInput {
  """Specifies products and product variants attached to a discount."""
  products: DiscountProductsInput

  """Specifies collections attached to a discount."""
  collections: DiscountCollectionsInput
}

"""
Combines quantity of items discounted, the discount value and how the discount will be applied.
"""
type DiscountOnQuantity {
  """Discounting effect on items."""
  effect: DiscountEffect!

  """Number of items discounted."""
  quantity: DiscountQuantity!
}

"""Specifies quantity of items discounted and the discount value."""
input DiscountOnQuantityInput {
  """Specifies quantity of items discounted."""
  quantity: UnsignedInt64

  """Specifies percentage discount value."""
  effect: DiscountEffectInput
}

"""Percentage value in discount."""
type DiscountPercentage {
  """Percentage value."""
  percentage: Float!
}

"""Entitled or prerequisite products and product variants on a discount."""
type DiscountProducts {
  """
  List of product variants that discount can have as prerequisite or entitlement.
  """
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """
  List of products that discount can have as prerequisite or entitlement.
  """
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!
}

"""Specifies products and product variants attached to a discount."""
input DiscountProductsInput {
  """Specifies list of product ids."""
  productIds: [ID!]

  """Specifies list of product variant ids."""
  productVariantIds: [ID!]
}

"""Quantity of items in discount."""
type DiscountQuantity {
  """Quantity of items."""
  quantity: UnsignedInt64!
}

"""The status of the discount."""
enum DiscountStatus {
  """The discount is active."""
  ACTIVE

  """The discount is expired."""
  EXPIRED

  """The discount is scheduled."""
  SCHEDULED
}

"""
Represents an error that happens during execution of a discount mutation.
"""
type DiscountUserError implements DisplayableError {
  """Error code to uniquely identify the error."""
  code: DiscountErrorCode

  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Represents an error in the input of a mutation."""
interface DisplayableError {
  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""The possible statuses of a dispute."""
enum DisputeStatus {
  NEEDS_RESPONSE
  UNDER_REVIEW
  CHARGE_REFUNDED
  ACCEPTED
  WON
  LOST
}

"""The possible types for a dispute."""
enum DisputeType {
  CHARGEBACK
  INQUIRY
}

"""A 'AAAA'-type DNS record."""
type DnsAAAARecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""A 'A'-type DNS record."""
type DnsARecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""A 'CNAME'-type DNS record."""
type DnsCNAMERecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""A 'MX'-type DNS record."""
type DnsMXRecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's priority relative to other DNS records."""
  priority: Int!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""A 'NS'-type (Nameserver) DNS record."""
type DnsNameserverRecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""Interface for a DNS record's base fields: name and value."""
interface DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

type DnsRecordCreatePayload {
  """The newly-created DnsRecord."""
  record: DnsRecord

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DnsRecordDeletePayload {
  """The Global ID of the deleted DnsRecord."""
  deletedDnsRecordId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Input parameters for manipulating a DnsRecord."""
input DnsRecordInput {
  """A DNS record's type."""
  type: DnsRecordType

  """A DNS record's name."""
  name: String

  """A DNS record's value."""
  value: String

  """A DNS record's priority relative to other DNS records."""
  priority: Int

  """The DNS record weight."""
  weight: Int

  """The DNS record port."""
  port: Int

  """The DNS record protocol."""
  protocol: String

  """The DNS record service."""
  service: String
}

"""Possible types of a DNS records."""
enum DnsRecordType {
  A
  AAAA
  CNAME
  MX
  NAMESERVER
  SRV
  TXT
}

"""A 'SRV'-type DNS record."""
type DnsSRVRecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """The DNS record port."""
  port: Int!

  """A DNS record's priority relative to other DNS records."""
  priority: Int!

  """The DNS record protocol."""
  protocol: String!

  """The DNS record service."""
  service: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!

  """The DNS record weight."""
  weight: Int!
}

"""A 'TXT'-type DNS record."""
type DnsTXTRecord implements Node & DnsRecord {
  """Globally unique identifier."""
  id: ID!

  """A DNS record's name."""
  name: String!

  """A DNS record's type."""
  type: DnsRecordType!

  """A DNS record's value."""
  value: String!
}

"""The DNS Zone File associated with a domain."""
type DnsZone implements Node {
  """Globally unique identifier."""
  id: ID!

  """The records belonging to the zone."""
  records(
    """One of possible types of a DNS record."""
    type: [DnsRecordType!]
  ): [DnsRecord!]!

  """The TTL (Time To Live) for the records in the zone file."""
  ttl: Int!
}

type DnsZoneNameserversResetPayload {
  """Nameserver records after reset."""
  nameservers: [DnsNameserverRecord!]

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DnsZoneRecordsResetPayload {
  """Records created by the reset."""
  records: [DnsRecord!]

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
A unique string that represents the address of a Shopify store on the Internet.
"""
type Domain implements Node {
  """The host name of the domain (eg: `example.com`)."""
  host: String!

  """Globally unique identifier."""
  id: ID!

  """Whether SSL is enabled or not."""
  sslEnabled: Boolean!

  """
  The recurring subcription associated with a domain purchase. This may be null
  if the domain was purchased elsewhere but is pointing to Shopify.
  """
  subscription: DomainSubscription

  """The URL of the domain (eg: `https://example.com`)."""
  url: URL!
}

"""The recurring subcription associated with a domain purchase."""
type DomainSubscription implements Node {
  """The zone file associated with the domain suscription."""
  dnsZone: DnsZone!

  """The hostname of the domain."""
  host: String!

  """Globally unique identifier."""
  id: ID!
}

"""
Returns unfulfilled line items grouped by their fulfillment service. Each draft
fulfillment contains additional information, such as whether the fulfillment
requires shipping and whether a shipping label can be printed for it.

"""
type DraftFulfillment {
  """Whether a label can be purchased."""
  allowLabelPurchase: Boolean!

  """
  The line items (which might correspond to a variant) that are part of this draft fulfillment.
  """
  lineItems: [LineItem!]!

  """Whether a fulfillment requires shipping."""
  requiresShipping: Boolean!

  """The service responsible for fulfilling the fulfillment."""
  service: FulfillmentService!
}

"""
Represents a draft order. Merchants can use draft orders to create orders on behalf of their customers.

"""
type DraftOrder implements Node & HasMetafields & CommentEventSubject & LegacyInteroperability {
  """Order-level discount applied to the draft order."""
  appliedDiscount: DraftOrderAppliedDiscount

  """
  Billing address of the customer.

  """
  billingAddress: MailingAddress

  """
  Date and time when the draft order converted to a new order,
  and the draft order's status changed to **Completed**.

  """
  completedAt: DateTime

  """Date and time when the draft order was created in Shopify."""
  createdAt: DateTime!

  """
  Three letter code for the currency of the store at the time that the invoice is sent.

  """
  currencyCode: CurrencyCode!

  """
  Custom information added to the draft order on behalf of your customer.

  """
  customAttributes: [Attribute!]!

  """
  Customer who will be sent an invoice for the draft order, if there is one.
  """
  customer: Customer

  """
  Email address of the customer, which is used to send notifications to.
  """
  email: String

  """List of events associated with the draft order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `comments`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): EventConnection!

  """Whether the merchant has added timeline comments to the draft order."""
  hasTimelineComment: Boolean!

  """Globally unique identifier."""
  id: ID!

  """Date and time when the invoice was last emailed to the customer."""
  invoiceSentAt: DateTime

  """
  Link to the checkout, which is sent to your customer in the invoice email.
  """
  invoiceUrl: URL

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of the line items in the draft order."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DraftOrderLineItemConnection!

  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Unique identifier for the draft order, which is unique within the store. For example, _#D1223_.

  """
  name: String!

  """Text from an optional note attached to the draft order."""
  note: String! @deprecated(reason: "Use `note2` instead")

  """Text from an optional note attached to the draft order."""
  note2: String

  """Order that was created from this draft order."""
  order: Order

  """Shipping mailing address of the customer."""
  shippingAddress: MailingAddress

  """Line item that contains the shipping costs."""
  shippingLine: ShippingLine

  """Status of the draft order."""
  status: DraftOrderStatus!

  """
  Subtotal of the line items and their discounts (does not contain shipping charges or shipping discounts, or taxes).

  """
  subtotalPrice: Money!

  """Tags added to the draft order."""
  tags: [String!]!

  """Whether the draft order is tax exempt."""
  taxExempt: Boolean!

  """Total amount of taxes charged for each line item and shipping line."""
  taxLines: [TaxLine!]!

  """Whether the line item prices include taxes."""
  taxesIncluded: Boolean!

  """
  Total amount of the draft order (includes taxes, shipping charges, and discounts).
  """
  totalPrice: Money!

  """Total shipping charge for the draft order."""
  totalShippingPrice: Money!

  """Total amount of taxes for the draft order."""
  totalTax: Money!

  """Total weight (grams) of the draft order."""
  totalWeight: UnsignedInt64!

  """
  Date and time when the draft order was last changed.
  The format is YYYY-MM-DD HH:mm:ss (for example, 2016-02-05 17:04:01).

  """
  updatedAt: DateTime!
}

"""The order-level discount applied to a draft order."""
type DraftOrderAppliedDiscount {
  """
  Amount of the order-level discount that is applied to the draft order.
  """
  amount: Money! @deprecated(reason: "Use `amountV2` instead")

  """Amount of money discounted."""
  amountV2: MoneyV2!

  """Description of the order-level discount."""
  description: String!

  """Name of the order-level discount."""
  title: String

  """
  Amount of the order level discount (when value_type is percentage,
  the value in this field is the percentage discount).

  """
  value: Float!

  """Type of the order-level discount."""
  valueType: DraftOrderAppliedDiscountType!
}

"""
The input fields for applying an order-level discount to a draft order.
"""
input DraftOrderAppliedDiscountInput {
  """
  The applied amount of the discount.

  """
  amount: Money!

  """
  Reason for the discount.

  """
  description: String

  """
  Title of the discount.

  """
  title: String

  """
  The value of the discount.
  If the type of the discount is fixed amount, then this is a fixed dollar amount.
  If the type is percentage, then this is the percentage.

  """
  value: Float!

  """
  The type of discount.

  """
  valueType: DraftOrderAppliedDiscountType!
}

"""The valid discount types that can be applied to a draft order."""
enum DraftOrderAppliedDiscountType {
  """A fixed amount in the store's currency."""
  FIXED_AMOUNT

  """A percentage of the order subtotal."""
  PERCENTAGE
}

type DraftOrderCalculatePayload {
  """The calculated properties for a draft order."""
  calculatedDraftOrder: CalculatedDraftOrder

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DraftOrderCompletePayload {
  """The completed draft order."""
  draftOrder: DraftOrder

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DraftOrderConnection {
  """A list of edges."""
  edges: [DraftOrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DraftOrderCreatePayload {
  """
  The created draft order.

  """
  draftOrder: DraftOrder

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the draft order to delete by its ID."""
input DraftOrderDeleteInput {
  """
  The ID of the draft order to delete.

  """
  id: ID!
}

type DraftOrderDeletePayload {
  """
  The ID of the deleted draft order.

  """
  deletedId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DraftOrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderEdge."""
  node: DraftOrder!
}

"""The input fields used to create or update a draft order."""
input DraftOrderInput {
  """
  The discount that will be applied to the draft order.
  A draft order line item can have one discount. A draft order can also have one order-level discount.

  """
  appliedDiscount: DraftOrderAppliedDiscountInput

  """
  The mailing address associated with the payment method.

  """
  billingAddress: MailingAddressInput

  """
  Customer associated with the draft order.

  """
  customerId: ID

  """
  Extra information added to the customer.

  """
  customAttributes: [AttributeInput!]

  """
  The customer's email address.

  """
  email: String

  """
  Product variant line item or custom line item associated to the draft order.
  Each draft order must include at least one line item.

  """
  lineItems: [DraftOrderLineItemInput!]

  """
  Metafields attached to the draft order.

  """
  metafields: [MetafieldInput!]

  """
  The text of an optional note that a shop owner can attach to the draft order.

  """
  note: String

  """
  The mailing address to where the order will be shipped.

  """
  shippingAddress: MailingAddressInput

  """
  A shipping line object, which details the shipping method used.

  """
  shippingLine: ShippingLineInput

  """
  Additional short descriptors, commonly used for filtering and searching,
  formatted as a string of comma-separated values.

  """
  tags: [String!]

  """
  Whether or not taxes are exempt for the draft order.
  If false, then Shopify will refer to the taxable field for each line item.
  If a customer is applied to the draft order, then Shopify will use the customer's tax exempt field instead.

  """
  taxExempt: Boolean

  """
  Sent as part of a draft order object to load customer shipping information.

  """
  useCustomerDefaultAddress: Boolean
}

type DraftOrderInvoicePreviewPayload {
  """HTML to preview the draft order invoice email."""
  previewHtml: HTML

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type DraftOrderInvoiceSendPayload {
  """The draft order an invoice email is sent for."""
  draftOrder: DraftOrder

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a line item included in a draft order."""
type DraftOrderLineItem implements Node {
  """
  Discount which will be applied to the line item or the overall order.

  """
  appliedDiscount: DraftOrderAppliedDiscount

  """
  Whether this is a product variant line item, or a custom line item.
  If set to true indicates a custom line item. If set to false indicates a product variant line item.

  """
  custom: Boolean!

  """List of additional information (metafields) about the line item."""
  customAttributes: [Attribute!]!

  """
  Line item price after discounts are applied.

  """
  discountedTotal: Money!

  """
  The `discountedTotal` divided by `quantity`, resulting in the value of the discount per unit.

  """
  discountedUnitPrice: Money!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  """
  fulfillmentService: FulfillmentService!

  """
  Weight in grams. Can only be specified if this is a custom line item.

  """
  grams: Int @deprecated(reason: "Use `weight` instead")

  """Globally unique identifier."""
  id: ID!

  """Image associated with the draft order line item."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """Whether the line item represents the puchase of a gift card."""
  isGiftCard: Boolean!

  """Name of the product."""
  name: String!

  """
  Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.

  """
  originalTotal: Money!

  """Variant price without any discounts applied."""
  originalUnitPrice: Money!

  """
  The product corresponding to the line item’s product variant.

  """
  product: Product

  """Number of variant items requested in the draft order."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Variant SKU number."""
  sku: String

  """
  A list of tax line objects, each of which details the total taxes applicable to the order.

  """
  taxLines: [TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  """
  Total value of the discount applied to the line item.

  """
  totalDiscount: Money!

  """
  Associated variant for the line item.

  """
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String

  """Weight unit and value for a draft order line item."""
  weight: Weight
}

type DraftOrderLineItemConnection {
  """A list of edges."""
  edges: [DraftOrderLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type DraftOrderLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of DraftOrderLineItemEdge."""
  node: DraftOrderLineItem!
}

"""The input fields used to create a line item for a draft order."""
input DraftOrderLineItemInput {
  """
  Discount which will be applied to the line item.

  """
  appliedDiscount: DraftOrderAppliedDiscountInput

  """
  Represents a generic custom attribute using a key value pair.

  """
  customAttributes: [AttributeInput!]

  """
  Ignored when variant ID is provided. This argument is deprecated: Use `weight` instead.
  """
  grams: Int

  """Ignored when variant ID is provided."""
  originalUnitPrice: Money

  """
  The number of products that were purchased.

  """
  quantity: Int!

  """Ignored when variant ID is provided."""
  requiresShipping: Boolean

  """Ignored when variant ID is provided."""
  sku: String

  """Ignored when variant ID is provided."""
  taxable: Boolean

  """Ignored when variant ID is provided."""
  title: String

  """
  The ID of the product variant corresponding to the line item.
  Null if custom line item. Required if product variant line item.

  """
  variantId: ID

  """
  Specifies the weight unit and value inputs.
  Ignored when variant ID or product ID are provided.

  """
  weight: WeightInput
}

"""The set of valid sort keys for the draftOrders query."""
enum DraftOrderSortKeys {
  """Sort by the `number` value."""
  NUMBER

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `status` value."""
  STATUS

  """Sort by the `total_price` value."""
  TOTAL_PRICE

  """Sort by the `customer_name` value."""
  CUSTOMER_NAME

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The valid statuses for a draft order."""
enum DraftOrderStatus {
  """The draft order has been paid."""
  COMPLETED

  """An invoice for the draft order has been sent to the customer."""
  INVOICE_SENT

  """
  The draft order is open. It has not been paid, and an invoice hasn't been sent.
  """
  OPEN
}

type DraftOrderUpdatePayload {
  """The updated draft order."""
  draftOrder: DraftOrder

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the fields for an email."""
input EmailInput {
  """Specifies the email subject."""
  subject: String

  """Specifies the email recipient."""
  to: String

  """Specifies the email sender."""
  from: String

  """Specifies the email body."""
  body: String

  """Specifies any bcc recipients for the email."""
  bcc: [String!]

  """Specifies a custom message to include in the email."""
  customMessage: String
}

"""
Events chronicle resource activities such as the creation of an article, the fulfillment of an order, or the
addition of a product.

"""
interface Event {
  """
  The name of the app that created the event. Returns null when the event originates from the Shopify admin.
  """
  appTitle: String

  """Whether the event was created by an app."""
  attributeToApp: Boolean!

  """Whether the event was caused by an admin user."""
  attributeToUser: Boolean!

  """The date and time when the event was created."""
  createdAt: DateTime!

  """Whether the event is critical."""
  criticalAlert: Boolean!

  """Globally unique identifier."""
  id: ID!

  """Human readable text that describes the event."""
  message: FormattedString!
}

type EventConnection {
  """A list of edges."""
  edges: [EventEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of EventEdge."""
  node: Event!
}

"""The set of valid sort keys for the events query."""
enum EventSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""
An exchanges represents the refund of one order for a checkout of a new order.
"""
type Exchange implements Node {
  """The amount of funds that must be transferred during the exchange."""
  balance: MoneyV2!

  """The checkout associated with the exchange."""
  checkout: ExchangeCheckout!

  """The order created as a result of the exchange."""
  childOrder: Order

  """Globally unique identifier."""
  id: ID!

  """The refund that will be created upon completing the exchange."""
  intendedRefund: IntendedExchangeRefund

  """The order which initiated the exchange."""
  parentOrder: Order!

  """The refund associated with the exchange."""
  refund: Refund

  """Staff member who processed the exchange."""
  staffMember: StaffMember!

  """Specifies the flow of the balance on the exchange."""
  type: ExchangeType!
}

type ExchangeAbortPayload {
  """The job to cancel the exchange checkout payments."""
  job: Job

  """List of errors that occurred aborting the exchange."""
  userErrors: [ExchangeError!]!
}

"""
An exchange checkout represents the checkout associated to an exchange.
"""
type ExchangeCheckout implements Node {
  """Customer of exchange."""
  customer: Customer

  """The discount amounts that have been applied to the checkout."""
  discountAllocations: [DiscountAllocation!]!

  """Discounts that have been applied on the checkout."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """Globally unique identifier."""
  id: ID!

  """Line items on the exchange checkout."""
  lineItems: [ExchangeCheckoutLineItem!]!

  """
  Whether or not the Checkout is ready and can be completed.
  Checkouts may have asynchronous operations that can take time to finish.
  If you want to complete a checkout or ensure all the fields are populated and up to date,
  polling is required until the value is true.

  """
  ready: Boolean!

  """Shipping address for the exchange checkout."""
  shippingAddress: MailingAddress

  """Shipping line for the exchange checkout."""
  shippingLine: ExchangeCheckoutShippingLine

  """Subtotal price for the exchange checkout."""
  subtotalPrice: MoneyV2!

  """Tax lines belonging to an exchange checkout."""
  taxLines: [ExchangeCheckoutTaxLine!]!

  """A unique identifier for the checkout."""
  token: String!

  """Total discounts for the exchange checkout."""
  totalDiscounts: MoneyV2!

  """Total line items price for the exchange checkout."""
  totalLineItemsPrice: MoneyV2!

  """Total price for the exchange checkout."""
  totalPrice: MoneyV2!

  """Total tax for the exchange checkout."""
  totalTax: MoneyV2!
}

"""Specifies the input fields for disabling an exchange checkout tax."""
input ExchangeCheckoutDisabledTaxInput {
  """The tax rate of the tax."""
  rate: Decimal!

  """The name of the tax."""
  title: String!
}

"""
An exchange checkout line item contains information about an item in the checkout.
"""
type ExchangeCheckoutLineItem {
  """The original selling price of the product, if applicable."""
  compareAtPrice: MoneyV2

  """List of additional information (metafields) about the line item."""
  customAttributes: [Attribute!]!

  """
  The discount amounts that have been applied to the line item by associated discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """The price multiplied by quantity, taking into account discounts."""
  discountedTotalPrice: MoneyV2!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  """
  fulfillmentService: FulfillmentService!

  """Indiciates if this line item is a gift card."""
  giftCard: Boolean!

  """Name of the product."""
  name: String!

  """The product price."""
  price: MoneyV2!

  """The number of products that were purchased."""
  quantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """Variant SKU number."""
  sku: String

  """Tax lines belonging to the line item."""
  taxLines: [ExchangeCheckoutTaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  """The price multiplied by quantity."""
  totalPrice: MoneyV2!

  """The product variant of the line item."""
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String
}

"""An input that represents a line item."""
input ExchangeCheckoutLineItemInput {
  """
  Extra information in the form of an array of Key-Value pairs about the line item.
  """
  customAttributes: [AttributeInput!]

  """Line item containing a gift card with a custom amount."""
  customGiftCard: CustomGiftCardLineItemInput

  """Tax lines to be disabled."""
  disabledTaxes: [ExchangeCheckoutDisabledTaxInput!]

  """Service provider who is fulfilling the line item."""
  fulfillmentService: String

  """Quantity of items on the line item."""
  quantity: Int!

  """Line item containing a quick sale."""
  quickSale: QuickSaleLineItemInput

  """Line item containing a product with variant."""
  variant: VariantLineItemInput

  """The manual discount applied to the line item."""
  manualDiscount: ExchangeDiscountInput

  """Whether or not the line item is taxable."""
  taxable: Boolean
}

"""The shipping line associated with an exchange checkout."""
type ExchangeCheckoutShippingLine {
  """Handle of the shipping line."""
  handle: String!

  """Price of the shipping line."""
  price: MoneyV2!

  """Title of the shipping line."""
  title: String!
}

"""Specifies the input fields for an exchange shipping line."""
input ExchangeCheckoutShippingLineInput {
  """Custom tax lines of the shipping line."""
  customTaxLines: [ExchangeCheckoutTaxLineInput!]

  """Price of the shipping line."""
  price: Decimal!

  """Title of the shipping line."""
  title: String!
}

"""A tax line on an exchange checkout."""
type ExchangeCheckoutTaxLine {
  """The amount of tax to be charged."""
  price: MoneyV2!

  """The tax rate to be applied."""
  rate: Decimal!

  """The name of the tax."""
  title: String!
}

"""Specifies the input fields for an exchange checkout tax line."""
input ExchangeCheckoutTaxLineInput {
  """The amount of tax to be charged."""
  price: Decimal!

  """The tax rate to be applied."""
  rate: Decimal!

  """The name of the tax."""
  title: String!
}

type ExchangeCompletePayload {
  """The exchange that was completed."""
  exchange: Exchange

  """List of errors that occurred completing the exchange."""
  userErrors: [ExchangeError!]!
}

type ExchangeCreateAndCompletePayload {
  """The exchange that was completed."""
  exchange: Exchange

  """List of errors that occurred completing the exchange."""
  userErrors: [ExchangeError!]!
}

type ExchangeCreatePayload {
  """The newly created exchange."""
  exchange: Exchange

  """List of errors that occurred creating the exchange."""
  userErrors: [ExchangeError!]!
}

"""An input that represents a discount."""
input ExchangeDiscountInput {
  """Description of the discount."""
  description: String!

  """The value of the discount."""
  value: Decimal!
}

"""Represents an error in the input of a mutation."""
type ExchangeError implements DisplayableError {
  """Error code to uniquely identify the error."""
  code: ExchangeErrorCode

  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""Possible error codes that could be returned by an exchange."""
enum ExchangeErrorCode {
  """ExchangeError where exchange related checkout is already completed."""
  EXCHANGE_CHECKOUT_ALREADY_COMPLETED

  """
  ExchangeError where exchange credit amount is greater than checkout price.
  """
  EXCHANGE_CREDIT_GREATER_THAN_CHECKOUT_PRICE

  """ExchangeError where exchange is not found."""
  EXCHANGE_NOT_FOUND

  """ExchangeError where exchange is not ready to be completed."""
  EXCHANGE_NOT_READY_TO_COMPLETE

  """
  ExchangeError where the parent order is locked and exchange cannot be completed.
  """
  EXCHANGE_PARENT_ORDER_IS_LOCKED

  """
  ExchangeError where an error occurs in checkout. Usually a catch-all error case.
  """
  CHECKOUT

  """ExchangeError where the checkout's billing address is blank."""
  CHECKOUT_BILLING_ADDRESS_BLANK

  """
  ExchangeError where an error occurs on the discount. Usually a catch-all error case.
  """
  CHECKOUT_DISCOUNT

  """ExchangeError where an error occurs on the checkout line item."""
  CHECKOUT_LINE_ITEM

  """
  ExchangeError where a checkout line item has an invalid specification (variant, number of items).
  """
  CHECKOUT_LINE_ITEM_INVALID_SPECIFICATION

  """
  ExchangeError where a checkout order contains both a discount code and a manual discount.
  """
  CHECKOUT_ORDER_CONTAINS_DISCOUNT_CODE_AND_MANUAL_DISCOUNT

  """ExchangeError where an error occurs on a refund line item."""
  REFUND_LINE_ITEM

  """ExchangeError where a refund line item is blank."""
  REFUND_LINE_ITEM_BLANK

  """
  ExchangeError where a refund line item being exchanged is not fulfilled.
  """
  REFUND_LINE_ITEM_NOT_FULFILLED

  """
  ExchangeError where the discount code on checkout is not applicable (does not meet conditions).
  """
  CHECKOUT_DISCOUNT_CODE_NOT_APPLICABLE

  """
  ExchangeError where an error occurs when refunding shipping. Usually a catch-all error case.
  """
  REFUND_SHIPPING

  """ExchangeError where the discount code on checkout is not found."""
  CHECKOUT_DISCOUNT_CODE_NOT_FOUND

  """ExchangeError when refund shipping amount is less than 0."""
  REFUND_SHIPPING_CANNOT_BE_NEGATIVE

  """ExchangeError where the discount code on checkout is depleted."""
  CHECKOUT_DISCOUNT_CODE_DEPLETED

  """ExchangeError where the refund is missing transactions."""
  REFUND_MISSING_TRANSACTIONS

  """ExchangeError where an error occurs with a refund transaction."""
  REFUND_TRANSACTION

  """
  ExchangeError when refund shipping amount is greater than remaining shipping.
  """
  REFUND_SHIPPING_MORE_THAN_REMAINING

  """ExchangeError where the refund transactions are nil."""
  REFUND_TRANSACTIONS_NIL

  """ExchangeError where an error occurs with the exchange credit payment."""
  PAYMENT_EXCHANGE_CREDIT

  """ExchangeError where the payment's unique token is not specified."""
  PAYMENT_UNIQUE_TOKEN_NOT_SPECIFIED

  """
  ExchangeError where an error occurs on the refund. Usually a catch-all error case.
  """
  REFUND

  """ExchangeError where the exchange receipt recipient is unreachable."""
  RECEIPT_RECIPIENT_UNREACHABLE

  """
  ExchangeError where the exchange receipt requires either an email or phone number.
  """
  RECEIPT_REQUIRES_EMAIL_OR_PHONE

  """ExchangeError where the receipt recipient's email address is invalid."""
  RECEIPT_RECIPIENT_INVALID_EMAIL_ADDRESS

  """ExchangeError where the receipt recipient's phone number is invalid."""
  RECEIPT_RECIPIENT_INVALID_PHONE_NUMBER

  """ExchangeError where exchange is already completed."""
  EXCHANGE_ALREADY_COMPLETED
}

"""Specifies the input fields for an exchange."""
input ExchangeInput {
  """Whether the child order is marked as fulfilled or not."""
  autoFulfill: Boolean = true

  """An input that represents a line item."""
  checkoutLineItems: [ExchangeCheckoutLineItemInput!]!

  """Customer to be associated with the new order."""
  customerId: ID

  """The ID of the point of sale device the exchange was performed on."""
  deviceId: ID

  """The discount code that is applied to the checkout."""
  discountCode: String

  """ID of the retail location where the exchange was performed."""
  locationId: ID

  """The manual discount applied to the checkout."""
  manualDiscount: ExchangeDiscountInput

  """An optional note attached to a refund."""
  note: String

  """An input that specifies line items on a refund."""
  refundLineItems: [RefundLineItemInput!]!

  """Shipping to be refunded."""
  refundShipping: ShippingRefundInput

  """Transactions to process as a refund."""
  refundTransactions: [OrderTransactionInput!]

  """
  Whether the refunded line items were added back to the store inventory. This
  argument is deprecated: refundLineItems.locationId and
  refundLineItems.restockType should be used instead.
  """
  restock: Boolean

  """
  Staff member that is processing the exchange. Only POS will respect this field input.
  """
  staffMemberId: ID

  """Shipping address to be associated with the new order."""
  shippingAddress: MailingAddressInput

  """Shipping line to be associated with the new order."""
  shippingLine: ExchangeCheckoutShippingLineInput

  """The ID of the transaction group that is used for the exchange."""
  transactionGroupId: ID

  """
  Client assigned identifier to be associated with an exchange's child order.
  """
  sourceIdentifier: String
}

type ExchangeReceiptSendPayload {
  """The exchange that the receipt was sent for."""
  exchange: Exchange

  """List of errors that occurred sending the receipt."""
  userErrors: [ExchangeError!]!
}

"""The recipient input for sending an exchange receipt."""
input ExchangeReceiptSendRecipientInput {
  """Email recipient of the exchange receipt."""
  email: String

  """SMS recipient of the exchange receipt."""
  phone: String
}

"""
The type of the exchange, in relation to the flow of the exchange balance.
"""
enum ExchangeType {
  """An exchange where the new purchase is equal in value to the refund."""
  LIKE_FOR_LIKE

  """
  An exchange where the new purchase is more that the value of the refund.
  """
  BALANCE_OWED_TO_MERCHANT

  """
  An exchange where the new purchase is less than the value of the refund.
  """
  BALANCE_OWED_TO_CUSTOMER
}

"""Field to expose experiments active on the shop."""
type Experiments {
  """Fields required for the Intercom experiment."""
  intercom: IntercomExperiment!
}

"""List of export formats available."""
enum ExportFormat {
  EXCEL_CSV
  PLAIN_CSV
}

"""Specifies the sorting order for the facts of an assessment."""
enum FactSortKeys {
  """
  Facts are sorted by sentiment according to the assessment result.
  For a low assessment they are sorted in ascending order of sentiment: positve, neutral, negative.
  For any other assessment they are sorted in descending order of sentiment negative, neutral, positive.

  """
  RESULT

  """The default value for the sort key returns the facts unsorted."""
  DEFAULT
}

"""Requirements that must be met before an app can be installed."""
type FailedRequirement {
  """
  Action to be taken to resolve a failed requirement, including URL link.
  """
  action: NavigationItem

  """
  A concise set of copy strings to be displayed to merchants, to guide them in resolving problems your app
  encounters when trying to make use of their Shop and its resources.

  """
  message: String!
}

"""A filter option is one possible value in a search filter."""
type FilterOption {
  """The filter option's label for display purposes."""
  label: String!

  """The filter option's value."""
  value: String!
}

type FlowTriggerReceivePayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
A string containing a strict subset of HTML code. Non-allowed tags will be stripped out.
Allowed tags:
* `a` (allowed attributes: `href`)
* `b`
* `br`
* `em`
* `i`
* `strong`
* `u`

"""
scalar FormattedString

"""The level of protection against fraudulent chargebacks."""
enum FraudProtectionLevel {
  FULLY_PROTECTED
  PARTIALLY_PROTECTED
  NOT_PROTECTED
  PENDING
  NOT_ELIGIBLE
  NOT_AVAILABLE
}

"""
Represents a fulfillment. In Shopify, a fulfillment represents a shipment of one
or more items in an order. When an order has been completely fulfilled, it means
that all the items that are included in the order have been sent to the
customer. There can be more than one fulfillment for an order.

"""
type Fulfillment implements LegacyInteroperability & Node {
  """The date and time when the fulfillment was created."""
  createdAt: DateTime!

  """The date that this fulfillment was delivered."""
  deliveredAt: DateTime

  """Human readable display status for this fulfillment."""
  displayStatus: FulfillmentDisplayStatus

  """The estimated date that this fulfillment will arrive."""
  estimatedDeliveryAt: DateTime

  """The history of events associated with this fulfillment."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: FulfillmentEventSortKeys = HAPPENED_AT
  ): FulfillmentEventConnection!

  """List of the fulfillment's line items."""
  fulfillmentLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): FulfillmentLineItemConnection!

  """Globally unique identifier."""
  id: ID!

  """The date and time when the fulfillment went into transit."""
  inTransitAt: DateTime

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The location that the fulfillment was processed at."""
  location: Location

  """Whether the merchant is permitted to cancel this fulfillment."""
  merchantCancellable: Boolean!

  """
  Whether the merchant is permitted to print packing slips for this fulfillment.
  """
  merchantPackingSlipPrintable: Boolean!

  """Human readable reference identifier for this fulfillment."""
  name: String!

  """Whether any of the line items in the fulfillment require shipping."""
  requiresShipping: Boolean!

  """Fulfillment service associated with the fulfillment."""
  service: FulfillmentService

  """The status of the fulfillment."""
  status: FulfillmentStatus!

  """Sum of all line item quantities for the fulfillment."""
  totalQuantity: Int!

  """
  Tracking information associated with the fulfillment,
  such as the tracking company, tracking number, and tracking URL.

  """
  trackingInfo(
    """Truncate the array result to this size."""
    first: Int
  ): [FulfillmentTrackingInfo!]!

  """
  The date and time when the fulfillment was last modified.

  """
  updatedAt: DateTime!
}

"""
The actions that can be taken to fulfill an unfulfilled line items by location.
"""
enum FulfillmentAction {
  """Create a fulfillment."""
  CREATE_FULFILLMENT

  """Purchase a shipping label."""
  PURCHASE_LABEL
}

type FulfillmentConnection {
  """A list of edges."""
  edges: [FulfillmentEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type FulfillmentCreatePayload {
  """The created fulfillment."""
  fulfillment: Fulfillment

  """The order for which the fulfillment is created."""
  order: Order

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The display status of a fulfillment."""
enum FulfillmentDisplayStatus {
  """Displayed as **Attempted delivery**."""
  ATTEMPTED_DELIVERY

  """Displayed as **Canceled**."""
  CANCELED

  """Displayed as **Confirmed**."""
  CONFIRMED

  """Displayed as **Delivered**."""
  DELIVERED

  """Displayed as **Failure**."""
  FAILURE

  """Displayed as **Fulfilled**."""
  FULFILLED

  """Displayed as **In transit**."""
  IN_TRANSIT

  """Displayed as **Label printed**."""
  LABEL_PRINTED

  """Displayed as **Label purchased**."""
  LABEL_PURCHASED

  """Displayed as **Label voided**."""
  LABEL_VOIDED

  """Displayed as **Marked as fulfilled**."""
  MARKED_AS_FULFILLED

  """Displayed as **Not delivered**."""
  NOT_DELIVERED

  """Displayed as **Out for delivery**."""
  OUT_FOR_DELIVERY

  """Displayed as **Ready for pickup**."""
  READY_FOR_PICKUP

  """Displayed as **Submitted**."""
  SUBMITTED
}

type FulfillmentEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEdge."""
  node: Fulfillment!
}

"""An event that describes a fulfillment at a time."""
type FulfillmentEvent implements Node {
  """The time at which this fulfillment event happened."""
  happenedAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """The status of this fulfillment event."""
  status: FulfillmentEventStatus!
}

type FulfillmentEventConnection {
  """A list of edges."""
  edges: [FulfillmentEventEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type FulfillmentEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentEventEdge."""
  node: FulfillmentEvent!
}

"""The set of valid sort keys for the events query."""
enum FulfillmentEventSortKeys {
  """Sort by the `happened_at` value."""
  HAPPENED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""Event status' describe the status of a fulfillment."""
enum FulfillmentEventStatus {
  """A shipping label has been purchased."""
  LABEL_PURCHASED

  """A purchased shipping label has been printed."""
  LABEL_PRINTED

  """The fulfillment is ready to be picked up."""
  READY_FOR_PICKUP

  """The fulfillment is confirmed."""
  CONFIRMED

  """The fulfillment is in transit."""
  IN_TRANSIT

  """The fulfillment is out for delivery."""
  OUT_FOR_DELIVERY

  """A delivery was attempted."""
  ATTEMPTED_DELIVERY

  """The fulfillment was successfully delivered."""
  DELIVERED

  """The fulfillment request failed."""
  FAILURE
}

"""The input fields used to create a fulfillment."""
input FulfillmentInput {
  """The ID of the order to be fulfilled."""
  orderId: ID!

  """The line items to be fulfilled."""
  lineItems: [FulfillmentLineItemInput!]

  """Tracking numbers associated with the fulfillment."""
  trackingNumbers: [String!]

  """The URLs to track the fulfillment."""
  trackingUrls: [String!]

  """The name of the tracking company."""
  trackingCompany: String

  """
  Whether the customer is notified.
  If set to true, a notification is sent when the fulfillment is created.

  """
  notifyCustomer: Boolean

  """A reference to the shipping method, such as `Free Shipping`."""
  shippingMethod: String

  """The ID of the location from which the items will be fulfilled."""
  locationId: ID
}

"""
Represents a line item from an order that's included in a fulfillment.
"""
type FulfillmentLineItem implements Node {
  """The total price after discounts are applied."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """Globally unique identifier."""
  id: ID!

  """The associated order's line item."""
  lineItem: LineItem!

  """The total price before discounts are applied."""
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  The total price before discounts are applied in shop and presentment currencies.
  """
  originalTotalSet: MoneyBag!

  """Number of line items in the fulfillment."""
  quantity: Int
}

type FulfillmentLineItemConnection {
  """A list of edges."""
  edges: [FulfillmentLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type FulfillmentLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of FulfillmentLineItemEdge."""
  node: FulfillmentLineItem!
}

"""
The input fields used to include a line item from an order in a fulfillment.
"""
input FulfillmentLineItemInput {
  """The ID of the line item."""
  id: ID!

  """The quantity of the line item to be fulfilled."""
  quantity: Int
}

"""
Represents a fulfillment service. A fulfillment service is a third-party service
that prepares and ships orders on behalf of the store owner.

"""
type FulfillmentService {
  """Human-readable unique identifier for this fulfillment service."""
  handle: String!

  """The ID of the fulfillment service."""
  id: ID!

  """
  Whether the fulfillment service tracks product inventory and provides updates to Shopify.
  """
  inventoryManagement: Boolean!

  """Location associated with the fulfillment service."""
  location: Location

  """Whether the fulfillment service supports local deliveries."""
  productBased: Boolean!

  """The name of the fulfillment service as seen by merchants."""
  serviceName: String!

  """Shipping methods associated with the fulfillment service provider."""
  shippingMethods: [ShippingMethod!]!

  """Type associated with the fulfillment service."""
  type: FulfillmentServiceType!
}

type FulfillmentServiceCreatePayload {
  """The created fulfillment service."""
  fulfillmentService: FulfillmentService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type FulfillmentServiceDeletePayload {
  """The ID of the deleted fulfillment service."""
  deletedId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The type of a fulfillment service."""
enum FulfillmentServiceType {
  """Fulfillment by gift card."""
  GIFT_CARD

  """Manual fulfillment by the merchant."""
  MANUAL

  """Fullfillment by a third-party fulfillment service."""
  THIRD_PARTY
}

type FulfillmentServiceUpdatePayload {
  """The updated fulfillment service."""
  fulfillmentService: FulfillmentService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The set of valid sort keys for the fulfillmentsV2 query."""
enum FulfillmentSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `estimated_delivery_at` value."""
  ESTIMATED_DELIVERY_AT

  """Sort by the `id` value."""
  ID

  """Sort by the `tracking_company` value."""
  TRACKING_COMPANY

  """Sort by the `order_number` value."""
  ORDER_NUMBER

  """Sort by the `shipment_status` value."""
  SHIPMENT_STATUS

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The status of a fulfillment."""
enum FulfillmentStatus {
  """
  Shopify has created the fulfillment and is waiting for the third-party
  fulfillment service to transition it to `open` or `success`.

  """
  PENDING

  """
  The third-party fulfillment service has acknowledged the fulfilment and is processing it.

  """
  OPEN

  """The fulfillment was completed successfully."""
  SUCCESS

  """The fulfillment was canceled."""
  CANCELLED

  """There was an error with the fulfillment request."""
  ERROR

  """The fulfillment request failed."""
  FAILURE
}

"""Represents the tracking information for a fulfillment."""
type FulfillmentTrackingInfo {
  """The name of the tracking company."""
  company: String

  """The tracking number of the fulfillment."""
  number: String

  """The URLs to track the fulfillment."""
  url: URL
}

type FulfillmentTrackingInfoUpdatePayload {
  """The updated fulfillment with tracking information."""
  fulfillment: Fulfillment

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
This type combines Google Ads coupon token and its expiry date.

"""
type GoogleAdsCoupon {
  """Expiry date for this coupon."""
  expiresAt: Date!

  """Coupon code to claim credit or discount for adwords."""
  token: String!
}

type GoogleAdsCouponClaimPayload {
  """Google Ads coupon to claim credit or discount."""
  coupon: GoogleAdsCoupon

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
This type combines Google Ads URL and Google Ads credit coupon.

"""
type GoogleAdsSettings {
  """Google Ads coupon to claim credit or discount."""
  coupon: GoogleAdsCoupon

  """Url to create Google Ads account."""
  url: URL!
}

"""
Represents information about the metafields associated to the specified resource.
"""
interface HasMetafields {
  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!
}

"""Card denoting an action to be performed by the merchant."""
type HomeActionCard implements HomeCard {
  """Short label describing the purpose of the card’s action."""
  actionLabel: String!

  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """String identifier for the Polaris icon to be used with the card."""
  iconKey: String!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Indicates if the card has been interacted with or not."""
  isRead: Boolean!

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""
Card containing a description and tabular information with actionable rows.
"""
type HomeActionListCard implements HomeCard {
  """A list of rows contained in the action list."""
  actionRows: [HomeActionRow!]!

  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Holds the contents of an individual row in an action list card."""
type HomeActionRow {
  """A button that launches the action associated with the row."""
  button: HomeButton!

  """
  A more detailed description of the row, typically containing the actual messaging to the merchant.
  """
  description: String!

  """An image displayed in the row."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """A label displayed on the row."""
  label: String!
}

"""Specifies which badge applies to the card."""
enum HomeBadge {
  BFCM
  HOLIDAYS
}

"""Card containing a link to a blog."""
type HomeBlogCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Estimate of how long it takes to read the blog content."""
  readTime: String

  """Reason why this card has been presented to the user."""
  reason: String!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""
Holds the contents of any card using the bookmark card layout view template.
"""
type HomeBookmarkCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """The url to bookmark."""
  bookmarkUrl: URL!

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Label and action data for the button."""
type HomeButton {
  """Action the button performs when clicked."""
  action: HomeCardAction!

  """Unique string identifier. Send to a mutation when card gets clicked."""
  id: String!

  """Display text for the button."""
  text: String!

  """URL the button opens on interaction."""
  url: URL!
}

"""
A summary of Shopify Capital information for this shop; this is a cached value, updated frequently.
"""
type HomeCapitalSummary {
  """Percentage progress on paying back the Capital advance."""
  balanceProgress: Int!

  """Balance remaining on a Shop's Capital advance."""
  balanceRemaining: MoneyV2!

  """Amount remaining to pay back the Capital advance."""
  paybackAmount: MoneyV2!
}

"""Base information for all card layouts."""
interface HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Describes all the actions a card's buttons can do."""
enum HomeCardAction {
  VISIT
  POST
  PATCH
  OPEN_SUPPORT_CHAT
  OPEN_INTERCOM_CHAT
  EMAIL
  TELEPHONE
  DISMISS
  SUBMIT_FEEDBACK
  SHARE
  DISCLOSURE
}

"""The button the user interacted with."""
input HomeCardClickInput {
  """Card ID for the user interaction."""
  id: ID!

  """Button ID for the user interaction."""
  buttonId: String
}

type HomeCardClickPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Display message and intent data for a card feedback item."""
type HomeCardFeedback {
  """Intent of the feedback item."""
  intent: HomeCardFeedbackIntent!

  """Key for the feedback item, invariant of locale."""
  key: String!

  """Display text for the feedback item."""
  message: String!
}

"""Feedback provided for a specific card."""
input HomeCardFeedbackInput {
  """The ID of the card for which feedback is provided."""
  id: ID!

  """Predefined message selected when sending feedback about the card."""
  feedback: String

  """User input for the card feedback."""
  comment: String
}

"""Specifies the intent of a card feedback."""
enum HomeCardFeedbackIntent {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

type HomeCardFeedbackPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Interaction type that was performed on a card."""
input HomeCardInteractionInput {
  """The ID of the card for the interaction."""
  id: ID!

  """Specific type of interaction that was made on the card."""
  action: MutationsHomeCardInteractionAction!

  """The ID of the button clicked."""
  buttonId: String
}

type HomeCardInteractionPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Supported card layouts."""
enum HomeCardLayout {
  SIMPLE
  ANNOUNCEMENT
  ACHIEVEMENT @deprecated(reason: "achievement layout is no longer supported")
  CONTENT @deprecated(reason: "content layout is no longer supported")
  LINE_GRAPH
  TABLE
  STACKABLE_TABLE
  QUESTION_SCALE
  QUESTION_DROPDOWN
  COUNTDOWN @deprecated(reason: "countdown layout is no longer supported")
  VIDEO
  ACTION_LIST
  FEATURED_ANNOUNCEMENT
  COMPARISON
  BOOKMARK_CARD
  BLOG
  PROGRESS
  GOAL_INTRO
  ACTION
  GOAL_PROGRESS
  GOAL_TRACKING
  GOAL_COMPLETE
  BFCM_COUNTDOWN
}

"""Input fields for the HomeCardView mutation."""
input HomeCardViewInput {
  """ID of the viewed card."""
  id: ID!

  """
  Array index of where the card appears in the feed, based on the cards query response.
  """
  position: Int!
}

type HomeCardViewPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type HomeCardVoteFeedbackPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Holds the contents of any card using the comparison layout view template.
"""
type HomeComparisonCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Feedback information on the industry classification."""
  industryFeedback: HomeComparisonCardIndustryFeedback

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """A list of metrics contained in the comparison card."""
  metrics: [HomeComparisonMetric!]!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Information required to present the industry feedback form."""
type HomeComparisonCardIndustryFeedback {
  """Label for the button to display feedback information."""
  buttonTitle: String!

  """Byline text of the feedback form."""
  byline: FormattedString

  """The current industry the store is classified as."""
  currentIndustry: String!

  """Placeholder text for custom input."""
  inputPlaceholder: String!

  """Message text of the feedback form."""
  message: FormattedString

  """A complete list of industries."""
  options: [String!]! @deprecated(reason: "Use `suggestions` instead")

  """Label for the submission button."""
  submitTitle: String!

  """Message text for submitted feedback."""
  submittedMessage: FormattedString!

  """A list of suggested industries for guiding user input."""
  suggestions: [String!]!

  """Title for the feedback form."""
  title: FormattedString!

  """
  A list of industries the user can select from when sending feedback about the Industry.
  """
  topOptions: [String!]!

  """A list indicating which of the `topOptions` are pre-selected."""
  topOptionsSelected: [Boolean!]!
}

"""A metric used for comparison to another value."""
type HomeComparisonMetric {
  """Additional description of the value."""
  hint: String

  """Type of value the metric is. Can be used to style the value."""
  metricType: HomeMetricType!

  """Description of the value."""
  title: String!

  """Value used in comparison."""
  value: Float!
}

"""
Card containing an image and a link to useful content like an article or blog.
"""
type HomeContentCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """
  The humanized category for the card content (Facebook marketing, web design, copywriting).
  """
  category: String!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!

  """The URL location of the content."""
  url: URL!
}

"""Specifies which file type a requested image should have."""
enum HomeContentType {
  SVG
  PNG
}

"""Card containing a description and a countdown timer."""
type HomeCountdownCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """When the countdown will finish."""
  endDate: DateTime!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Message to display after the countdown finishes."""
  postCountdownMessage: String!

  """Title to display after the countdown finishes."""
  postCountdownTitle: String!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""
Additional information for the list of Home Cards. Can be used to present a
header above the feed and pull featured cards into that header.
"""
type HomeFeedTheme {
  """
  A timestamp to help displaying a countdown. If null then no countdown should be displayed.
  """
  countdownEndsAt: DateTime

  """
  Text for a button to allow a user to opt out of the tag of the theme. If null then no button should be displayed.
  """
  dismissButtonMessage: String

  """A message displayed after the user dismisses the tag of the theme."""
  dismissMessage: String

  """
  A title displayed above the dismiss message after the user dismisses the tag of the theme.
  """
  dismissTitle: String

  """Message to display when there are no cards in the spotlight section."""
  emptyStateMessage: String!

  """
  A label displayed above a text area for the user to provide free text feedback.
  """
  feedbackMessage: String

  """More detailed information about the feed theme."""
  message: FormattedString!

  """Additional tab used with theme in metrics section."""
  occasionTab: HomeFeedThemeTab

  """Heading for rest of feed section."""
  restOfFeedHeading: HomeFeedThemeSectionHeading!

  """Heading for spotlight section."""
  spotlightHeading: HomeFeedThemeSectionHeading!

  """
  The tag name this theme is associated with. Use as argument for HomeTagInteraction.
  """
  tagName: String!

  """Text for the header of the feed theme."""
  title: FormattedString!
}

"""Header and byline combination to be shown above a part of the feed."""
type HomeFeedThemeSectionHeading {
  """
  A message to be paired with header appearing above a part of the feed.
  """
  byline: FormattedString!

  """A header displayed above a part of the feed."""
  header: FormattedString!
}

"""Parameters to be used in additional tabs in the metrics section."""
type HomeFeedThemeTab {
  """DateTime until which the metrics should be queried."""
  endTime: DateTime!

  """DateTime since which the metrics should be queried."""
  startTime: DateTime!

  """Title used for the tab."""
  title: String!
}

"""Breakdown stats for the tracking stage of a goal."""
type HomeGoalBreakdown {
  """List of breakdown rows."""
  rows: [HomeGoalBreakdownRow!]!

  """Title for the breakdown set."""
  title: String!
}

"""A single row of `HomeGoalBreakdown`."""
type HomeGoalBreakdownRow {
  """Description for the breakdown row."""
  description: String!

  """Icon for the breakdown row."""
  icon(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image!
}

"""Card for the final stage of a goal."""
type HomeGoalCompleteCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Short call-out text."""
  callout: String

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """Additional information about the status of the goal."""
  description: FormattedString!

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """The name of the goal the card is referencing."""
  goalName: String!

  """Indicates the final status of the goal."""
  goalStatus: HomeGoalCompleteCardGoalStatus!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Comparison metrics between the before and after state of the goal."""
  metrics: HomeGoalMetrics!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """List of tactics associated with the goal of the card."""
  tactics: [HomeTactic!]!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Indicates the final status of a goal."""
enum HomeGoalCompleteCardGoalStatus {
  """Indicates that the target of the goal was achieved."""
  POSITIVE

  """Indicates that the target of the goal was not achieved."""
  NEGATIVE

  """
  Indicates that it cannot be determined with statistical significance if the goal was achieved.
  """
  NEUTRAL
}

"""Card for the introductory stage of a goal."""
type HomeGoalIntroCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """The name of the goal the card is introducing."""
  goalName: String!

  """String identifier for the Polaris icon to be used with the card."""
  iconKey: String!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """List of tactics associated with the goal of the card."""
  tactics: [HomeTactic!]!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Encapsulation of a set of metrics being compared to each other."""
type HomeGoalMetrics {
  """The metric representing the after state."""
  after: HomeGoalMetricsItem!

  """The metric representing the before state."""
  before: HomeGoalMetricsItem!

  """Message to display when data isn’t available."""
  emptyStateMessage: String!

  """Name for the metrics section."""
  title: String!
}

"""A single metric with its related context."""
type HomeGoalMetricsItem {
  """The label for this element of the metric."""
  label: String!

  """The tooltip for this element of the metric."""
  tooltip: HomeGoalMetricsItemTooltip

  """The value for this element of the metric."""
  value: String
}

"""The tooltip used for `HomeGoalMetricsItem` values."""
type HomeGoalMetricsItemTooltip {
  """The date range the value was calculated for."""
  dateRange: String!

  """List of elements in this tooltip."""
  elements: [HomeGoalMetricsItemTooltipElement!]!
}

"""An element in the tooltip."""
type HomeGoalMetricsItemTooltipElement {
  """Description for this element."""
  description: String!

  """Icon for the element."""
  icon: Image!

  """Key for the Polaris icon for this element."""
  iconKey: String!
}

"""Card for the progress stage of a goal."""
type HomeGoalProgressCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """The name of the goal the card is introducing."""
  goalName: String!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Comparison metrics between the before and after state of the goal."""
  metrics: HomeGoalMetrics!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """List of tactics associated with the goal of the card."""
  tactics: [HomeTactic!]!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Card for the tracking stage of a goal."""
type HomeGoalTrackingCard implements HomeCard {
  """Affirmation for merchants when they are on track to meet the goal."""
  affirmation: HomeGoalTrackingCardAffirmation

  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """Breakdown statistics for the goal."""
  breakdown: HomeGoalBreakdown!

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """The name of the goal the card is introducing."""
  goalName: String!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Comparison metrics between the before and after state of the goal."""
  metrics: HomeGoalMetrics!

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """List of tactics associated with the goal of the card."""
  tactics: [HomeTactic!]!

  """Text for the header of the card."""
  title: FormattedString!
}

"""An affirmative message for merchants on track to meet their goal."""
type HomeGoalTrackingCardAffirmation {
  """Icon to go along with the message."""
  icon(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image!

  """Short affirmative message."""
  message: String!
}

"""Personalized greeting message for the merchant."""
type HomeGreeting {
  """Personalized message for the greeting."""
  body: String!

  """Personalized title for the greeting."""
  heading: String!
}

"""Supported image types."""
enum HomeImageType {
  DEFAULT
  PRODUCT
  CUSTOMER
}

"""Feedback provided for an industry classification."""
input HomeIndustryFeedbackInput {
  """
  Items the user accepted when submitting industry classification feedback.
  """
  accepted: [String!]!

  """
  Items the user rejected when submitting industry classification feedback.
  """
  rejected: [String!]!

  """User input provided when submitting industry classification feedback."""
  other: String
}

type HomeIndustryFeedbackPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The action to perform on a industry interaction."""
enum HomeIndustryInteractionAction {
  DISMISS
  UNDO_DISMISS
}

"""Interaction type that was performed on an Industry classification."""
input HomeIndustryInteractionInput {
  """The action that was taken on a specific industry classification."""
  action: HomeIndustryInteractionAction!

  """The name of the industry the action should be performed on."""
  industry: String!
}

type HomeIndustryInteractionPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The set of valid drill directions."""
enum HomeItemDrillDirection {
  UP
  DOWN
}

"""Drill type that was performed on a card."""
input HomeItemDrillInput {
  """The ID of the target item for the drill."""
  id: ID!

  """Specific direction of the target item for the drill."""
  direction: HomeItemDrillDirection!
}

type HomeItemDrillPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Card with data to plot a multi-series line graph."""
type HomeLineGraphCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """Information for each data point to display on a line graph."""
  lineGraphData: [HomeLineGraphData!]!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""All required data to display a single series in a line graph."""
type HomeLineGraphData {
  """Color identifier of the line. For example, primary_color."""
  color: String!

  """X values representing the line."""
  data: [Int!]!

  """Style modifier of the line. For example, solid."""
  lineStyle: String!

  """Line label text for graph’s legend."""
  title: String!

  """Whether to display labels for the graph on the x-axis."""
  useEndLabels: Boolean! @deprecated(reason: "End labels are no longer part of the new graph designs.")
}

"""
Specifies the type of value the metric is. Used for styling the value.
"""
enum HomeMetricType {
  PRIMARY
  SECONDARY
  POSITIVE
  NEGATIVE
}

"""Home item to display a notification."""
type HomeNotification {
  """A single interactable button for the notification."""
  button: HomeButton!

  """Message being displayed after dismissing the notification."""
  dismissMessage: FormattedString

  """Indicates if the notification can be dismissed or not."""
  dismissible: Boolean!

  """Unique identifier for use in analytics."""
  handle: String! @deprecated(reason: "Use `id` instead")

  """Unique identifier for use in analytics."""
  id: ID!

  """A more detailed description of the notification."""
  message: FormattedString

  """Indicates severity of the notification for styling and grouping."""
  severity: HomeNotificationSeverity!

  """Text for the header of the notification."""
  title: FormattedString!
}

type HomeNotificationDismissPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Indicates notification severity level, from low severity events such as missing
bank information to high severity events such as a chargeback.
"""
enum HomeNotificationSeverity {
  TRIAL
  ALERT
  WARNING
  POSITIVE @deprecated(reason: "positive is no longer in use, you may remove support for it")
  INFO @deprecated(reason: "info is no longer supported, use warning instead")
}

"""Container for the onboarding tasks."""
type HomeOnboarding {
  """
  A list of predefined messages the user can select from when sending feedback about the container.
  """
  feedbackOptions: [String!]!

  """Heading for the onboarding container."""
  heading: FormattedString!

  """The tag name the onboarding container is associated with."""
  tagName: String!

  """List of onboarding tasks for the shop."""
  tasks: [HomeOnboardingTask!]!
}

"""Task to be completed by new merchants during their onboarding period."""
type HomeOnboardingTask {
  """List of buttons for the task."""
  buttons: [HomeButton!]!

  """Status of the tasks completion."""
  completed: Boolean!

  """String identifier for the Polaris icon to be used with the task."""
  iconKey: String!

  """Image representing the task."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image!

  """Short hand representation of the task title."""
  label: String!

  """Description of what the task is supposed to do."""
  message: FormattedString!

  """Title for this task."""
  title: FormattedString!
}

"""Card showing progress towards a target."""
type HomeProgressCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """The value `currentValue` is being compared to."""
  comparisonValue: Int!

  """The label for the `comparisonValue` metric."""
  comparisonValueLabel: String!

  """
  Current point of progress towards target. Cannot be more than the `targetValue`.
  """
  currentValue: Int!

  """The label for the `currentValue` metric."""
  currentValueLabel: String!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """Details about the target being tracked."""
  description: String!

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """The value needed to meet the target."""
  targetValue: Int!

  """The label for the `targetValue` metric."""
  targetValueLabel: String! @deprecated(reason: "The `targetValue` metric no longer has an associated label. Please look at `comparisonValueLabel` instead. This field will return the same value as `comparisonValueLabel`.")

  """Text for the header of the card."""
  title: FormattedString!
}

"""A quantitative choice a user could make on a question."""
type HomeQuestionAnswerChoice {
  """
  Text label for an answer value. For example, "Poor" where "Poor" has a value of 1 and "Excellent" has a value of 5.
  """
  label: String!

  """Value to associate with the answer. For example, "1" or "5"."""
  value: String!
}

"""
Card containing a quantitative multiple choice question and an optional qualitative text input.
"""
type HomeQuestionCard implements HomeCard {
  """List of answers for the user to choose from."""
  answers: [HomeQuestionAnswerChoice!]!

  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Label to prompt the optional text input for the question."""
  commentInputLabel: String

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""An input composed of a quantitative answer and an optional comment."""
input HomeQuestionCardAnswerInput {
  """ID of the card for which an answer is provided."""
  id: ID!

  """Selected answer to the question card."""
  answer: String!

  """User inputted answer to the question card."""
  comments: String
}

type HomeQuestionCardAnswerPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""A card with text, image, and one or more buttons."""
type HomeSimpleCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Card containing a description and multiple rows of tabular data."""
type HomeTableCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """Headings for each column of the table."""
  headings: [String!]!

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """List of rows and values to display in the table body."""
  tableRows: [HomeTableRow!]!

  """Text for the header of the card."""
  title: FormattedString!
}

"""Single row of data in a HomeTableCard."""
type HomeTableRow {
  """A thumbnail image to show at the start of the row."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """A URL to open when the row has been clicked."""
  url: URL

  """
  The list of values for each cell. Defines as many cell values as there are headings in the HomeTableCard element.
  """
  values: [String!]!
}

"""Group of related suggestions for achieving a goal."""
type HomeTactic {
  """List of actions in this tactic."""
  actions: [HomeActionCard!]!

  """Short description of the tactic."""
  byline: String

  """Icon for the tactic."""
  icon: Image!

  """String identifier for the Polaris icon for the tactic."""
  iconKey: String!

  """The ID for the tactic."""
  id: ID!

  """Title for the tactic."""
  title: String!
}

type HomeTagFeedbackPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type HomeTagInteractionPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
A HomeTask represents an actionable task for the merchant to complete.
"""
type HomeTask {
  """A badge which contains a title and status type."""
  badge: HomeTaskBadge

  """Unique name used for analytics and identifying the task."""
  handle: String!

  """Image of the tasks icon."""
  icon(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image!

  """The ID of the task. A unique identifier used for analytics."""
  id: ID!

  """Title text for the task."""
  title: FormattedString!

  """URL to the location of the actionable task."""
  url: URL!
}

"""A badge which contains a title and status type."""
type HomeTaskBadge {
  """The status type of the badge."""
  status: HomeTaskBadgeStatus!

  """Title for the badge."""
  title: String!
}

"""The status type for the HomeTaskBadge."""
enum HomeTaskBadgeStatus {
  INFO
  WARNING
  SUCCESS
  ATTENTION
}

"""Card containing a video and description."""
type HomeVideoCard implements HomeCard {
  """Specifies which badge applies to the card."""
  badge: HomeBadge

  """A list of buttons displayed on the card."""
  buttons: [HomeButton!]!

  """Specifies a time window that the contents of the card applies to."""
  dateRange: FormattedString

  """A message displayed when the user dismisses the card."""
  dismissMessage: String!

  """A title displayed when the user dismisses the card."""
  dismissTitle: String!

  """
  Specifies if this card should be considered to be featured inside of the feed theme header.
  """
  featured: Boolean!

  """
  A list of predefined messages and intents the user can select from when
  sending feedback about the card. Intent can be used to pre-filter feedback
  messages by their tone.
  """
  feedback: [HomeCardFeedback!]!

  """
  A list of predefined messages the user can select from when sending feedback about the card.
  """
  feedbackOptions: [String!]! @deprecated(reason: "Use `feedback` instead")

  """ID of the card."""
  id: ID!

  """An image displayed on the card."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """Converts image file type from SVG to PNG, or leaves as original SVG."""
    contentType: HomeContentType = PNG
  ): Image

  """
  Semantic type of a Home Card image. These can be used to treat images differently in the UI.
  """
  imageType: HomeImageType

  """Specifies a view template to use when rendering the card."""
  layout: HomeCardLayout!

  """
  A more detailed description of the card, typically containing the actual messaging to the merchant.
  """
  message: FormattedString

  """Specifies if this card can be voted on."""
  showVote: Boolean!

  """
  Specifies if this card can be pulled up into a priority container on top of the feed.
  """
  spotlight: Boolean!

  """Text for the header of the card."""
  title: FormattedString!

  """The YouTube URL of the video."""
  video: URL!
}

"""A string containing HTML code."""
scalar HTML

"""Represents an image resource."""
type Image {
  """A word or phrase to share the nature or contents of an image."""
  altText: String

  """A unique identifier for the image."""
  id: ID

  """The location of the original (untransformed) image as a URL."""
  originalSrc: URL!

  """The location of the image as a URL."""
  src: URL! @deprecated(reason: "Previously an image had a single `src` field. This could either return the original image\nlocation or a URL that contained transformations such as sizing or scale.\n\nThese transformations were specified by arguments on the parent field.\n\nNow an image has two distinct URL fields: `originalSrc` and `transformedSrc`.\n\n* `originalSrc` - the original, untransformed image URL\n* `transformedSrc` - the image URL with transformations included\n\nTo migrate to the new fields, image transformations should be moved from the parent field to `transformedSrc`.\n\nBefore:\n```graphql\n{\n  shop {\n    productImages(maxWidth: 200, scale: 2) {\n      edges {\n        node {\n          src\n        }\n      }\n    }\n  }\n}\n```\n\nAfter:\n```graphql\n{\n  shop {\n    productImages {\n      edges {\n        node {\n          transformedSrc(maxWidth: 200, scale: 2)\n        }\n      }\n    }\n  }\n}\n```\n")

  """
  The location of the transformed image as a URL.

  All transformation arguments are considered "best-effort". If they can be applied to an image, they will be.
  Otherwise any transformations which an image type does not support will be ignored.

  """
  transformedSrc(
    """Image width in pixels between 1 and 5760."""
    maxWidth: Int

    """Image height in pixels between 1 and 5760."""
    maxHeight: Int

    """Crops the image according to the specified region."""
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1 and 3.
    """
    scale: Int = 1

    """
    Best effort conversion of image into content type (SVG -> PNG, Anything -> JGP, Anything -> WEBP are supported).
    """
    preferredContentType: ImageContentType
  ): URL!
}

type ImageConnection {
  """A list of edges."""
  edges: [ImageEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""List of supported image content types."""
enum ImageContentType {
  PNG
  JPG
  WEBP
}

type ImageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ImageEdge."""
  node: Image!
}

"""Specifies the input fields for an image."""
input ImageInput {
  id: ID
  altText: String

  """The URL of the image. May be a signed upload URL."""
  src: String
}

"""Upload parameter of an image."""
type ImageUploadParameter {
  """Parameter name."""
  name: String!

  """Parameter value."""
  value: String!
}

"""Label and URL for an action."""
type InsightAction {
  """ID of this action."""
  id: ID!

  """The text associated with the action."""
  text: String!

  """A type that describes how to take this action."""
  type: InsightActionType!

  """The URL to visit."""
  url: URL!
}

"""A type of Action."""
enum InsightActionType {
  """Visit a web location."""
  VISIT
}

"""The period in which the shop insights were gathered."""
type InsightDateRange {
  """End date of insight gathering period."""
  endDate: DateTime!

  """Start date of insight gathering period."""
  startDate: DateTime!
}

"""A group of insights for a range of time."""
interface InsightGroup {
  """The period in which the shop insights were gathered."""
  insightDateRange: InsightDateRange!
}

"""Insight aggregation period."""
enum InsightPeriod {
  """The latest 7 day period."""
  SEVEN_DAYS

  """The latest 30 day period."""
  THIRTY_DAYS
}

"""Metrics and product information for an individual product."""
interface InsightProductInfoMetric {
  """A product."""
  product: Product!
}

"""Insights for this shop."""
type Insights {
  """Product performance insights for this shop."""
  productInsights(
    """The aggregation period for this insight."""
    period: InsightPeriod!
  ): ProductInsights
}

"""An interaction source."""
enum InsightsInteractionSource {
  """The index page showing the insight overview."""
  OVERVIEW

  """The details page showing all insight elements."""
  VIEW_ALL
}

"""An item that has suggestions."""
interface InsightSuggestible {
  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""A suggestion."""
type InsightSuggestion {
  """Actions associated with this suggestion."""
  actions: [InsightAction!]!

  """Long-form content."""
  content: FormattedString!

  """A Polaris icon key."""
  iconKey: String!

  """ID of this suggestion."""
  id: ID!

  """Suggestion title."""
  title: FormattedString!
}

"""A refund that will be created upon completing an exchange."""
type IntendedExchangeRefund {
  """Amount for the exchange refund."""
  amount: MoneyV2!

  """Note associated with the exchange refund."""
  note: String

  """Refund line times for the exchange refund."""
  refundLineItems: [RefundLineItem!]!

  """Shipping refund amount for the exchange refund."""
  shipping: ShippingRefund!

  """Subtotal for the exchange refund."""
  subtotal: MoneyV2!

  """Total taxes for the exchange refund."""
  totalTaxes: MoneyV2!
}

"""Fields for Intercom experiment."""
type IntercomExperiment {
  """If the Intercom experiment is enabled for the shop."""
  enabled: Boolean!
}

type InventoryActivatePayload {
  """The newly activated inventory level."""
  inventoryLevel: InventoryLevel

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the items and their adjustments."""
input InventoryAdjustItemInput {
  """ID of the inventory item to adjust."""
  inventoryItemId: ID!

  """Count by which to adjust the available quantity."""
  availableDelta: Int!
}

"""Specifies the fields required to adjust the inventory quantity."""
input InventoryAdjustQuantityInput {
  """ID of the inventory level to adjust."""
  inventoryLevelId: ID!

  """Count by which to adjust the available quantity."""
  availableDelta: Int!
}

type InventoryAdjustQuantityPayload {
  """
  Represents the updated inventory quantity of an inventory item at a specific location.
  """
  inventoryLevel: InventoryLevel

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type InventoryBulkAdjustQuantityAtLocationPayload {
  """The updated inventory quantities."""
  inventoryLevels: [InventoryLevel!]

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type InventoryDeactivatePayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents the goods available to be shipped to a customer.
It holds essential information about the goods, including SKU and whether it is tracked.

"""
type InventoryItem implements Node & LegacyInteroperability {
  """The date and time when the inventory item was created."""
  createdAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """URL for inventory history web page."""
  inventoryHistoryUrl: URL

  """Get the inventory level at a specific location."""
  inventoryLevel(
    """ID of the location for which the inventory level is requested."""
    locationId: ID!
  ): InventoryLevel

  """
  Paginated list of inventory levels for each location that the inventory item is stocked at.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `inventory_item_id`
     - `inventory_group_id`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): InventoryLevelConnection!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The number of locations where this inventory item is stocked."""
  locationsCount: Int!

  """Whether the item requires shipping or not."""
  requiresShipping: Boolean!

  """Inventory item SKU."""
  sku: String

  """
  Whether the inventory quantities of inventory levels for the item are tracked or not.
  """
  tracked: Boolean!

  """The date and time when the inventory item was updated."""
  updatedAt: DateTime!

  """The variant that owns this inventory item."""
  variant: ProductVariant!
}

type InventoryItemConnection {
  """A list of edges."""
  edges: [InventoryItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type InventoryItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryItemEdge."""
  node: InventoryItem!
}

"""
Represents the inventory quantity of an inventory item at a specific location.

"""
type InventoryLevel implements Node {
  """Quantity of items available at the location."""
  available: Int!

  """Whether inventoryDeactivate is allowed for this inventory level."""
  canDeactivate: Boolean!

  """The date and time when the inventory level was created."""
  createdAt: DateTime!

  """
  Reason why canDeactivate is false, or impact of deactivating the inventory level.
  """
  deactivationAlert: String

  """Globally unique identifier."""
  id: ID!

  """Quantity of items incoming to the location."""
  incoming: Int!

  """Inventory item associated with the inventory level."""
  item: InventoryItem!

  """Location associated with the inventory level."""
  location: Location!

  """The date and time when the inventory level was updated."""
  updatedAt: DateTime!
}

type InventoryLevelConnection {
  """A list of edges."""
  edges: [InventoryLevelEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type InventoryLevelEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of InventoryLevelEdge."""
  node: InventoryLevel!
}

"""Inventory quantity at a specific location."""
input InventoryLevelInput {
  """Sets the quantity available at the location."""
  availableQuantity: Int!

  """ID of the location."""
  locationId: ID!
}

"""
A job corresponds to some long running task that the client should poll for status.
"""
type Job {
  """This indicates if the job is still queued or has been run."""
  done: Boolean!
  id: ID!

  """
  This field will only resolve once the job is done. Can be used to ask for object(s) that have been changed by the job.
  """
  query: QueryRoot
}

"""A JSON Object."""
scalar JSON

"""
Interoperability metadata for types which directly correspond to a REST Admin API resource.

"""
interface LegacyInteroperability {
  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!
}

"""Units of measurement for length."""
enum LengthUnit {
  """1000 millimeters equals 1 meter."""
  MILLIMETERS

  """100 centimeters equals 1 meter."""
  CENTIMETERS

  """Metric system unit of length."""
  METERS

  """12 inches equals 1 foot."""
  INCHES

  """Imperial system unit of length."""
  FEET

  """1 yard equals 3 feet."""
  YARDS
}

"""
The total number of pending orders on a shop if less then a maximum, or that maximum.
The atMax field indicates when this maximum has been reached.

"""
type LimitedPendingOrderCount {
  """
  This is set when the number of pending orders has reached the maximum.
  """
  atMax: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.

  """
  count: Int!
}

"""Represents a single line in a shopping cart."""
type LineItem implements Node {
  """
  Whether the line item's variant has an ID and inventory is managed by Shopify.
  """
  canRestock: Boolean! @deprecated(reason: "Use `restockable` instead")

  """List of additional information (metafields) about the line item."""
  customAttributes: [Attribute!]!

  """
  The discounts that have been allocated onto the line item by discount applications.
  """
  discountAllocations: [DiscountAllocation!]!

  """The total line price after discounts are applied."""
  discountedTotal: Money! @deprecated(reason: "Use `discountedTotalSet` instead")

  """
  The total line price after discounts are applied in shop and presentment currencies.
  """
  discountedTotalSet: MoneyBag!

  """The price of a single variant unit after discounts are applied."""
  discountedUnitPrice: Money! @deprecated(reason: "Use `discountedUnitPriceSet` instead")

  """
  The price of a single variant unit after discounts are applied in shop and presentment currencies.
  """
  discountedUnitPriceSet: MoneyBag!

  """The total number of units to fulfill."""
  fulfillableQuantity: Int!

  """
  Name of the service provider who fulfilled the order.

  Valid values are either **manual** or the name of the provider.
  For example, **amazon**, **shipwire**.

  """
  fulfillmentService: FulfillmentService!

  """
  The line item's fulfillment status. Returns 'fulfilled' if fulfillableQuantity >= quantity,
  'partial' if  fulfillableQuantity > 0, and 'unfulfilled' otherwise.

  """
  fulfillmentStatus: String!

  """Globally unique identifier."""
  id: ID!

  """The Image object associated to the line item's variant."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """Name of the product."""
  name: String!

  """A count of the number of line items that cannot be fulfilled."""
  nonFulfillableQuantity: Int!

  """
  Total price (without discounts) of the line item, based on the original unit price of the variant x quantity.

  """
  originalTotal: Money! @deprecated(reason: "Use `originalTotalSet` instead")

  """
  Total price (without discounts) of the line item, based on the original unit
  price of the  variant x quantity in shop and presentment currencies.
  """
  originalTotalSet: MoneyBag!

  """Variant price without any discounts applied."""
  originalUnitPrice: Money! @deprecated(reason: "Use `originalUnitPriceSet` instead")

  """
  Variant price without any discounts applied in shop and presentment currencies.
  """
  originalUnitPriceSet: MoneyBag!

  """The Product object associated with this line item's variant."""
  product: Product

  """Number of variant items ordered."""
  quantity: Int!

  """The line item's quantity minus its refundedQuantity."""
  refundableQuantity: Int!

  """Whether physical shipping is required for the variant."""
  requiresShipping: Boolean!

  """
  Whether the line item's variant has an ID and inventory is managed by Shopify.
  """
  restockable: Boolean!

  """Variant SKU number."""
  sku: String

  """The TaxLine object connected to this line item."""
  taxLines(
    """Truncate the array result to this size."""
    first: Int
  ): [TaxLine!]!

  """Whether the variant is taxable."""
  taxable: Boolean!

  """
  Title of the product or variant (this field only applies to custom line items).
  """
  title: String!

  """The sum of all AppliedDiscounts on this line item."""
  totalDiscount: Money! @deprecated(reason: "Use `totalDiscountSet` instead")

  """
  The sum of all AppliedDiscounts on this line item in shop and presentment currencies.
  """
  totalDiscountSet: MoneyBag!

  """The total discounted value of unfulfilled units."""
  unfulfilledDiscountedTotal: Money! @deprecated(reason: "Use `unfulfilledDiscountedTotalSet` instead")

  """
  The total discounted value of unfulfilled units in shop and presentment currencies.
  """
  unfulfilledDiscountedTotalSet: MoneyBag!

  """The total value before discount of all unfulfilled units."""
  unfulfilledOriginalTotal: Money! @deprecated(reason: "Use `unfulfilledOriginalTotalSet` instead")

  """
  The total value before discount of all unfulfilled units in shop and presentment currencies.
  """
  unfulfilledOriginalTotalSet: MoneyBag!

  """The number of units not yet fulfilled."""
  unfulfilledQuantity: Int!

  """The Variant object associated with this line item."""
  variant: ProductVariant

  """Name of the variant."""
  variantTitle: String

  """Name of the vendor who made the variant."""
  vendor: String
}

type LineItemConnection {
  """A list of edges."""
  edges: [LineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type LineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LineItemEdge."""
  node: LineItem!
}

"""A link to direct users to."""
type Link {
  """A context-sensitive label for the link."""
  label: String!

  """The URL that the link visits."""
  url: URL!
}

"""A string containing Liquid Markup to be rendered as HTML."""
scalar LiquidHTML

"""
Represents the location where the physical good resides.

"""
type Location implements Node & LegacyInteroperability {
  """The LocationAddress object for location."""
  address: LocationAddress!

  """Name of the service provider that fulfills from this location."""
  fulfillmentService: FulfillmentService

  """Globally unique identifier."""
  id: ID!

  """A single inventory level for the given inventory item."""
  inventoryLevel(
    """
    Specifies the inventory item ID for the inventory level to be returned.
    """
    inventoryItemId: ID!
  ): InventoryLevel

  """
  Paginated list of inventory levels for inventory items stocked at the location.
  """
  inventoryLevels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `inventory_item_id`
     - `inventory_group_id`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): InventoryLevelConnection!

  """Whether the location is active."""
  isActive: Boolean!
  isPrimary: Boolean! @deprecated(reason: "The concept of a primary location is deprecated, shipsInventory can be used to get a fallback location")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The name of the location."""
  name: String!

  """Indicates whether or not this location ships inventory."""
  shipsInventory: Boolean!
}

"""
Represents the address of the location.

"""
type LocationAddress {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The country of the location."""
  country: String

  """The two-letter country code of the location."""
  countryCode: String
  formatted: [String!]!

  """The latitude coordinates of the location."""
  latitude: Float

  """The longitude coordinates of the location."""
  longitude: Float

  """The phone number of the location."""
  phone: String

  """The province of the location."""
  province: String

  """The two-letter province or state code of the location."""
  provinceCode: String

  """The ZIP code of the location."""
  zip: String
}

"""Specifies the input fields required to create a location address."""
input LocationAddressInput {
  """The first line of the address for the location."""
  address1: String

  """The second line of the address for the location."""
  address2: String

  """The city of the location."""
  city: String

  """The phone number of the location."""
  phone: String

  """The ZIP code of the location."""
  zip: String

  """The two-letter country code of the location."""
  countryCode: String

  """The two-letter province or state code of the location."""
  provinceCode: String
}

type LocationConnection {
  """A list of edges."""
  edges: [LocationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type LocationCreatePayload {
  """The created location."""
  location: Location

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type LocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of LocationEdge."""
  node: Location!
}

"""Specifies the input fields required to create a location."""
input LocationInput {
  """The name of the location."""
  name: String!

  """The address of the location."""
  address: LocationAddressInput!
}

"""The set of valid sort keys for the locations query."""
enum LocationSortKeys {
  """Sort by the `name` value."""
  NAME

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""
Represents a customer mailing address.

For example, a customer's default address and an order's billing address are both mailling addresses.

"""
type MailingAddress implements Node {
  """
  The first line of the address. Typically the street address or PO Box number.

  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.

  """
  address2: String

  """
  The name of the city, district, village, or town.

  """
  city: String

  """
  The name of the customer's company or organization.

  """
  company: String

  """
  The name of the country.

  """
  country: String

  """
  The two-letter code for the country of the address.

  For example, US.

  """
  countryCode: String @deprecated(reason: "Use `countryCodeV2` instead")

  """
  The two-letter code for the country of the address.

  For example, US.

  """
  countryCodeV2: CountryCode

  """The first name of the customer."""
  firstName: String

  """
  A formatted version of the address, customized by the provided arguments.
  """
  formatted(
    """Whether to include the customer's name in the formatted address."""
    withName: Boolean = false

    """Whether to include the customer's company in the formatted address."""
    withCompany: Boolean = true
  ): [String!]!

  """A comma-separated list of the values for city, province, and country."""
  formattedArea: String

  """Globally unique identifier."""
  id: ID!

  """The last name of the customer."""
  lastName: String

  """The latitude coordinate of the customer address."""
  latitude: Float

  """The longitude coordinate of the customer address."""
  longitude: Float

  """
  The full name of the customer, based on firstName and lastName.

  """
  name: String

  """
  A unique phone number for the customer.

  Formatted using E.164 standard. For example, _+16135551111_.

  """
  phone: String

  """The region of the address, such as the province, state, or district."""
  province: String

  """
  The two-letter code for the region.

  For example, ON.

  """
  provinceCode: String

  """
  Verified means that the address was geolocated and it is a valid address. The
  field returns false if the verification failed or the job to verify this
  address was never started.
  """
  verified: Boolean!

  """The zip or postal code of the address."""
  zip: String
}

"""The fields used to create or update a mailing address."""
input MailingAddressInput {
  """
  The first line of the address. Typically the street address or PO Box number.

  """
  address1: String

  """
  The second line of the address. Typically the number of the apartment, suite, or unit.

  """
  address2: String

  """
  The name of the city, district, village, or town.

  """
  city: String

  """
  The name of the customer's company or organization.

  """
  company: String

  """
  The name of the country. This argument is deprecated: Use `countryCode` instead.
  """
  country: String

  """The two-letter code for the country of the address."""
  countryCode: CountryCode

  """The first name of the customer."""
  firstName: String

  """
  This argument is deprecated: Not needed for 90% of mutations, and provided separately where it is needed.
  """
  id: ID

  """The last name of the customer."""
  lastName: String

  """
  A unique phone number for the customer.

  Formatted using E.164 standard. For example, _+16135551111_.

  """
  phone: String

  """
  The region of the address, such as the province, state, or district. This
  argument is deprecated: Use `provinceCode` instead.
  """
  province: String

  """
  The two-letter code for the region of the address, such as the province, state, or district.
  """
  provinceCode: String

  """The zip or postal code of the address."""
  zip: String
}

"""
Manual discount applications capture the intentions of a discount that was manually created for an order.

"""
type ManualDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the application."""
  description: String

  """
  An ordered index which can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.

  """
  index: Int!

  """
  Which lines of targetType on the order that the discount is allocated over.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  The type of line on the order that the discount is applicable towards.
  """
  targetType: DiscountApplicationTargetType!

  """The title of the application."""
  title: String!

  """The value of the discount application."""
  value: PricingValue!
}

"""
A marketing activity represents marketing created by an app on behalf of the merchant.
"""
type MarketingActivity implements Node {
  """Amount spent on this marketing activity."""
  adSpend: MoneyV2

  """The admin url used to edit this activity."""
  adminDashboardUrl: URL

  """The admin url used to edit this activity."""
  adminEditUrl: URL!

  """The app which created this marketing activity."""
  app: App!

  """Errors generated when app was trying to complete this activity."""
  appErrors: MarketingActivityExtensionAppErrors

  """The budget for this marketing activity."""
  budget: MarketingBudget

  """The date and time when the marketing activity was created."""
  createdAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """
  The marketing activity extension used to create this marketing activity.
  """
  marketingActivityExtension: MarketingActivityExtension

  """Campaign this marketing activity belongs to."""
  marketingCampaign: MarketingCampaign

  """The broad category of marketing, used for reporting aggregation."""
  marketingChannel: MarketingChannel!

  """Associated marketing event of this marketing activity."""
  marketingEvent: MarketingEvent

  """
  A contextual description of the marketing activity based on the platform and tactic used.
  """
  sourceAndMedium: String!

  """
  Status helps to identify if this marketing activity has been completed, queued, failed etc.
  """
  status: MarketingActivityStatus!

  """The method of marketing used for this marketing activity."""
  tactic: MarketingTactic!

  """Expected status set by app in prior to an asynchronous operation."""
  targetStatus: MarketingActivityStatus

  """Title of this marketing activity."""
  title: String!

  """The date and time when the marketing activity was updated."""
  updatedAt: DateTime!

  """The set of UTM parameters being tracked for this marketing activity."""
  utmParameters: UTMParameters
}

type MarketingActivityBackfillPayload {
  """The created marketing activity."""
  marketingActivity: MarketingActivity

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""This type combines budget amount and its marketing budget type."""
input MarketingActivityBudgetInput {
  """Budget type for marketing activity."""
  budgetType: MarketingBudgetBudgetType

  """Amount of budget for the marketing activity."""
  total: MoneyInput
}

type MarketingActivityConnection {
  """A list of edges."""
  edges: [MarketingActivityEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type MarketingActivityCreatePayload {
  """The created marketing activity."""
  marketingActivity: MarketingActivity

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type MarketingActivityCreateThroughExtensionPayload {
  """The errors returned by the app when creating the marketing activity."""
  appErrors: MarketingActivityExtensionAppErrors

  """The created marketing activity."""
  marketingActivity: MarketingActivity

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The marketing activity creation item."""
type MarketingActivityCreationItem {
  """The app associated with the marketing activity creation item."""
  app: App!

  """The extension associated with the marketing activity creation item."""
  marketingActivityExtension: MarketingActivityExtension

  """The type of the marketing activity creation item."""
  type: MarketingActivityCreationItemType!
}

"""The type of the marketing activity creation item."""
enum MarketingActivityCreationItemType {
  """The creation item represents an onboarded extension."""
  EXTENSION

  """The creation item represents an non-onboardd app."""
  NON_ONBOARDED_APP

  """The creation item represents an non-installed app."""
  NON_INSTALLED_APP
}

type MarketingActivityEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingActivityEdge."""
  node: MarketingActivity!
}

"""
The marketing activity extension registered by app developers. Partners configure these to receive data from Shopify.
"""
type MarketingActivityExtension {
  """The admin url used to launch the app extension form."""
  adminLaunchUrl(
    """
    The marketing campaign which the activity created by the extension will be associated to.
    """
    campaignId: ID
  ): URL!

  """The app that created this marketing activity extension."""
  app: App!

  """
  Whether the marketing activity created using this extension is deletable.
  """
  deletable: Boolean!

  """
  Whether the marketing activity created using this extension is editable.
  """
  editable: Boolean!

  """The unique identifier of the marketing activity extension."""
  id: ID!

  """The schema object for the marketing activity extension."""
  marketingActivityExtensionSchema(
    """The form data in JSON serialized as a string."""
    formData: String

    """
    The ID of a marketing activity created by the app using this extension.
    """
    marketingActivityId: ID

    """
    The ID of the marketing recommendation being used to prefill the activity extension form.
    """
    marketingRecommendationId: ID
  ): MarketingActivityExtensionSchema!

  """The preview of the marketing activity."""
  marketingActivityPreview(
    """The form data in JSON serialized as a string."""
    formData: String!

    """The preview types which we want to retrieve the preview for."""
    previewTypes: [MarketingActivityPreviewType!]!

    """The ID of the marketing activity being previewed."""
    marketingActivityId: ID
  ): MarketingActivityPreviewPayload!

  """
  Whether the marketing activity created using this extension is pausable.
  """
  pausable: Boolean!

  """The marketing platform which will host the marketing activity."""
  platform: MarketingPlatform

  """The marketing tactic implemented by the marketing activity."""
  tactic: MarketingTactic!

  """The title of the marketing activity."""
  title: String!

  """The typeahead field data given a field name and field value argument."""
  typeaheadFieldData(
    """The field name on which we want to retrieve the typeahead field data."""
    fieldName: String!

    """The related field value which typeahead field data is based on."""
    fieldValue: String!
  ): MarketingActivityTypeaheadFieldData!
}

"""
The error code resulted from the marketing activity extension integration.
"""
enum MarketingActivityExtensionAppErrorCode {
  """The shop/user must be onboarded to use the app."""
  NOT_ONBOARDED_ERROR

  """The app has returned validation errors."""
  VALIDATION_ERROR

  """The app is not responding or returning unexpected data."""
  API_ERROR

  """The app has returned an error when invoking the platform."""
  PLATFORM_ERROR
}

"""
Represents errors returned from apps when using the marketing activity extension.
"""
type MarketingActivityExtensionAppErrors {
  """The app error type."""
  code: MarketingActivityExtensionAppErrorCode!

  """The list of errors returned by the app."""
  userErrors: [UserError!]!
}

"""
The response object for the schema of the marketing activity extension.
"""
type MarketingActivityExtensionSchema {
  """The errors returned by the app when loading the schema."""
  appErrors: MarketingActivityExtensionAppErrors

  """
  The schema for the marketing activity extension merged with dynamic data from the app.
  """
  schema: String
}

"""The preview of the marketing activity."""
type MarketingActivityPreview {
  """The MIME type for the marketing activity preview."""
  contentType: MarketingActivityPreviewMimeType!

  """The iFrame height of the marketing activity preview."""
  height: Int!

  """The preview type of the marketing activity preview."""
  previewType: MarketingActivityPreviewType!

  """The URL to the marketing activity preview."""
  previewUrl: URL!

  """The iFrame width of the marketing activity preview."""
  width: Int!
}

"""The MIME type of marketing activity preview."""
enum MarketingActivityPreviewMimeType {
  """HTML content."""
  TEXT_HTML

  """A JPG image."""
  IMAGE_JPEG

  """A PNG image."""
  IMAGE_PNG
}

"""The response object for the preview of the marketing activity."""
type MarketingActivityPreviewPayload {
  """The errors returned by the app when loading the preview."""
  appErrors: MarketingActivityExtensionAppErrors

  """The previews of the marketing activity by preview type."""
  marketingActivityPreviews: [MarketingActivityPreview!]
}

"""Preview type of the marketing activity."""
enum MarketingActivityPreviewType {
  """A desktop view."""
  DESKTOP

  """A mobile view."""
  MOBILE
}

"""The set of valid sort keys for the marketingActivities query."""
enum MarketingActivitySortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""
Status helps to identify if this marketing activity has been completed, queued, failed etc.
"""
enum MarketingActivityStatus {
  """This marketing activity is currently not running."""
  PAUSED

  """This marketing activity is scheduled to run."""
  SCHEDULED

  """There is no defined status for external marketing activities."""
  UNDEFINED

  """This marketing activity is currently running."""
  ACTIVE

  """This marketing activity has completed running."""
  INACTIVE

  """This marketing activity is pending creation on the app's platform."""
  PENDING

  """This marketing activity is unable to run."""
  FAILED

  """This marketing activity is permanently unavailable."""
  DELETED
}

"""
The response object for the type ahead options of a marketing activity form field.
"""
type MarketingActivityTypeaheadFieldData {
  """The errors returned by the app when loading the type ahead options."""
  appErrors: MarketingActivityExtensionAppErrors

  """The list of field options given the field name and field value."""
  options: [MarketingActivityTypeaheadFieldOption!]
}

"""Field label and field value pair representing user selectable option."""
type MarketingActivityTypeaheadFieldOption {
  """The field label to be displayed in the user selectable option."""
  label: String!

  """The representative field value of the user selectable option."""
  value: String!
}

"""Specifies the input fields required to update a marketing activity."""
input MarketingActivityUpdateInput {
  """The id for this marketing activity."""
  id: ID!

  """The budget for this marketing activity."""
  budget: MarketingActivityBudgetInput

  """The cumulative amount spent on this marketing activity."""
  adSpend: MoneyInput

  """The current state of the marketing activity."""
  status: MarketingActivityStatus

  """
  Encoded context provided by Shopify during the update marketing activity callback.
  """
  context: String

  """
  Error messages generated when app was trying to complete this activity.
  """
  errors: JSON
}

"""
The update operation type when updating marketing activity through extension.
"""
enum MarketingActivityUpdateOperationType {
  """Update the marketing activity."""
  UPDATE

  """Pause the marketing activity."""
  PAUSE

  """Resume the marketing activity."""
  RESUME

  """Republish the marketing activity."""
  REPUBLISH
}

type MarketingActivityUpdatePayload {
  """The updated marketing activity."""
  marketingActivity: MarketingActivity

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type MarketingActivityUpdateThroughExtensionPayload {
  """The errors returned by the app when creating the marketing activity."""
  appErrors: MarketingActivityExtensionAppErrors

  """The updated marketing activity."""
  marketingActivity: MarketingActivity

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Attributes a marketing event to an order."""
type MarketingAttribution {
  """The `campaign` UTM parameter."""
  campaign: String

  """The `content` UTM parameter."""
  content: String

  """The marketing event that resulted in an order."""
  marketingEvent: MarketingEvent

  """The `medium` UTM parameter."""
  medium: String

  """The `source` UTM parameter."""
  source: String

  """The `term` UTM parameter."""
  term: String
}

"""
This type combines budget amount and its marketing budget type.

"""
type MarketingBudget {
  """The budget type for a marketing activity."""
  budgetType: MarketingBudgetBudgetType!

  """The amount of budget for marketing activity."""
  total: MoneyV2!
}

"""The budget type for a marketing activity."""
enum MarketingBudgetBudgetType {
  """A daily budget."""
  DAILY

  """A budget for the lifetime of a marketing activity."""
  LIFETIME
}

"""Marketing campaign is a group of marketing activities."""
type MarketingCampaign implements Node {
  """The date and time when the Marketing campaign was created."""
  createdAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """The number of marketing activities in the Marketing campaign."""
  marketingActivitiesCount: Int!

  """
  Cached list of all marketing event IDs associated to this marketing campaign's activities.
  Used for querying aggregate metrics from Reportify.

  """
  reportifyMarketingEventIds: [UnsignedInt64!]!

  """The title of the Marketing campaign."""
  title: String!
}

type MarketingCampaignConnection {
  """A list of edges."""
  edges: [MarketingCampaignEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type MarketingCampaignCreatePayload {
  """The created marketing campaign."""
  marketingCampaign: MarketingCampaign

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type MarketingCampaignEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingCampaignEdge."""
  node: MarketingCampaign!
}

"""The set of valid sort keys for the marketingCampaigns query."""
enum MarketingCampaignSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The marketing campaign suggestion item."""
type MarketingCampaignSuggestionItem {
  """The description of the marketing campaign suggestion."""
  description: String!

  """The name of the marketing campaign suggestion."""
  name: String!

  """The type of the marketing campaign suggestion."""
  type: MarketingCampaignSuggestionItemType!
}

"""The type of the marketing campaign suggestion."""
enum MarketingCampaignSuggestionItemType {
  """Suggested holidays to do marketing on."""
  MARKETING_HOLIDAY
}

type MarketingCampaignUpdatePayload {
  """The renamed marketing campaign."""
  marketingCampaign: MarketingCampaign

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
The available marketing channels for a marketing activity or event. A marketing
channel is broad category of marketing, used for reporting aggregation.

"""
enum MarketingChannel {
  """Paid search."""
  SEARCH

  """Displayed ads."""
  DISPLAY

  """Social media."""
  SOCIAL

  """Email."""
  EMAIL

  """Referral links."""
  REFERRAL
}

"""
Marketing engagement represents customer activity taken on a marketing event.
"""
type MarketingEngagement {
  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: MoneyV2

  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int

  """The total number of comments for the day."""
  commentsCount: Int

  """The total number of favorites for the day."""
  favoritesCount: Int

  """The date time at which the data was fetched."""
  fetchedAt: DateTime

  """The total number of impressions for the day."""
  impressionsCount: Int

  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean

  """The marketing activity related to this engagement."""
  marketingActivity: MarketingActivity!

  """The date that these engagements occurred on."""
  occurredOn: Date!

  """The total number of shares for the day."""
  sharesCount: Int

  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset

  """The total number of views for the day."""
  viewsCount: Int
}

type MarketingEngagementCreatePayload {
  """The marketing engagement that was created."""
  marketingEngagement: MarketingEngagement

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
This object represents marketing engagement input fields for a marketing engagement.
"""
input MarketingEngagementInput {
  """The date that these engagements occurred on."""
  occurredOn: Date!

  """The total number of impressions for the day."""
  impressionsCount: Int

  """The total number of views for the day."""
  viewsCount: Int

  """The total number of clicks on the marketing event for the day."""
  clicksCount: Int

  """The total number of shares for the day."""
  sharesCount: Int

  """The total number of favorites for the day."""
  favoritesCount: Int

  """The total number of comments for the day."""
  commentsCount: Int

  """
  The total ad spend for the day, if the marketing event is a paid ad with a daily spend.
  """
  adSpend: MoneyInput

  """
  Whether the engagements are reported as lifetime values rather than daily totals.
  """
  isCumulative: Boolean

  """
  The UTC Offset that the app is using to determine which date to allocate spend to.
  """
  utcOffset: UtcOffset

  """The date time at which the data was fetched."""
  fetchedAt: DateTime
}

"""Represents actions that market a merchant's store or products."""
type MarketingEvent implements Node & LegacyInteroperability {
  """The app that the marketing event is attributed to."""
  app: App!

  """The marketing channel used by the marketing event."""
  channel: MarketingChannel

  """A human-readable description of the marketing event."""
  description: String

  """The date and time when the marketing event ended."""
  endedAt: DateTime

  """Globally unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL where the marketing event can be managed."""
  manageUrl: URL

  """The URL where the marketing event can be previewed."""
  previewUrl: URL

  """An optional ID that helps Shopify validate engagement data."""
  remoteId: String

  """The date and time when the marketing event is scheduled to end."""
  scheduledToEndAt: DateTime

  """
  Where the `MarketingEvent` occurred and what kind of content was used.
  Because `utmSource` and `utmMedium` are often used interchangeably, this is
  based on a combination of `marketingChannel`, `referringDomain`, and `type` to
  provide a consistent representation for any given piece of marketing
  regardless of the app that created it.

  """
  sourceAndMedium: String!

  """The date and time when the marketing event started."""
  startedAt: DateTime!

  """The display text for the marketing event type."""
  targetTypeDisplayText: String! @deprecated(reason: "Use `sourceAndMedium` instead")

  """The marketing event type."""
  type: MarketingTactic!

  """The name of the marketing campaign."""
  utmCampaign: String

  """
  The medium that the marketing campaign is using. Example values: `cpc`, `banner`.
  """
  utmMedium: String

  """
  The referrer of the marketing event. Example values: `google`, `newsletter`.
  """
  utmSource: String
}

type MarketingEventConnection {
  """A list of edges."""
  edges: [MarketingEventEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type MarketingEventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MarketingEventEdge."""
  node: MarketingEvent!
}

"""The set of valid sort keys for the marketingEvents query."""
enum MarketingEventSortKeys {
  """Sort by the `started_at` value."""
  STARTED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""
List of supported marketing platforms surfaced on the marketing section.
"""
enum MarketingPlatform {
  """Facebook."""
  FACEBOOK

  """Instagram."""
  INSTAGRAM

  """Google."""
  GOOGLE

  """Pinterest."""
  PINTEREST

  """Bing."""
  BING

  """Email."""
  EMAIL
}

"""Marketing recommendation shown in the marketing section."""
type MarketingRecommendation {
  """Call-to-action of the marketing recommendation."""
  cta: MarketingRecommendationCTA!

  """Description of the marketing recommendation."""
  description: String!

  """Icon associated with the recommendation."""
  icon: Image!

  """Id of the marketing recommendation."""
  id: ID!

  """The reason this recommendation was generated."""
  reason: String

  """Title of the marketing recommendation."""
  title: String!

  """Type of the marketing recommendation."""
  type: MarketingRecommendationType!
}

"""The call to action fields for the marketing recommendation."""
type MarketingRecommendationCTA {
  """The app associated with the marketing recommendation."""
  app: App

  """Call to action text."""
  content: String!

  """Boolean to indicate external link."""
  external: Boolean!

  """Call to action url. Null for App install recommendation."""
  url: URL
}

"""Type of merchant interaction with the marketing recommendation."""
enum MarketingRecommendationFeedback {
  """When the recommendation card appears in the viewport."""
  CONSUME

  """When the primary CTA for the recommendation is clicked."""
  VIEW

  """When the merchant submits a rejection form."""
  REJECT
}

type MarketingRecommendationFeedbackSubmitPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Type of the marketing recommendation."""
enum MarketingRecommendationType {
  """Educational advice on marketing."""
  EDUCATION

  """Recommended Apps for marketing."""
  APP_INSTALL

  """Recommended values for marketing activities."""
  SMART_ACTION

  """Recommended actions for marketing."""
  QUICK_ACTION
}

"""
Specifies the input fields for tracking when a user clicks to add an activity to a marketing campaign.
"""
input MarketingSectionActivityAddTrackingInput {
  """
  The id of the marketing campaign which the activity is being added to.
  """
  marketingCampaignId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when user clicks on an activity to view the dashboard.
"""
input MarketingSectionActivityDashboardViewTrackingInput {
  """The id of the marketing activity whose report is being viewed."""
  marketingActivityId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when user clicks to edit a marketing activity.
"""
input MarketingSectionActivityEditTrackingInput {
  """The id of the marketing campaign that the activity belongs to."""
  marketingCampaignId: ID!

  """The id of the marketing activity being edited."""
  marketingActivityId: ID!

  """
  The id of the marketing activity extension being used to edit the activity.
  """
  marketingActivityExtensionId: ID!

  """The id of the app that was used to create the activity."""
  appId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when user clicks to select an app or extension from the campaign creation list.
"""
input MarketingSectionAppSelectTrackingInput {
  """The id of the app that was used to create the activity."""
  appId: ID!

  """
  The id of the marketing activity extension being used to create the activity.
  """
  marketingActivityExtensionId: ID

  """The position rank of where the app is located in the list."""
  position: Int!

  """Denotes what state that the shop's app is in."""
  listItemState: MarketingActivityCreationItemType!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when a user clicks on setup/onboard of an app.
"""
input MarketingSectionAppSetupTrackingInput {
  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!

  """The id of the app that was used to create the activity."""
  appId: ID!
}

"""
Specifies the input fields for tracking when a user clicks to create a new marketing campaign.
"""
input MarketingSectionCampaignCreateTrackingInput {
  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when a campaign is created through the modal.
"""
input MarketingSectionCampaignModalCreateTrackingInput {
  """The id of the marketing campaign that was created through the modal."""
  marketingCampaignId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!

  """The marketing campaign title of the campaign that was created."""
  marketingCampaignTitle: String!

  """The marketing campaign title of the campaign that was suggested."""
  marketingCampaignSuggestionTitle: String
}

"""
Specifies the input fields for tracking when user clicks on the suggested campaign.
"""
input MarketingSectionCampaignModalSuggestionSelectTrackingInput {
  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!

  """The marketing campaign title of the campaign that was suggested."""
  marketingCampaignSuggestionTitle: String!

  """
  The position rank of where the campaign suggestion is located in the list. Starts from 0.
  """
  position: Int!
}

"""
Specifies the input fields for tracking when a user clicks to rename a marketing campaign.
"""
input MarketingSectionCampaignRenameTrackingInput {
  """The id of the marketing campaign being renamed."""
  marketingCampaignId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when a user clicks to view a marketing campaign.
"""
input MarketingSectionCampaignViewTrackingInput {
  """The id of the marketing campaign being viewed."""
  marketingCampaignId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when user clicks on view external activities button.
"""
input MarketingSectionExternalActivitiesViewTrackingInput {
  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

"""
Specifies the input fields for tracking when user clicks on an external activity to view the dashboard.
"""
input MarketingSectionExternalActivityDashboardViewTrackingInput {
  """The id of the marketing activity whose report is being viewed."""
  marketingActivityId: ID!

  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!
}

type MarketingSectionTrackingPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Specifies the input fields for tracking a marketing section view action.
"""
input MarketingSectionViewTrackingInput {
  """The type of the marketing section page that the user enters on."""
  resourceType: ResourceType!

  """
  The location type of the marketing section page that the user enters on.
  """
  resourceLocation: ResourceLocation!

  """
  The utm_source url parameter set in the referrer explaining the path taken by the merchant to enter the marketing section.
  """
  utmSource: String

  """
  The utm_campaign url parameter set in the referrer explaining the path taken
  by the merchant to enter the marketing section.
  """
  utmCampaign: String

  """
  The utm_medium url parameter set in the referrer explaining the path taken by the merchant to enter the marketing section.
  """
  utmMedium: String

  """
  The utm_term url parameter set in the referrer explaining the path taken by the merchant to enter the marketing section.
  """
  utmTerm: String

  """
  The utm_content url parameter set in the referrer explaining the path taken by
  the merchant to enter the marketing section.
  """
  utmContent: String
}

"""The available types of marketing event."""
enum MarketingTactic {
  """An abandoned cart recovery email."""
  ABANDONED_CART

  """An ad, such as a Facebook ad."""
  AD

  """An affiliate link."""
  AFFILIATE

  """A link."""
  LINK

  """A loyalty program."""
  LOYALTY

  """A messaging app, such as Facebook Messenger."""
  MESSAGE

  """A newsletter."""
  NEWSLETTER

  """A notification in the Shopify admin."""
  NOTIFICATION

  """A blog post."""
  POST

  """A retargeting ad."""
  RETARGETING

  """A transactional email."""
  TRANSACTIONAL

  """Search engine optimization."""
  SEO

  """A direct visit to the online store."""
  DIRECT

  """Popup on merchant's store."""
  STOREFRONT_APP

  """A display ad."""
  DISPLAY @deprecated(reason: "`DISPLAY` is deprecated. Use `AD` instead.")

  """Paid search."""
  SEARCH @deprecated(reason: "`SEARCH` is deprecated. Use `AD` instead.")

  """A follow-up email."""
  FOLLOW_UP @deprecated(reason: "'FOLLOW_UP' is deprecated. Use 'TRANSACTIONAL' instead.")

  """A promotional receipt."""
  RECEIPT @deprecated(reason: "'RECEIPT' is deprecated. Use 'TRANSACTIONAL' instead.")
}

"""
Requests for feedback about Shopify to Merchants.
Feedback forms are created and submitted to an external app at "merchant-feedback.shopifycloud.com".

"""
type MerchantFeedback {
  """The URL of the feedback form to open with signed payload."""
  url: URL
}

"""
Metafields represent custom metadata attached to a resource. Metafields can be sorted into namespaces and are
comprised of keys, values, and value types.

"""
type Metafield implements Node & LegacyInteroperability {
  """The description of a metafield."""
  description: String

  """Globally unique identifier."""
  id: ID!

  """The key name for a metafield."""
  key: String!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The namespace for a metafield."""
  namespace: String!

  """The value of a metafield."""
  value: String!

  """Represents the metafield value type."""
  valueType: MetafieldValueType!
}

type MetafieldConnection {
  """A list of edges."""
  edges: [MetafieldEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the input fields to delete a metafield."""
input MetafieldDeleteInput {
  id: ID!
}

type MetafieldDeletePayload {
  deletedId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type MetafieldEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of MetafieldEdge."""
  node: Metafield!
}

"""Specifies the input fields for a metafield."""
input MetafieldInput {
  description: String
  id: ID
  key: String
  namespace: String
  value: String
  valueType: MetafieldValueType
}

"""Metafield value types."""
enum MetafieldValueType {
  STRING
  INTEGER
  JSON_STRING
}

type MobileAppInstallBannerDismissPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

input MobileDeviceRegisterInput {
  id: ID
  token: String!
  name: String!
  snsPlatformApplication: String
  badgeEnabled: Boolean
  identifier: String
}

input MobileDeviceUnregisterInput {
  id: ID!
}

input MobileTokenDeleteInput {
  tokenFingerprint: String!
}

"""A monetary value string."""
scalar Money

"""
A collection of monetary values in their respective currencies.

"""
type MoneyBag {
  """Amount in presentment currency."""
  presentmentMoney: MoneyV2!

  """Amount in shop currency."""
  shopMoney: MoneyV2!
}

"""Specifies the fields for a monetary value with currency."""
input MoneyInput {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"""
A monetary value with currency.

To format currencies, combine this type's amount and currencyCode fields with your client's locale.

For example, in JavaScript you could use Intl.NumberFormat:

```js
new Intl.NumberFormat(locale, {
  style: 'currency',
  currency: currencyCode
}).format(amount);
```

Other formatting libraries include:

* iOS - [NumberFormatter](https://developer.apple.com/documentation/foundation/numberformatter)
* Android - [NumberFormat](https://developer.android.com/reference/java/text/NumberFormat.html)
* PHP - [NumberFormatter](http://php.net/manual/en/class.numberformatter.php)

For a more general solution, the [Unicode CLDR number formatting database] is available with many implementations
(such as [TwitterCldr](https://github.com/twitter/twitter-cldr-rb)).

"""
type MoneyV2 {
  """Decimal money amount."""
  amount: Decimal!

  """Currency of the money."""
  currencyCode: CurrencyCode!
}

"""An individual move to perform of an object to a position."""
input MoveInput {
  """The ID of the object to be moved."""
  id: ID!

  """The new position of the object in the set, using a 0 based index."""
  newPosition: UnsignedInt64!
}

type Mutation {
  """Generates a login token."""
  adminPasswordlessLogin(input: AdminGenerateLoginTokenInput!): AdminGenerateLoginTokenPayload

  """Click on a particular action for an insight's suggestion."""
  analyticsActionClick(
    """The ID of the target action."""
    id: ID!

    """The ID of the suggestion this action belongs to."""
    suggestionId: ID!

    """Insight this action belongs to."""
    insightId: ID!
  ): AnalyticsActionClickPayload

  """Collects feedback on an insight to record merchant sentiment."""
  analyticsFeedbackSubmit(
    """The key representing the selected feedback option."""
    key: AnalyticsFeedbackSubmitKey!

    """The ID of the item the feedback is for."""
    insightId: ID!

    """Optional comments with the feedback."""
    comment: String
  ): AnalyticsFeedbackSubmitPayload

  """Click on a particular item inside an insight list."""
  analyticsItemClick(
    """The ID of the target item."""
    id: ID!

    """Position of this item in the list of items in this insight."""
    position: Int!

    """Insight this item belongs to."""
    insightId: ID!

    """The location the click originated from."""
    source: InsightsInteractionSource!
  ): AnalyticsItemClickPayload

  """Click on the primary suggestion / action for an insight."""
  analyticsPrimarySuggestionClick(
    """The ID of the target action."""
    id: ID!

    """The ID of the suggestion this action belongs to."""
    suggestionId: ID!

    """Insight this action belongs to."""
    insightId: ID!
  ): AnalyticsPrimarySuggestionClickPayload

  """Click to expand a particular suggestion and view actions."""
  analyticsSuggestionExpand(
    """The ID of the suggestion being expanded."""
    id: ID!

    """Insight this suggestion belongs to."""
    insightId: ID!
  ): AnalyticsSuggestionExpandPayload

  """Click to expand a particular suggestion and view actions."""
  analyticsSuggestionsClick(
    """Insight whose button was clicked."""
    insightId: ID!

    """The location this click originated from."""
    source: InsightsInteractionSource!
  ): AnalyticsSuggestionsClickPayload

  """Click on the view more card in the insights carousel."""
  analyticsViewMoreClick(
    """Insight this item belongs to."""
    insightId: ID!
  ): AnalyticsViewMoreClickPayload

  """Installs an app on a shop."""
  appInstall(input: AppInstallInput!): AppInstallPayload

  """Generates an app store URL."""
  appStoreUrlGenerate: AppStoreUrlGeneratePayload

  """Uninstalls an app."""
  appUninstall(input: AppUninstallInput!): AppUninstallPayload

  """Export multiple resources by a set of ids."""
  bulkExportByIds(resourceExportableType: ResourceExportableType!, resourceIds: [ID!]!, exportFormat: ExportFormat!): BulkExportByIdsPayload

  """Asynchronously export resources in bulk."""
  bulkExportBySearch(
    """Search query for filtering products on."""
    search: String
    exportFormat: ExportFormat!
    resourceExportableType: ResourceExportableType!
  ): BulkExportBySearchPayload

  """
  Creates a shipping packaging based on a carrier shipping package definition.
  """
  carrierShippingPackagingCreate(
    """Carrier supplying the packaging."""
    carrier: String!

    """Code identifying this packaging."""
    carrierPackagingCode: String!

    """
    Setting this to true will make this packaging the default, which Shopify
    will use to calculate shipping costs on checkout.
    """
    default: Boolean
  ): CarrierShippingPackagingCreatePayload

  """Adds products to a collection."""
  collectionAddProducts(
    """The ID of the collection that's being updated."""
    id: ID!

    """The IDs of the products that are being added to the collection."""
    productIds: [ID!]!
  ): CollectionAddProductsPayload

  """
  Adds products to the manual sort. It will put the products at the bottom of the list.
  """
  collectionAddProductsToManualSort(
    """
    ID of the collection where the products are going to be manually sorted.
    """
    collectionId: ID!

    """
    List of products to be added to the manual sort part of the collection.
    """
    productIds: [ID!]!
  ): CollectionAddProductsToManualSortPayload

  """
  Asynchronously remove collections in bulk.
  **Warning:** all collections will be deleted if no `search` argument is specified.

  """
  collectionBulkDelete(
    """Search query for filtering collections on."""
    search: String
  ): CollectionBulkDeletePayload

  """Asynchronously publish collections to publications in bulk."""
  collectionBulkPublish(
    """Search query for filtering collections on."""
    search: String

    """List of publication ids to publish the collections on."""
    publicationIds: [ID!]

    """
    List of channel ids to publish the collections on. This argument is deprecated: Use publicationIds instead.
    """
    channelIds: [ID!]
  ): CollectionBulkPublishPayload

  """Asynchronously unpublish collections in bulk."""
  collectionBulkUnpublish(
    """Search query for filtering collections on."""
    search: String

    """List of publication ids to publish the collections on."""
    publicationIds: [ID!]

    """
    List of channel ids to publish the collections on. This argument is deprecated: Use publicationIds instead.
    """
    channelIds: [ID!]
  ): CollectionBulkUnpublishPayload

  """
  Creates a collection.

  """
  collectionCreate(
    """The properties to use when creating the collection."""
    input: CollectionInput!
  ): CollectionCreatePayload

  """Deletes a collection."""
  collectionDelete(
    """Specifies the collection to delete by its ID."""
    input: CollectionDeleteInput!
  ): CollectionDeletePayload

  """Publishes a collection to a channel."""
  collectionPublish(
    """
    Specify a collection to publish and the sales channels to publish it to.
    """
    input: CollectionPublishInput!
  ): CollectionPublishPayload @deprecated(reason: "Use `publishablePublish` instead")

  """Removes products from manual sort of the given smart collection."""
  collectionRemoveAllProductsFromManualSort(
    """ID of the collection where the products are going to be unpinned."""
    id: ID!
  ): CollectionRemoveAllProductsFromManualSortPayload

  """
  Removes a set of products from a given collection. It can take a long time to
  run. Instead of returning a collection it returns a job, which should be polled.
  """
  collectionRemoveProducts(
    """The ID of the collection to remove products from."""
    id: ID!

    """The IDs of products to remove from the collection."""
    productIds: [ID!]!
  ): CollectionRemoveProductsPayload

  """Removes products from manual sort."""
  collectionRemoveProductsFromManualSort(
    """
    ID of the collection where the products are going to be removed from manual sort.
    """
    collectionId: ID!

    """
    List of products to be removed from the manual sort part of the collection.
    """
    productIds: [ID!]!
  ): CollectionRemoveProductsFromManualSortPayload

  """Asynchronously reorders a set of products from a given collection."""
  collectionReorderProducts(
    """The ID of the collection on which to reorder products."""
    id: ID!

    """A list of moves to perform which will be evaulated in order."""
    moves: [MoveInput!]!
  ): CollectionReorderProductsPayload

  """Unpublishes a collection."""
  collectionUnpublish(
    """
    Specify a collection to unpublish and the sales channels to remove it from.
    """
    input: CollectionUnpublishInput!
  ): CollectionUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead")

  """Updates a collection."""
  collectionUpdate(
    """The updated properties for the collection."""
    input: CollectionInput!
  ): CollectionUpdatePayload

  """Creates a custom fulfillment service."""
  customFulfillmentServiceCreate(
    """The input fields used to create a custom fulfillment service."""
    input: CustomFulfillmentServiceCreateInput!
  ): CustomFulfillmentServiceCreatePayload

  """Deletes a custom fulfillment service."""
  customFulfillmentServiceDelete(
    """The ID of the custom fulfillment service."""
    id: ID!

    """
    The ID of the location to which inventory and commitments will be relocated
    when deleting a custom fulfillment service.

    """
    destinationLocationId: ID
  ): CustomFulfillmentServiceDeletePayload

  """Updates a custom fulfillment service."""
  customFulfillmentServiceUpdate(
    """The ID of the custom fulfillment service."""
    id: ID!

    """The name of the custom fulfillment service."""
    name: String

    """
    The address to which an email is sent when the custom fulfillment service
    receives a fulfill request.

    """
    email: String
  ): CustomFulfillmentServiceUpdatePayload

  """Creates a custom shipping packaging."""
  customShippingPackagingCreate(
    """Specifies the input fields for a custom shipping packaging."""
    shippingPackaging: DeliveryCustomShippingPackagingInput!
  ): CustomShippingPackagingCreatePayload

  """Creates a new customer."""
  customerCreate(
    """Specifies the fields to use when creating the customer."""
    input: CustomerInput!
  ): CustomerCreatePayload

  """Deletes a customer."""
  customerDelete(
    """Specifies the customer to delete."""
    input: CustomerDeleteInput!
  ): CustomerDeletePayload

  """Updates a customer's attributes."""
  customerUpdate(
    """Provides updated fields for the customer."""
    input: CustomerInput!
  ): CustomerUpdatePayload

  """Updates a customer's default address."""
  customerUpdateDefaultAddress(
    """The ID of the customer whose default address is being updated."""
    customerId: ID!

    """The ID of the address to use as the customer's default address."""
    addressId: ID!
  ): CustomerUpdateDefaultAddressPayload

  """Reports detected device attributes."""
  deviceAttributesReport(
    """Device attributes to report."""
    input: MutationsDeviceAttributesReportInput!
  ): DeviceAttributesReportPayload

  """Activates the automatic discount."""
  discountAutomaticActivate(
    """ID of the automatic discount to activate."""
    id: ID!
  ): DiscountAutomaticActivatePayload

  """Creates a BXGY automatic discount."""
  discountAutomaticBxgyCreate(
    """Input data to create discount."""
    automaticBxgyDiscount: DiscountAutomaticBxgyInput!
  ): DiscountAutomaticBxgyCreatePayload

  """Update BXGY automatic discount using its id and input."""
  discountAutomaticBxgyUpdate(
    """ID of the discount to update."""
    id: ID!

    """Input data to update discount."""
    automaticBxgyDiscount: DiscountAutomaticBxgyInput!
  ): DiscountAutomaticBxgyUpdatePayload

  """Deactivates the automatic discount."""
  discountAutomaticDeactivate(
    """ID of the automatic discount to update."""
    id: ID!
  ): DiscountAutomaticDeactivatePayload

  """Deletes the automatic discount."""
  discountAutomaticDelete(
    """ID of the automatic discount to delete."""
    id: ID!
  ): DiscountAutomaticDeletePayload

  """Creates a DnsRecord with the provided parameters."""
  dnsRecordCreate(
    """The Global ID which represents a domain on a Shopify store."""
    domainId: ID!

    """Parameters for the creation of a DnsRecord."""
    record: DnsRecordInput!
  ): DnsRecordCreatePayload

  """Deletes a single DnsRecord."""
  dnsRecordDelete(
    """The Global ID of the DnsRecord."""
    id: ID!
  ): DnsRecordDeletePayload

  """Resets the DNS nameservers on a zone to the Shopify defaults."""
  dnsZoneNameserversReset(
    """Dns Zone Global id."""
    id: ID!
  ): DnsZoneNameserversResetPayload

  """Resets the DNS records on a zone to the Shopify defaults."""
  dnsZoneRecordsReset(
    """Dns Zone Global id."""
    id: ID!
  ): DnsZoneRecordsResetPayload

  """
  Calculates the properties of a draft order. Useful for determining information
  such as total taxes or price without actually creating a draft order.

  """
  draftOrderCalculate(
    """The fields for the draft order."""
    input: DraftOrderInput!
  ): DraftOrderCalculatePayload

  """Completes a draft order."""
  draftOrderComplete(
    """Specifies the draft order to complete."""
    id: ID!

    """Specifies whether the payment is pending or not."""
    paymentPending: Boolean = false
  ): DraftOrderCompletePayload

  """Creates a draft order."""
  draftOrderCreate(
    """The fields used to create the draft order."""
    input: DraftOrderInput!
  ): DraftOrderCreatePayload

  """Deletes a draft order."""
  draftOrderDelete(
    """Specify the draft order to delete by its ID."""
    input: DraftOrderDeleteInput!
  ): DraftOrderDeletePayload

  """Previews a draft order invoice email."""
  draftOrderInvoicePreview(
    """Specifies the draft order invoice email to preview."""
    id: ID!

    """Specifies the draft order invoice email fields."""
    email: EmailInput
  ): DraftOrderInvoicePreviewPayload

  """Sends an email invoice for a draft order."""
  draftOrderInvoiceSend(
    """Specifies the draft order to send the invoice for."""
    id: ID!

    """Specifies the draft order invoice email fields."""
    email: EmailInput
  ): DraftOrderInvoiceSendPayload

  """Updates a draft order."""
  draftOrderUpdate(
    """Specifies the draft order to update."""
    id: ID!

    """The draft order properties to update."""
    input: DraftOrderInput!
  ): DraftOrderUpdatePayload

  """
  Abort the exchange process by deleting an exchange and canceling any payments associated with the exchange checkout.
  """
  exchangeAbort(
    """The ID of the exchange to abort."""
    id: ID!
  ): ExchangeAbortPayload

  """Completes an exchange operation."""
  exchangeComplete(
    """The ID of the exchange to complete."""
    id: ID!
  ): ExchangeCompletePayload

  """Creates an exchange along with the associated checkout."""
  exchangeCreate(
    """The order to be exchanged."""
    orderId: ID!

    """A unique token used for checkout."""
    uniqueToken: String!

    """The input params for creating an exchange."""
    input: ExchangeInput!
  ): ExchangeCreatePayload

  """Creates and completes an exchange along with the associated checkout."""
  exchangeCreateAndComplete(
    """The order to be exchanged."""
    orderId: ID!

    """A unique token used for checkout."""
    uniqueToken: String!

    """The input params for creating an exchange."""
    input: ExchangeInput!
  ): ExchangeCreateAndCompletePayload

  """Sends an exchange receipt to a recipient."""
  exchangeReceiptSend(
    """The ID of the exchange that the receipt should be sent for."""
    exchangeId: ID!

    """The recipient input for sending an exchange receipt."""
    recipient: ExchangeReceiptSendRecipientInput!
  ): ExchangeReceiptSendPayload

  """Receives a trigger from an App."""
  flowTriggerReceive(
    """The payload needed to run the Trigger."""
    body: String!
  ): FlowTriggerReceivePayload

  """Creates a fulfillment for an order."""
  fulfillmentCreate(
    """The input fields used to create a fulfillment."""
    input: FulfillmentInput!
  ): FulfillmentCreatePayload

  """Creates a fulfillment service."""
  fulfillmentServiceCreate(
    """The name of the fulfillment service."""
    name: String!

    """The URL to send requests for the fulfillment service."""
    callbackUrl: URL

    """
    Whether or not the fulfillment service provides
    tracking numbers for packages.

    """
    trackingSupport: Boolean = false
  ): FulfillmentServiceCreatePayload

  """Deletes a fulfillment service."""
  fulfillmentServiceDelete(
    """The ID of the fulfillment service."""
    id: ID!

    """
    The ID of the location to which inventory and commitments will be relocated
    when deleting a fulfillment service.

    """
    destinationLocationId: ID
  ): FulfillmentServiceDeletePayload

  """Updates a fulfillment service."""
  fulfillmentServiceUpdate(
    """The id of the fulfillment service."""
    id: ID!

    """The name of the fulfillment service."""
    name: String

    """The URL to send requests for the fulfillment service."""
    callbackUrl: URL

    """
    Whether or not the fulfillment service provides
    tracking numbers for packages.

    """
    trackingSupport: Boolean
  ): FulfillmentServiceUpdatePayload

  """Updates tracking information for a fulfillment."""
  fulfillmentTrackingInfoUpdate(
    """The id of the fulfillment."""
    fulfillmentId: ID!

    """The input for the mutation."""
    trackingInfoUpdateInput: TrackingInfoUpdateInput!
  ): FulfillmentTrackingInfoUpdatePayload

  """Claim Google Ads coupon for shop."""
  googleAdsCouponClaim: GoogleAdsCouponClaimPayload

  """Registers a button clicked event for the home item."""
  homeCardClick(
    """The card ID and button ID for the button the user interacted with."""
    input: HomeCardClickInput!
  ): HomeCardClickPayload

  """
  Collects multiple choice feedback and comments on a card to obtain merchant sentiment.
  """
  homeCardFeedback(
    """Quantitative and qualitative feedback for a specific card."""
    input: HomeCardFeedbackInput!
  ): HomeCardFeedbackPayload

  """Click, upvote, downvote, dismiss or undo dismissal on a home item."""
  homeCardInteraction(
    """Input fields for the HomeCardInteraction mutation."""
    input: HomeCardInteractionInput!
  ): HomeCardInteractionPayload

  """Called when a card is in the viewport for at least two seconds."""
  homeCardView(
    """ID and position in the feed for the card that was viewed."""
    input: HomeCardViewInput!
  ): HomeCardViewPayload

  """
  Collects multiple choice feedback and comments on a card after voting if the
  card was useful in order to obtain merchant sentiment.
  """
  homeCardVoteFeedback(
    """Card id for vote feedback."""
    id: ID!

    """Selected vote feedback options."""
    feedback: String

    """Card comment for vote feedback."""
    comment: String
  ): HomeCardVoteFeedbackPayload

  """Feedback for the merchant corrected industry."""
  homeIndustryFeedback(
    """The ID of the card."""
    id: ID!

    """Feedback for the merchant corrected industry."""
    input: HomeIndustryFeedbackInput!
  ): HomeIndustryFeedbackPayload

  """Interact with an industry classification."""
  homeIndustryInteraction(
    """The ID of the Home Card the interaction is being performed on."""
    id: ID!

    """Input fields for the HomeIndustryInteraction mutation."""
    input: HomeIndustryInteractionInput!
  ): HomeIndustryInteractionPayload

  """Drill up or down (expand/collapse) on a Home item."""
  homeItemDrill(
    """Input fields for the HomeItemDrill mutation."""
    input: HomeItemDrillInput!
  ): HomeItemDrillPayload

  """A HomeNotificationDismiss dismiss a notification from the home feed."""
  homeNotificationDismiss(
    """ID of the notification to dismiss."""
    id: ID!
  ): HomeNotificationDismissPayload

  """A user’s answer to a question card."""
  homeQuestionCardAnswer(
    """
    A quantitative and qualitative answer that was made for a specific card question.
    """
    input: HomeQuestionCardAnswerInput!
  ): HomeQuestionCardAnswerPayload

  """Sends a feedback for the given tag."""
  homeTagFeedback(
    """The name of the tag the feedback is sent for."""
    tagName: String!

    """The comment by user that constitutes the feedback."""
    comment: String!

    """The feedback option selected by the user."""
    feedback: String
  ): HomeTagFeedbackPayload

  """Interact with a home item based on a tag at a user level."""
  homeTagInteraction(
    """The action that was taken on a specific tag."""
    action: MutationsHomeTagInteractionAction!

    """The name of the tag the action should be performed on."""
    tagName: String!
  ): HomeTagInteractionPayload

  """Activate an inventory item at a location."""
  inventoryActivate(
    """Specifies which item should be activated."""
    inventoryItemId: ID!

    """Specifies where the item should be activated."""
    locationId: ID!

    """The initial available quantity at the location."""
    available: Int
  ): InventoryActivatePayload

  """Adjusts the inventory by a certain quantity."""
  inventoryAdjustQuantity(input: InventoryAdjustQuantityInput!): InventoryAdjustQuantityPayload

  """Adjusts the inventory at a location for multiple inventory items."""
  inventoryBulkAdjustQuantityAtLocation(
    """Specifies adjustments for items."""
    inventoryItemAdjustments: [InventoryAdjustItemInput!]!

    """Specifies where the item should be adjusted."""
    locationId: ID!
  ): InventoryBulkAdjustQuantityAtLocationPayload

  """Deactivate an inventory item at a location."""
  inventoryDeactivate(
    """Specifies which inventory level should be deactivated."""
    inventoryLevelId: ID!
  ): InventoryDeactivatePayload

  """Create a new location."""
  locationCreate(
    """The Input of the location."""
    input: LocationInput!
  ): LocationCreatePayload

  """Create a marketing activity and campaign for a marketing event."""
  marketingActivityBackfill(
    """The id of the marketing event for which to backfill."""
    marketingEventId: ID!

    """The current state of the marketing activity."""
    status: MarketingActivityStatus!

    """
    The id of the marketing activity extension for the marketing activity.
    """
    marketingActivityExtensionId: ID!
  ): MarketingActivityBackfillPayload

  """Create a new marketing activity."""
  marketingActivityCreate(
    """The Input of the marketing activity."""
    input: MutationsMarketingActivityCreateInput!
  ): MarketingActivityCreatePayload

  """
  Creates the marketing activity through the marketing activity extension.
  """
  marketingActivityCreateThroughExtension(
    """The ID of the marketing activity extension."""
    marketingActivityExtensionId: ID!

    """
    The ID of the marketing campaign that will be associated with this marketing
    activity. Only one of marketing_campaign_id or marketing_campaign_title should be set.
    """
    marketingCampaignId: ID

    """
    The title of the marketing campaign to be created. The marketing activity
    will be associated with this new campaign. Only one of marketing_campaign_id
    or marketing_campaign_title should be set.
    """
    marketingCampaignTitle: String

    """The title of the marketing activity."""
    marketingActivityTitle: String!

    """The form data in JSON serialized as a string."""
    formData: String!

    """
    The ID of the marketing recommendation associated with the marketing activity creation.
    """
    marketingRecommendationId: ID
  ): MarketingActivityCreateThroughExtensionPayload

  """Updates a marketing activity."""
  marketingActivityUpdate(
    """The Input of the marketing activity."""
    input: MarketingActivityUpdateInput!
  ): MarketingActivityUpdatePayload

  """
  Updates the marketing activity through the marketing activity extension.
  """
  marketingActivityUpdateThroughExtension(
    """The ID of the marketing activity being updated."""
    marketingActivityId: ID!

    """The form data in JSON serialized as a string."""
    formData: String

    """The operation of the marketing activity update."""
    operation: MarketingActivityUpdateOperationType!

    """The title of the marketing activity to update to."""
    marketingActivityTitle: String
  ): MarketingActivityUpdateThroughExtensionPayload

  """Create a new marketing campaign."""
  marketingCampaignCreate(
    """The title of the marketing campaign."""
    title: String!
  ): MarketingCampaignCreatePayload

  """Update the title of an existing marketing campaign."""
  marketingCampaignUpdate(
    """The ID of the marketing campaign to update."""
    id: ID!

    """The new title of the marketing campaign."""
    title: String!
  ): MarketingCampaignUpdatePayload

  """Creates a new marketing event engagement for a marketing activity."""
  marketingEngagementCreate(
    """The id of marketing activity."""
    marketingActivityId: ID!

    """The marketing engagement's attributes."""
    marketingEngagement: MarketingEngagementInput!
  ): MarketingEngagementCreatePayload

  """Return feedback for a marketing recommendation card."""
  marketingRecommendationFeedbackSubmit(
    """The id of the marketing recommendation."""
    marketingRecommendationId: ID!

    """The interaction of the merchant with the marketing recommendation."""
    feedback: MarketingRecommendationFeedback!

    """
    The index at which the marketing recommendation card was displayed. Starts from 0.
    """
    index: Int!

    """
    The reason given by the merchant for rejecting a marketing recommendation.
    """
    reason: String
  ): MarketingRecommendationFeedbackSubmitPayload

  """Emits a monorail event for marketing section analytics."""
  marketingSectionTracking(
    """Specifies the input fields for a marketing section view action."""
    marketingSectionView: MarketingSectionViewTrackingInput

    """
    Specifies the input fields for tracking when a user clicks to create a new marketing campaign.
    """
    marketingSectionCampaignCreate: MarketingSectionCampaignCreateTrackingInput

    """
    Specifies the input fields for tracking when a user clicks to view a marketing campaign.
    """
    marketingSectionCampaignView: MarketingSectionCampaignViewTrackingInput

    """
    Specifies the input fields for tracking when a user clicks to rename a marketing campaign.
    """
    marketingSectionCampaignRename: MarketingSectionCampaignRenameTrackingInput

    """
    Specifies the input fields for tracking when a user clicks to add an activity to a marketing campaign.
    """
    marketingSectionActivityAdd: MarketingSectionActivityAddTrackingInput

    """
    Specifies the input fields for tracking when a marketing campaign is created from the campaign creation modal.
    """
    marketingSectionCampaignModalCreate: MarketingSectionCampaignModalCreateTrackingInput

    """
    Specifies the input fields for tracking when a marketing campaign suggestion is clicked.
    """
    marketingSectionCampaignModalSuggestionSelect: MarketingSectionCampaignModalSuggestionSelectTrackingInput

    """
    Specifies the input fields for tracking when user clicks on an activity to view the dashboard.
    """
    marketingSectionActivityDashboardView: MarketingSectionActivityDashboardViewTrackingInput

    """
    Specifies the input fields for tracking when user clicks on an external activity to view the dashboard.
    """
    marketingSectionExternalActivityDashboardView: MarketingSectionExternalActivityDashboardViewTrackingInput

    """
    Specifies the input fields for tracking when user clicks on view external activities button.
    """
    marketingSectionExternalActivitiesView: MarketingSectionExternalActivitiesViewTrackingInput

    """
    Specifies the input fields for tracking when user clicks on edit a marketing activity.
    """
    marketingSectionActivityEdit: MarketingSectionActivityEditTrackingInput

    """
    Specifies the input fields for tracking when user clicks to select an app or extension from the campaign creation list.
    """
    marketingSectionAppSelect: MarketingSectionAppSelectTrackingInput

    """
    Specifies the input fields for tracking when a user clicks on an app to setup/onboard.
    """
    marketingSectionAppSetup: MarketingSectionAppSetupTrackingInput
  ): MarketingSectionTrackingPayload
  metafieldDelete(input: MetafieldDeleteInput!): MetafieldDeletePayload

  """Dismisses the mobile app banner."""
  mobileAppInstallBannerDismiss: MobileAppInstallBannerDismissPayload

  """Asynchronously add tags to orders in bulk."""
  orderBulkAddTags(
    """
    Search query on which to filter orders. If blank, then operation will apply
    to all orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be operated on. If blank, then operation will apply to all
    orders. This argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]

    """List of tags to be added."""
    tags: [String!]!
  ): OrderBulkAddTagsPayload

  """Asynchronously captures orders in bulk."""
  orderBulkCapture(
    """
    Search query on which to filter orders. If blank, then will apply to all
    orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be captured. If blank, then will apply to all orders. This
    argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]
  ): OrderBulkCapturePayload

  """Asynchronously closes orders in bulk."""
  orderBulkClose(
    """
    Search query on which to filter orders. If blank, then will apply to all
    orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be closed. If blank, then will apply to all orders. This
    argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]
  ): OrderBulkClosePayload

  """Asynchronously fulfills orders in bulk."""
  orderBulkFulfill(
    """
    Search query on which to filter orders. If blank, then will apply to all
    orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be fulfilled. If blank, then will apply to all orders.
    This argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]

    """
    Whether the customer should be notified. If set to `true`, then an email
    will be sent when the fulfillment is created or updated. If not supplied,
    defaults to `false`. For orders that were initially created using the API,
    the default value is also `false`. For all other orders, the default value is true.
    """
    notifyCustomer: Boolean
  ): OrderBulkFulfillPayload

  """Asynchronously opens orders in bulk."""
  orderBulkOpen(
    """
    Search query on which to filter orders. If blank, then will apply to all
    orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be opened. If blank, then will apply to all orders. This
    argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]
  ): OrderBulkOpenPayload

  """Asynchronously remove tags from orders in bulk."""
  orderBulkRemoveTags(
    """
    Search query on which to filter orders. If blank, then operation will apply
    to all orders. This argument must not be supplied if you use the `ids` argument.
    """
    search: String

    """
    List of orders to be operated on. If blank, then operation will apply to all
    orders. This argument must not be supplied if you use the `search` argument.
    """
    ids: [ID!]

    """List of tags to be removed."""
    tags: [String!]!
  ): OrderBulkRemoveTagsPayload

  """
  Given a list of orderIds and a locationId, will create draft shipping labels for the eligible
  orders at that locationId.

  """
  orderBulkShippingLabelsCreate(
    """
    List of orders to begin purchasing shipping labels for. Note: Not all orders
    will necessarily be able to make it into the label purchasing flow dependent on eligibility. You may not
    supply more than 50 orderIds.

    """
    orderIds: [ID!]!

    """The locationId desired for the origin address of the shipping labels."""
    locationId: ID!
  ): OrderBulkShippingLabelsCreatePayload

  """Captures from an authorized transaction on an order."""
  orderCapture(
    """The input for the mutation."""
    input: OrderCaptureInput!
  ): OrderCapturePayload

  """
  Closes an open order.

  """
  orderClose(
    """The input for the mutation."""
    input: OrderCloseInput!
  ): OrderClosePayload

  """
  Marks an order as paid.

  """
  orderMarkAsPaid(
    """The input for the mutation."""
    input: OrderMarkAsPaidInput!
  ): OrderMarkAsPaidPayload

  """
  Opens a closed order.

  """
  orderOpen(
    """The input for the mutation."""
    input: OrderOpenInput!
  ): OrderOpenPayload

  """Updates an order."""
  orderUpdate(
    """The input for the mutation."""
    input: OrderInput!
  ): OrderUpdatePayload

  """Creates a PDF preview of a packing slip template."""
  packingSlipPdfPreview(
    """The packing slip template to use to render the preview."""
    templateBody: String!
  ): PackingSlipPdfPreviewPayload

  """Resets to the default packing slip template."""
  packingSlipTemplateReset: PackingSlipTemplateResetPayload

  """Updates the packing slip template that belongs to a shop."""
  packingSlipTemplateUpdate(
    """
    Body of the packing slip [Liquid](https://help.shopify.com/themes/liquid) template.
    """
    body: LiquidHTML!
  ): PackingSlipTemplateUpdatePayload

  """
  Asynchronously creates a packing slips PDF from a list of PackingSlipInput objects.
  """
  packingSlipsPdfCreate(
    """The input for creating the packing slips."""
    packingSlipsInput: [PackingSlipInput!]!
  ): PackingSlipsPdfCreatePayload

  """
  Disables a payment provider.

  """
  paymentProviderDisable(
    """The ID of the payment provider to disable."""
    id: ID!

    """
    The name of the payment provider to disable - required for custom providers.
    """
    name: String

    """The reason merchant is disabling the payment provider."""
    reason: PaymentProviderDisableReason

    """More details on why the merchant is disabling the payment provider."""
    details: String
  ): PaymentProviderDisablePayload

  """Activate a price rule."""
  priceRuleActivate(
    """ID of the price rule to update."""
    id: ID!
  ): PriceRuleActivatePayload

  """
  Asynchronously activates price rules in bulk.
  **Warning:** all price rules will be activated if no `search` argument is specified.

  """
  priceRuleBulkActivate(
    """Search query for filtering price rules on."""
    search: String
  ): PriceRuleBulkActivatePayload

  """
  Asynchronously deactivates price rules in bulk.
  **Warning:** all price rules will be deactivated if no `search` argument is specified.

  """
  priceRuleBulkDeactivate(
    """Search query for filtering price rules on."""
    search: String
  ): PriceRuleBulkDeactivatePayload

  """
  Asynchronously delete price rules in bulk.
  **Warning:** all price rules will be deleted if no `search` argument is specified.

  """
  priceRuleBulkDelete(
    """Search query for filtering price rules on."""
    search: String
  ): PriceRuleBulkDeletePayload

  """Create a price rule using the input."""
  priceRuleCreate(
    """Input fields to create a price rule."""
    priceRule: PriceRuleInput!

    """Input fields to create a discount code for the price rule."""
    priceRuleDiscountCode: PriceRuleDiscountCodeInput
  ): PriceRuleCreatePayload

  """Deactivate a price rule."""
  priceRuleDeactivate(
    """ID of the price rule to update."""
    id: ID!
  ): PriceRuleDeactivatePayload

  """Delete a price rule."""
  priceRuleDelete(
    """The id of the price rule object."""
    id: ID!
  ): PriceRuleDeletePayload

  """Create a discount code for a price rule."""
  priceRuleDiscountCodeCreate(
    """The id of the price rule object"""
    priceRuleId: ID!

    """The code to create for the price rule."""
    code: String!
  ): PriceRuleDiscountCodeCreatePayload

  """Update a discount code for a price rule."""
  priceRuleDiscountCodeUpdate(
    """The id of the price rule object"""
    priceRuleId: ID!

    """The new code of a price rule."""
    code: String!
  ): PriceRuleDiscountCodeUpdatePayload

  """Update a price rule using its id and an input."""
  priceRuleUpdate(
    """ID of the price rule to update."""
    id: ID!

    """Input fields to update a price rule."""
    priceRule: PriceRuleInput!

    """Input fields to update the discount code of the price rule."""
    priceRuleDiscountCode: PriceRuleDiscountCodeInput
  ): PriceRuleUpdatePayload

  """Appends images to a product."""
  productAppendImages(
    """Specifies the new images and the product that they're being added to."""
    input: ProductAppendImagesInput!
  ): ProductAppendImagesPayload

  """Asynchronously add tags to products in bulk."""
  productBulkAddTags(
    """
    Search query for filtering products on. If blank, then will apply to all products.
    """
    search: String

    """List of new tags."""
    tags: [String!]!
  ): ProductBulkAddTagsPayload

  """Asynchronously add products to collections in bulk."""
  productBulkAddToCollections(
    """Search query for filtering products on."""
    search: String

    """List of collection ids to add the products on."""
    collectionsIds: [ID!]!
  ): ProductBulkAddToCollectionsPayload

  """
  Asynchronously remove products in bulk.
  **Warning:** all products will be deleted if no `search` argument is specified.

  """
  productBulkDelete(
    """Search query for filtering products on."""
    search: String
  ): ProductBulkDeletePayload

  """Asynchronously publish products to publications in bulk."""
  productBulkPublish(
    """Search query for filtering products on."""
    search: String

    """List of publication_ids ids to publish the products on."""
    publicationIds: [ID!]

    """
    List of channel ids to publish the products on. This argument is deprecated: Use PublicationId instead.
    """
    channelIds: [ID!]
  ): ProductBulkPublishPayload

  """Asynchronously remove products from collections in bulk."""
  productBulkRemoveFromCollections(
    """Search query for filtering products on."""
    search: String

    """List of collection ids to remove products from."""
    collectionsIds: [ID!]!
  ): ProductBulkRemoveFromCollectionsPayload

  """Asynchronously remove tags from products in bulk."""
  productBulkRemoveTags(
    """
    Search query for filtering products on. If blank, then will apply to all products.
    """
    search: String

    """List of tags to be removed."""
    tags: [String!]!
  ): ProductBulkRemoveTagsPayload

  """Asynchronously unpublish products in bulk."""
  productBulkUnpublish(
    """Search query for filtering products on."""
    search: String

    """List of publication_ids ids to publish the products on."""
    publicationIds: [ID!]

    """
    List of channel ids to publish the products on. This argument is deprecated: Use PublicationId instead.
    """
    channelIds: [ID!]
  ): ProductBulkUnpublishPayload

  """Creates a product."""
  productCreate(
    """The properties of the new product."""
    input: ProductInput!
  ): ProductCreatePayload

  """Deletes a product."""
  productDelete(
    """Specifies the product to delete by its ID."""
    input: ProductDeleteInput!
  ): ProductDeletePayload

  """Removes a product images from the product."""
  productDeleteImages(
    """This is the ID of the product."""
    id: ID!

    """This is the array of image IDs to delete from the product."""
    imageIds: [ID!]!
  ): ProductDeleteImagesPayload

  """Duplicates a product."""
  productDuplicate(
    """ID of the product to be duplicated."""
    productId: ID!

    """New title of the product."""
    newTitle: String!

    """Whether to duplicate images."""
    includeImages: Boolean = false
  ): ProductDuplicatePayload

  """Updates an image of a product."""
  productImageUpdate(
    """The ID of the product on which to update the image."""
    productId: ID!

    """Image to be updated."""
    image: ImageInput!
  ): ProductImageUpdatePayload

  """Publishes a product."""
  productPublish(
    """Specifies the product to publish and the channels to publish it to."""
    input: ProductPublishInput!
  ): ProductPublishPayload @deprecated(reason: "Use `publishablePublish` instead")

  """Asynchronously reorders a set of images for a given product."""
  productReorderImages(
    """The ID of the product on which to reorder images."""
    id: ID!

    """A list of moves to perform which will be evaluated in order."""
    moves: [MoveInput!]!
  ): ProductReorderImagesPayload

  """Unpublishes a product."""
  productUnpublish(
    """
    Specifies the product to unpublish and the channel to unpublish it from.
    """
    input: ProductUnpublishInput!
  ): ProductUnpublishPayload @deprecated(reason: "Use `publishableUnpublish` instead")

  """Updates a product."""
  productUpdate(
    """The updated properties for a product."""
    input: ProductInput!
  ): ProductUpdatePayload

  """Creates a product variant."""
  productVariantCreate(
    """The properties for the new product variant."""
    input: ProductVariantInput!
  ): ProductVariantCreatePayload

  """Deletes a product variant."""
  productVariantDelete(
    """ID of the product variant to be deleted."""
    id: ID!
  ): ProductVariantDeletePayload

  """Updates a product variant."""
  productVariantUpdate(
    """The updated properties for the product variant."""
    input: ProductVariantInput!
  ): ProductVariantUpdatePayload

  """Publishes a resource to a channel."""
  publishablePublish(
    """The resource to create or update publications for."""
    id: ID!

    """Specifies the input fields required to publish a resource."""
    input: [PublicationInput!]!
  ): PublishablePublishPayload

  """Publishes a resource to current channel."""
  publishablePublishToCurrentChannel(
    """The resource to create or update publications for."""
    id: ID!
  ): PublishablePublishToCurrentChannelPayload

  """Unpublishes a resource to a channel."""
  publishableUnpublish(
    """The resource to delete or update publications for."""
    id: ID!

    """Specifies the input fields required to unpublish a resource."""
    input: [PublicationInput!]!
  ): PublishableUnpublishPayload

  """Unpublishes a resource to current channel."""
  publishableUnpublishToCurrentChannel(
    """The resource to delete or update publications for."""
    id: ID!
  ): PublishableUnpublishToCurrentChannelPayload

  """Creates a refund."""
  refundCreate(
    """The input fields for the mutation."""
    input: RefundInput!
  ): RefundCreatePayload

  """Purchases a return label."""
  returnLabelPurchase(
    """The ID of the return label to be purchased."""
    id: ID!

    """
    Input defining the carrier and service that will be used for this label.
    """
    carrierInput: DeliveryCarrierInput!
  ): ReturnLabelPurchasePayload

  """
  Sends an email to a customer that contains a link to download a return label.
  """
  returnLabelSendEmail(
    """
    The ID of the return label that the customer will be able to download.
    """
    id: ID!

    """The email address of the customer receiving the label."""
    customerEmail: String!
  ): ReturnLabelSendEmailPayload

  """Updates a return label."""
  returnLabelUpdate(
    """The ID of the return label to update."""
    id: ID!

    """Provides updated fields for the return label."""
    returnLabel: DeliveryReturnLabelInput!
  ): ReturnLabelUpdatePayload

  """Creates a saved search."""
  savedSearchCreate(
    """Specifies the input fields for a saved search."""
    input: SavedSearchCreateInput!
  ): SavedSearchCreatePayload

  """Delete a saved search."""
  savedSearchDelete(
    """Input fields to delete a saved search."""
    input: SavedSearchDeleteInput!
  ): SavedSearchDeletePayload

  """Update a saved search."""
  savedSearchUpdate(
    """Input fields to update a saved search."""
    input: SavedSearchUpdateInput!
  ): SavedSearchUpdatePayload

  """
  Creates a new script tag.

  """
  scriptTagCreate(
    """Specifies the input fields for a script tag."""
    input: ScriptTagInput!
  ): ScriptTagCreatePayload

  """
  Deletes a script tag.

  """
  scriptTagDelete(
    """The ID of the script tag to delete."""
    id: ID!
  ): ScriptTagDeletePayload

  """
  Updates a script tag.

  """
  scriptTagUpdate(
    """The ID of the script tag to update."""
    id: ID!

    """Specifies the input fields for a script tag."""
    input: ScriptTagInput!
  ): ScriptTagUpdatePayload

  """
  Updates the association between a Shop and it's digital goods VAT tax Collection.
  """
  shopDigitalGoodsTaxesCollectionUpdate(
    """The ID of the Collection to use as the EU digital goods collection."""
    euDigitalGoodsCollectionId: ID!
  ): ShopDigitalGoodsTaxesCollectionUpdatePayload

  """Upload a new image to the shop."""
  shopImageUpload(image: ImageInput!): ShopImageUploadPayload

  """Sets a milestone to complete."""
  shopMilestoneComplete(
    """The milestone to be completed."""
    milestone: ShopMilestone!
  ): ShopMilestoneCompletePayload

  """Updates the tax settings for a shop."""
  shopTaxSettingsUpdate(
    """The tax setting properties for the shop."""
    input: TaxSettingsInput!
  ): ShopTaxSettingsUpdatePayload

  """
  A balance debit represents the movement of funds away from a Shopify Payments
  account's balance to a target account. This target account is selected depending
  on the reason behind the balance debit.

  """
  shopifyPaymentsBalanceDebit(
    """The amount and currency of the balance debit."""
    amount: MoneyInput!

    """The reason behind the balance debit."""
    reasonCode: ShopifyPaymentsBalanceDebitReasonCode!

    """A summary describing the balance debit."""
    description: String!

    """
    Set of key-value pairs that you can attach to a balance debit. This can be useful for storing additional
    information about the balance debit in a structured format.

    """
    metadata: JSON

    """
    Unique identifier to retry balance debits by guaranteeing a single execution.
    """
    idempotencyKey: String
  ): ShopifyPaymentsBalanceDebitPayload

  """
  Reverse all or a portion of a debit, returning the funds to the Shopify Payments account's balance.

  """
  shopifyPaymentsBalanceDebitReverse(
    """The ID of the debit to reverse."""
    debitId: ID!

    """The amount and currency to reverse from the debit."""
    amount: MoneyInput!

    """A summary of the debit reversal's reason."""
    description: String!

    """
    Set of key-value pairs that you can attach to a debit reversal.
    This can be useful for storing additional information about the reversal in a structured format.

    """
    metadata: JSON

    """
    Unique identifier to retry the reversal attempt by guaranteeing a single execution.
    """
    idempotencyKey: String
  ): ShopifyPaymentsBalanceDebitReversePayload

  """Creates a new invited staff member."""
  staffMemberInvite(
    """Specifies the input fields to invite a staff member."""
    input: StaffMemberInviteInput!
  ): StaffMemberInvitePayload

  """Updates a staff member."""
  staffMemberUpdate(
    """Specifies the staff member to update."""
    id: ID!

    """Specifies the input fields to update a staff member."""
    input: StaffMemberInput!
  ): StaffMemberUpdatePayload
  stagedUploadTargetGenerate(input: StagedUploadTargetGenerateInput!): StagedUploadTargetGeneratePayload

  """Uploads multiple images."""
  stagedUploadTargetsGenerate(input: [StageImageInput!]!): StagedUploadTargetsGeneratePayload

  """Creates a storefront access token."""
  storefrontAccessTokenCreate(input: StorefrontAccessTokenInput!): StorefrontAccessTokenCreatePayload

  """Deletes a storefront access token."""
  storefrontAccessTokenDelete(input: StorefrontAccessTokenDeleteInput!): StorefrontAccessTokenDeletePayload

  """Add tags to a taggable object."""
  tagsAdd(id: ID!, tags: [String!]!): TagsAddPayload

  """Remove tags from a taggable object."""
  tagsRemove(id: ID!, tags: [String!]!): TagsRemovePayload

  """Create a tax override for a collection."""
  taxOverrideAddRegion(
    """The ID of the tax override to add this region to."""
    taxOverrideId: ID!

    """The properties to use when creating the tax override region."""
    taxOverrideRegion: TaxOverrideRegionInput!
  ): TaxOverrideAddRegionPayload

  """Create a tax override for a collection."""
  taxOverrideCreate(
    """The properties to use when creating the tax override."""
    taxOverride: TaxOverrideInput!
  ): TaxOverrideCreatePayload

  """Delete a tax override."""
  taxOverrideDelete(
    """Specifies the tax override to delete."""
    taxOverrideId: ID!
  ): TaxOverrideDeletePayload

  """Delete a tax override region."""
  taxOverrideRegionDelete(
    """Specifies the tax override region to delete."""
    taxOverrideRegionId: ID!
  ): TaxOverrideRegionDeletePayload

  """Updates a set of tax override regions."""
  taxOverrideRegionUpdate(
    """The properties to use to update the tax override region."""
    taxOverrideRegion: TaxOverrideRegionInput!
  ): TaxOverrideRegionUpdatePayload

  """Update a tax override."""
  taxOverrideUpdate(
    """The ID of the tax override to update."""
    id: ID!

    """The properties to use when creating the tax override."""
    taxOverride: TaxOverrideInput!
  ): TaxOverrideUpdatePayload

  """Enable or Disable a tax registration."""
  taxRegistrationUpdate(
    """The list of tax registrations to update."""
    taxRegistrations: [TaxRegistrationInput!]!
  ): TaxRegistrationUpdatePayload

  """Activate a tax service."""
  taxServiceActivate(
    """Tax service to activate."""
    taxServiceId: ID!
  ): TaxServiceActivatePayload

  """Deactivate a tax service."""
  taxServiceDeactivate(
    """Tax service to deactivate."""
    taxServiceId: ID!
  ): TaxServiceDeactivatePayload

  """Creates a timeline comment."""
  timelineCommentCreate(input: TimelineCommentCreateInput!): TimelineCommentCreatePayload

  """Deletes a timeline comment."""
  timelineCommentDelete(input: TimelineCommentDeleteInput!): TimelineCommentDeletePayload

  """Edits a timeline comment."""
  timelineCommentEdit(input: TimelineCommentEditInput!): TimelineCommentEditPayload

  """
  Creates a new webhook subscription.

  """
  webhookSubscriptionCreate(
    """The type of event that triggers the webhook."""
    topic: WebhookSubscriptionTopic!

    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: WebhookSubscriptionInput!
  ): WebhookSubscriptionCreatePayload

  """
  Deletes a webhook subscription.

  """
  webhookSubscriptionDelete(
    """The ID of the webhook subscription to delete."""
    id: ID!
  ): WebhookSubscriptionDeletePayload

  """
  Updates a webhook subscription.

  """
  webhookSubscriptionUpdate(
    """The ID of the webhook subscription to update."""
    id: ID!

    """Specifies the input fields for a webhook subscription."""
    webhookSubscription: WebhookSubscriptionInput!
  ): WebhookSubscriptionUpdatePayload
}

"""Device attributes to report."""
input MutationsDeviceAttributesReportInput {
  """Canvas fingerprint."""
  canvasFingerprint: String!

  """Cookies."""
  hasCookies: Boolean!

  """Installed Fonts."""
  fonts: [String!]!

  """Default language."""
  lang: String

  """Whether or not local storage is available."""
  hasLocalStorage: Boolean!

  """Installed plugins."""
  plugins: [String!]!

  """Screen information."""
  screen: String

  """Whether or not session storage is available."""
  hasSessionStorage: Boolean!

  """Time zone offset."""
  tzOffset: Int

  """User Agent string."""
  userAgent: String
}

"""The set of valid interaction types."""
enum MutationsHomeCardInteractionAction {
  DISMISS
  UNDO_DISMISS
  CLICK
  UPVOTE
  DOWNVOTE
}

"""The action to perform on a tag interaction."""
enum MutationsHomeTagInteractionAction {
  DISMISS
  UNDO_DISMISS
}

"""Specifies the input fields required to create a marketing activity."""
input MutationsMarketingActivityCreateInput {
  """The budget for this marketing activity."""
  budget: MarketingActivityBudgetInput

  """The cumulative amount spent on this marketing activity."""
  adSpend: MoneyInput

  """The current state of the marketing activity."""
  status: MarketingActivityStatus!

  """
  Encoded context provided by Shopify during the create marketing activity callback.
  """
  context: String!

  """
  Specifies the
  [Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
  that are associated with a related marketing campaign. UTMInput is required for all Marketing
  tactics except Storefront App.

  """
  utm: UTMInput
}

type MutationsStagedUploadTargetGenerateUploadParameter {
  name: String!
  value: String!
}

"""
A default cursor for use in pagination.
The default cursor can be used for next and previous navigation.

"""
interface Navigable {
  """A default cursor for use in pagination."""
  defaultCursor: String!
}

"""A navigation item, holding basic link attributes."""
type NavigationItem {
  """The unique identifier of the navigation item."""
  id: String!

  """The name of the navigation item."""
  title: String!

  """The URL of the page that the navigation item links to."""
  url: URL!
}

"""
A navigation item, holding basic link attributes, extra configuration, and nested navigation items.
"""
type NavigationItemV2 {
  """Sub-navigation items for this navigation."""
  children: [NavigationItemV2!]!

  """Flag that indicates if the navigation is disabled or not."""
  disabled: Boolean!

  """
  Extra paths that should be used to not highlight the navigation as selected.
  """
  excludePaths: [String!]!

  """
  Flag indicating that the store front link must be shown within this navigation.
  """
  hasStorefrontLink: Boolean!

  """The SVG icon body to be displayed as the navigation's icon."""
  iconBody: String!

  """The navigation's label to be displayed."""
  label: String!

  """
  Flag indicating that an exact match of the path is required to highlight the navigation.
  """
  matchExactPath: Boolean!

  """
  Extra paths that should be used to highlight the navigation as selected.
  """
  matchPaths: [String!]!

  """The URL that the navigation points to."""
  url: URL!
}

"""Types for navigation item."""
enum NavigationItemV2Type {
  """Navigation items for sales channels."""
  SALES_CHANNEL

  """Primary navigation items for apps."""
  PRIMARY_NAVIGATION
}

"""An object with an ID to support global identification."""
interface Node {
  """Globally unique identifier."""
  id: ID!
}

input NotificationSubscriptionInput {
  """Whether the subscription is enabled."""
  enabled: Boolean!

  """ID of the subscription."""
  id: ID!
}

"""Represents the dimensions of an object."""
input ObjectDimensionsInput {
  """The length in `unit`s."""
  length: Float!

  """The width in `unit`s."""
  width: Float!

  """The height in `unit`s."""
  height: Float!

  """Unit of measurement for `length`, `width`, and `height`."""
  unit: LengthUnit!
}

"""The shop's online store channel."""
type OnlineStore {
  """Available template options based on the published theme."""
  availableTemplateOptions(
    """The template resource type to filter by."""
    resourceType: OnlineStoreTemplateResourceType!
  ): [String!]!

  """The currently published theme."""
  currentTheme: Theme

  """Whether the storefront password is enabled."""
  passwordEnabled: Boolean! @deprecated(reason: "Use `passwordProtection` instead")

  """The URL of the shop's storefront with the password bypass associated."""
  urlWithPasswordBypass: URL!

  """The URL of the shop's storefront with storefront digest."""
  urlWithStorefrontDigest: URL!
}

"""
Represents an article in an OnlineStoreBlog object. Articles appear in reverse chronological order, with the
most recent entry at the top of the blog's page. A blog can contain any number of articles.

"""
type OnlineStoreArticle implements Node {
  """Globally unique identifier."""
  id: ID!
}

type OnlineStoreArticleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OnlineStoreArticleEdge."""
  node: OnlineStoreArticle!
}

"""
Shopify stores come with a built-in blogging engine, allowing a shop to have one or more blogs.  Blogs are meant
to be used as a type of magazine or newsletter for the shop, with content that changes over time.

"""
type OnlineStoreBlog implements Node {
  """Globally unique identifier."""
  id: ID!
}

type OnlineStoreBlogEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OnlineStoreBlogEdge."""
  node: OnlineStoreBlog!
}

"""A custom page on the Online Store."""
type OnlineStorePage implements Node & Navigable {
  """A default cursor for use in pagination."""
  defaultCursor: String!

  """Globally unique identifier."""
  id: ID!
}

type OnlineStorePageEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OnlineStorePageEdge."""
  node: OnlineStorePage!
}

"""Online Store preview URL of the object."""
interface OnlineStorePreviewable {
  """The online store preview URL."""
  onlineStorePreviewUrl: URL
}

"""Possible resource type of a template."""
enum OnlineStoreTemplateResourceType {
  ARTICLE
  BLOG
  COLLECTION
  GIFT_CARD
  PAGE
  PRODUCT
}

"""
An order represents an agreement to do business between a customer and a merchant.
"""
type Order implements Node & CommentEventSubject & LegacyInteroperability {
  """
  Generated messages that appear at the top of an order page in the Shopify admin.
  For example, _this is a test order_.

  """
  alerts: [ResourceAlert!]!

  """
  Mailing address provided by the customer.
  Not all orders have mailing addresses.

  """
  billingAddress: MailingAddress

  """Whether the billing address matches the shipping address."""
  billingAddressMatchesShippingAddress: Boolean!

  """Calculate the exchange to be processed."""
  calculatedExchange(
    """The input params for calculating an exchange."""
    input: ExchangeInput!
  ): CalculatedExchangePayload!

  """Whether the order can be manually marked as paid."""
  canMarkAsPaid: Boolean!

  """
  Reason the order was canceled.
  Returns null if the order wasn't canceled.

  """
  cancelReason: OrderCancelReason

  """
  Date and time when the order was canceled.
  Returns null if the order wasn't canceled.

  """
  cancelledAt: DateTime

  """
  Whether payment for the order can be captured.
  Returns true when the customer's credit card has been authorized for payment and the authorization period has not expired.

  """
  capturable: Boolean!

  """
  Amount of the order-level discount (does not contain any line item discounts).
  """
  cartDiscountAmount: Money @deprecated(reason: "Use `cartDiscountAmountSet` instead")

  """
  Amount of the order-level discount (does not contain any line item discounts) in shop and presentment currencies.
  """
  cartDiscountAmountSet: MoneyBag

  """Channel that created the order."""
  channel: Channel @deprecated(reason: "Use `publication` instead")

  """The ip address of the client that is associated with this order."""
  clientIp: String

  """Whether the order is closed."""
  closed: Boolean!

  """
  Date and time when the order closed.
  If the order is not closed, then this field is null.

  """
  closedAt: DateTime

  """Whether inventory has been reserved for the order."""
  confirmed: Boolean!

  """Date and time when the order was created in Shopify."""
  createdAt: DateTime!

  """
  The currency of the store at the time of the order.
  If payment hasn't occurred, then this field is null.

  """
  currencyCode: CurrencyCode!

  """
  Custom information added to the order by your customer
          (Also referred to as note attributes).
  """
  customAttributes: [Attribute!]!

  """
  Unique identifier of the customer who placed the order.
  Not all orders have customers associated with them.

  """
  customer: Customer

  """Whether the customer agreed to receive marketing materials."""
  customerAcceptsMarketing: Boolean!

  """
  Description of the customer's experience with the store leading up to the order.

  """
  customerJourney: CustomerJourney

  """
  A two-letter or three-letter language code, optionally followed by a region modifier.
  Example values could be 'en', 'en-CA', 'en-PIRATE'.

  """
  customerLocale: String

  """Discounts that have been applied on the order."""
  discountApplications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DiscountApplicationConnection!

  """Discount code provided by the customer."""
  discountCode: String

  """Primary address of the customer, which is shown on the order."""
  displayAddress: MailingAddress

  """
  Financial status of the order that can be shown to the merchant.
  This field does not capture all the possible details of an order's financial
  state and should only be used for display summary purposes.

  """
  displayFinancialStatus: OrderDisplayFinancialStatus

  """
  Fulfillment status for the order that can be shown to the merchant.
  This field does not capture all the possible details of an order's fulfillment
  state. It should only be used for display summary purposes.

  """
  displayFulfillmentStatus: OrderDisplayFulfillmentStatus!

  """
  Summary of each dispute associated with the order. Sorted in ascending (ASC) order by ID.
  """
  disputes: [OrderDisputeSummary!]!

  """
  List of possible fulfilments that can be made for the order (includes line items that can be partially fulfilled).

  """
  draftFulfillments: [DraftFulfillment!]!

  """Email address provided by the customer."""
  email: String

  """List of internal events associated with the order."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `comments`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): EventConnection!

  """
  Whether there are items that can be fulfilled.
  After an order is completely fulfilled (or completely refunded without any fulfillments) then this field returns false.

  """
  fulfillable: Boolean!

  """List of shipments for the order."""
  fulfillments(
    """Truncate the array result to this size."""
    first: Int
  ): [Fulfillment!]!

  """
  List of fulfillments with pagination and basic SQL filtering support.

  """
  fulfillmentsV2(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: FulfillmentSortKeys = ID

    """
    Supported filter parameters:
     - `tracking_company`
     - `shipment_status`
     - `estimated_delivery_at`
     - `status`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): FulfillmentConnection!

  """Whether the order has been paid in full."""
  fullyPaid: Boolean!

  """Whether the merchant added timeline comments to the order."""
  hasTimelineComment: Boolean!

  """Globally unique identifier."""
  id: ID!

  """
  First page of the online store that the customer visited before they submitted the order, for displaying to humans.
  """
  landingPageDisplayText: String @deprecated(reason: "Use `customerJourney.lastVisit.landingPageHtml` instead")

  """
  First page of the online store that the customer visited before they submitted the order.
  """
  landingPageUrl: URL @deprecated(reason: "Use `customerJourney.lastVisit.landingPage` instead")

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """List of the order's line items."""
  lineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LineItemConnection!

  """
  If the order was processed using Shopify POS, then this is its location as provided by the merchant.

  """
  location: String @deprecated(reason: "Use `physicalLocation` instead")

  """Marketing attribution details for the order, if available."""
  marketingAttribution: MarketingAttribution @deprecated(reason: "Use `customerJourney.firstVisit` or `customerJourney.lastVisit` instead.\n`customerJourney.firstVisit` will be consistent with the current behavior.\n")

  """
  Unique identifier for the order that appears on the order.
  For example, _#1000_ or _Store1001.
  This value is not unique across multiple stores.

  """
  name: String!

  """
  Net payment for the order, based on the total amount received - total amount refunded.

  """
  netPayment: Money! @deprecated(reason: "Use `netPaymentSet` instead")

  """
  Net payment for the order, based on the total amount received - total amount refunded in shop and presentment currencies.
  """
  netPaymentSet: MoneyBag!

  """
  Line items that can't be fulfilled.
  For example, because some or all of the items have been refunded, or the item
  is not one which can be fulfilled, such as a tip.
  These line items would be 'lost' if you only considered the line items in draft fulfillments or fulfillments.

  """
  nonFulfillableLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): LineItemConnection!

  """
  Contents of the note associated with the order.

  """
  note: String

  """
  List of all payment gateways used for the order.
  For example, _authorize_net_ and _Cash on Delivery (COD)_.

  """
  paymentGatewayNames: [String!]!

  """
  Phone number provided by the customer.

  """
  phone: String

  """
  If the order was processed using Shopify POS, then this is its location as provided by the merchant.

  """
  physicalLocation: Location

  """The payment currency of the customer for this order."""
  presentmentCurrencyCode: CurrencyCode!

  """
  Date and time when the order was processed.
  When orders are imported from an app, this date and time may not match the date and time when the order was created.

  """
  processedAt: DateTime!

  """Publication that created the order."""
  publication: Publication

  """
  Marketing referral code from the link that the customer clicked to visit your store.
  Supports the following URL attributes: _ref_, _source_, or _r_. For example,
  if the URL is myshopifystore.com/products/slide?ref=j2tj1tn2, then this value is j2tj1tn2.

  """
  referralCode: String @deprecated(reason: "Use `customerJourney.lastVisit.referralCode` instead")

  """
  Website that sent the customer to your online store.

  """
  referrerDisplayText: String @deprecated(reason: "Use `customerJourney.lastVisit.referralInfoHtml` instead")

  """
  Webpage where the customer clicked a link that sent them to your online store.
  For example, _Google_ or _randomblog.com/page1_.

  """
  referrerUrl: URL @deprecated(reason: "Use `customerJourney.lastVisit.referrerUrl` instead")

  """
  Whether the order can be refunded.

  """
  refundable: Boolean!

  """
  List of refunds that have been applied to the order.

  """
  refunds(
    """Truncate the array result to this size."""
    first: Int
  ): [Refund!]!

  """
  Whether any line item in the order requires physical shipping.

  """
  requiresShipping: Boolean!

  """
  Whether the order can be restocked.

  """
  restockable: Boolean!

  """Fraud risk level of the order."""
  riskLevel: OrderRiskLevel!

  """The order risks associated with this order."""
  risks(
    """Truncate the array result to this size."""
    first: Int
  ): [OrderRisk!]!

  """Mailing address for shipping provided by the customer."""
  shippingAddress: MailingAddress

  """Line item that contains the shipping costs."""
  shippingLine: ShippingLine

  """
  The sum of the quantities for the line items that contribute to the order's subtotal.
  """
  subtotalLineItemsQuantity: Int!

  """
  Subtotal of the line items and their discounts (does not contain shipping
  costs, shipping discounts, and order-level discounts).

  """
  subtotalPrice: Money @deprecated(reason: "Use `subtotalPriceSet` instead")

  """
  Subtotal of the line items and their discounts (does not contain shipping
  costs, shipping discounts, and order-level discounts) in shop and presentment currencies.
  """
  subtotalPriceSet: MoneyBag

  """
  The details of the suggested refund. This response can be used to submit a RefundCreate mutation.
  """
  suggestedRefund(
    """The amount to refund for shipping. Overrides `refundShipping`."""
    shippingAmount: Money

    """
    The amount to refund for shipping, with currency in either the shop or presentment currency. Overrides `refundShipping`.

    """
    shippingAmountV2: MoneyInput

    """Whether to refund the full shipping amount."""
    refundShipping: Boolean

    """The line items from the order to include in the refund."""
    refundLineItems: [RefundLineItemInput!]

    """
    Whether a refund for all of the refundable line items on an order should be suggested.
    If `true`, the suggested refund will be formed from all refundable line items and will
    ignore any passed in `refundLineItems`.

    """
    suggestFullRefund: Boolean = false
  ): SuggestedRefund

  """List of tags."""
  tags: [String!]!

  """Taxes charged for the line item."""
  taxLines: [TaxLine!]!

  """Whether taxes are included in the subtotal price of the order."""
  taxesIncluded: Boolean!

  """
  Whether the order is a test.
  Test orders are made using the Shopify Bogus Gateway or the Shopify Payments test mode.

  """
  test: Boolean!

  """Amount authorized for the order, that is uncaptured or undercaptured."""
  totalCapturable: Money! @deprecated(reason: "Use `totalCapturableSet` instead")

  """
  Amount authorized for the order, that is uncaptured or undercaptured in shop and presentment currencies.
  """
  totalCapturableSet: MoneyBag!

  """
  Total amount discounted from the order (includes order-level and line item discounts).
  """
  totalDiscounts: Money @deprecated(reason: "Use `totalDiscountsSet` instead")

  """
  Total amount discounted from the order (includes order-level and line item discounts) in shop and presentment currencies.
  """
  totalDiscountsSet: MoneyBag

  """Total amount of the order (includes taxes and discounts)."""
  totalPrice: Money! @deprecated(reason: "Use `totalPriceSet` instead")

  """
  Total amount of the order (includes taxes and discounts) in shop and presentment currencies.
  """
  totalPriceSet: MoneyBag!

  """Total amount received by the customer for the order."""
  totalReceived: Money! @deprecated(reason: "Use `totalReceivedSet` instead")

  """
  Total amount received by the customer for the order in shop and presentment currencies.
  """
  totalReceivedSet: MoneyBag!

  """Total amount refunded for the order."""
  totalRefunded: Money! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  Total amount refunded for the order in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """
  Total amount refunded for shipping in shop and presentment currencies.
  """
  totalRefundedShippingSet: MoneyBag!

  """Total amount charged for shipping the order."""
  totalShippingPrice: Money! @deprecated(reason: "Use `totalShippingPriceSet` instead")

  """
  Total amount charged for shipping the order in shop and presentment currencies.
  """
  totalShippingPriceSet: MoneyBag!

  """Total of all taxes applied to the order."""
  totalTax: Money @deprecated(reason: "Use `totalTaxSet` instead")

  """
  Total of all taxes applied to the order in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag

  """Total weight (grams) of the order."""
  totalWeight: UnsignedInt64

  """List of all transactions associated with the order."""
  transactions(
    """
    Filter transactions by whether they are capturable.
    If true, then returns only transactions that represent an authorized payment that can be captured.
    If false, then returns all transactions.

    """
    capturable: Boolean

    """
    Filter transactions by whether they are manual payments.
    If true, then returns only transactions that are manual payments. If false, then returns all transactions.

    """
    manuallyResolvable: Boolean

    """Truncate the array result to this size."""
    first: Int
  ): [OrderTransaction!]!

  """
  List groups of unfulfilled line items in an order with a supported fulfillment methods.

  """
  unfulfilledLineItemsByLocations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): UnfulfilledLineItemsByLocationConnection!

  """
  Whether no payments have been made for the order.
  If no payments have been made for the order, then this returns true.

  """
  unpaid: Boolean!

  """Date and time when the order was last modified."""
  updatedAt: DateTime!
}

type OrderBulkAddTagsPayload {
  """The asynchronous job adding the new tags to the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkCapturePayload {
  """The asynchronous job capturing the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkClosePayload {
  """The asynchronous job closing the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkFulfillPayload {
  """The asynchronous job fulfilling the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkOpenPayload {
  """The asynchronous job opening the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkRemoveTagsPayload {
  """The asynchronous job removing the tags from the orders."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderBulkShippingLabelsCreatePayload {
  """
  A convenient helper URL for use in webviews. Visiting this URL will show you the label
  purchasing flow within the web admin for the draft shipping_labels returned.

  """
  labelPurchasingUrl: URL

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents the reason that the order is being canceled. Valid values are: customer, fraud, inventory, declined, other.
"""
enum OrderCancelReason {
  """The customer wanted to cancel the order."""
  CUSTOMER

  """The order was fraudulent."""
  FRAUD

  """There was insufficient inventory."""
  INVENTORY

  """Payment was declined."""
  DECLINED

  """Some other reason not listed."""
  OTHER
}

"""
Specifies the authorized transaction to capture and the total amount to capture from it.
"""
input OrderCaptureInput {
  """The ID of the order to capture."""
  id: ID!

  """The ID of the authorized transaction to capture."""
  parentTransactionId: ID!

  """The amount to capture."""
  amount: Money!

  """
  The currency (in ISO format) that is used to capture the order. This must be
  the presentment currency (the currency used by the customer) and is a required
  field for orders where the currency and presentment currency differ.
  """
  currency: CurrencyCode
}

type OrderCapturePayload {
  """The transaction of the capture."""
  transaction: OrderTransaction

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies an open order to close."""
input OrderCloseInput {
  """The ID of the order to close."""
  id: ID!
}

type OrderClosePayload {
  """The closed order."""
  order: Order

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Represents the order's current financial status."""
enum OrderDisplayFinancialStatus {
  """Displayed as **Pending**."""
  PENDING

  """Displayed as **Authorized**."""
  AUTHORIZED

  """Displayed as **Partially paid**."""
  PARTIALLY_PAID

  """Displayed as **Partially refunded**."""
  PARTIALLY_REFUNDED

  """Displayed as **Voided**."""
  VOIDED

  """Displayed as **Paid**."""
  PAID

  """Displayed as **Refunded**."""
  REFUNDED
}

"""
Represents the order's current fulfillment status. Valid values are: unfulfilled, partial, fulfilled, restocked.
"""
enum OrderDisplayFulfillmentStatus {
  """Displayed as **Unfulfilled**."""
  UNFULFILLED

  """Displayed as **Partially fulfilled**."""
  PARTIALLY_FULFILLED

  """Displayed as **Fulfilled**."""
  FULFILLED

  """Displayed as **Restocked**."""
  RESTOCKED

  """Displayed as **Pending fulfillment**."""
  PENDING_FULFILLMENT

  """Displayed as **Open**."""
  OPEN
}

"""A summary of the important details for a dispute on an order."""
type OrderDisputeSummary implements Node {
  """Globally unique identifier."""
  id: ID!

  """The type that the dispute was initiated as."""
  initiatedAs: DisputeType!

  """The current status of the dispute."""
  status: DisputeStatus!
}

type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderEdge."""
  node: Order!
}

"""Specifies the information to be updated on the requested order."""
input OrderInput {
  """The email address associated with the order."""
  email: String

  """The ID of the order to update."""
  id: ID!

  """The order note."""
  note: String

  """The order tags."""
  tags: [String!]

  """The shipping address associated with the order."""
  shippingAddress: MailingAddressInput
}

"""Specifies the order to mark as paid."""
input OrderMarkAsPaidInput {
  """The ID of the order to mark as paid."""
  id: ID!
}

type OrderMarkAsPaidPayload {
  """The order marked as paid."""
  order: Order

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies a closed order to open."""
input OrderOpenInput {
  """The ID of the order to open."""
  id: ID!
}

type OrderOpenPayload {
  """The opened order."""
  order: Order

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a fraud check on an order."""
type OrderRisk {
  """
  Whether the risk level is shown in the Shopify admin. If false, then this
  order risk is ignored when Shopify determines the overall risk level for the order.
  """
  display: Boolean!

  """
  The likelihood that an order is fraudulent, based on this order risk.

  The level can be set by Shopify risk analysis or by an app.

  """
  level: OrderRiskLevel

  """The risk message that's shown to the merchant in the Shopify admin."""
  message: String
}

"""The likelihood that an order is fraudulent."""
enum OrderRiskLevel {
  LOW
  MEDIUM
  HIGH
}

"""
List of possible values for an OrderRiskRecommendation recommendation.
"""
enum OrderRiskRecommendationResult {
  CANCEL
  INVESTIGATE
  ACCEPT
  NONE
}

"""The set of valid sort keys for the orders query."""
enum OrderSortKeys {
  """Sort by the `order_number` value."""
  ORDER_NUMBER

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `financial_status` value."""
  FINANCIAL_STATUS

  """Sort by the `fulfillment_status` value."""
  FULFILLMENT_STATUS

  """Sort by the `total_price` value."""
  TOTAL_PRICE

  """Sort by the `customer_name` value."""
  CUSTOMER_NAME

  """Sort by the `processed_at` value."""
  PROCESSED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""A transaction represents an exchange of money as part of an order."""
type OrderTransaction implements Node {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of money."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The amount and currency of the transaction in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The amount and currency of the transaction."""
  amountV2: MoneyV2! @deprecated(reason: "Use `amountSet` instead")

  """Authorization code associated with the transaction."""
  authorizationCode: String

  """Date and time when the transaction was created."""
  createdAt: DateTime!

  """A standardized error code, independent of the payment provider."""
  errorCode: OrderTransactionErrorCode

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """The payment gateway used to process the transaction."""
  gateway: String

  """Globally unique identifier."""
  id: ID!

  """The kind of transaction."""
  kind: OrderTransactionKind!

  """Whether the transaction can be manually captured."""
  manuallyCapturable: Boolean

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableV2` instead")

  """
  Specifies the available amount with currency to refund on the gateway.
  Only available within SuggestedRefund.

  """
  maximumRefundableV2: MoneyV2

  """The associated order."""
  order: Order

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction

  """Specifies the payment icon to display for this transaction."""
  paymentIcon(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """Specifies the credit card company used to pay for this transaction."""
  paymentMethod: PaymentMethods @deprecated(reason: "Use `paymentIcon` instead")

  """Returns the payment provider for the transaction."""
  paymentProvider: PaymentProvider

  """
  A transaction receipt attached to the transaction by the gateway.
  The value of this field depends on which gateway processed the transaction.

  """
  receipt: String

  """The status of this transaction."""
  status: OrderTransactionStatus!

  """Whether the transaction is a test transaction."""
  test: Boolean!

  """
  Specifies the available amount to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.

  """
  totalUnsettled: Money @deprecated(reason: "Use `totalUnsettledSet` instead")

  """
  Specifies the available amount with currency to capture on the gateway in shop and presentment currencies.
  Only available when an amount is capturable or manually mark as paid.

  """
  totalUnsettledSet: MoneyBag

  """
  Specifies the available amount with currency to capture on the gateway.
  Only available when an amount is capturable or manually mark as paid.

  """
  totalUnsettledV2: MoneyV2 @deprecated(reason: "Use `totalUnsettledSet` instead")

  """
  Staff member who was logged into the Shopify POS device when the transaction was processed.
  """
  user: StaffMember
}

type OrderTransactionConnection {
  """A list of edges."""
  edges: [OrderTransactionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type OrderTransactionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of OrderTransactionEdge."""
  node: OrderTransaction!
}

"""A standardized error code, independent of the payment provider."""
enum OrderTransactionErrorCode {
  """The card number is incorrect."""
  INCORRECT_NUMBER

  """The format of the card number is incorrect."""
  INVALID_NUMBER

  """The format of the expiry date is incorrect."""
  INVALID_EXPIRY_DATE

  """The format of the CVC is incorrect."""
  INVALID_CVC

  """The card is expired."""
  EXPIRED_CARD

  """The CVC does not match the card number."""
  INCORRECT_CVC

  """The ZIP or postal code does not match the card number."""
  INCORRECT_ZIP

  """The address does not match the card number."""
  INCORRECT_ADDRESS

  """The entered PIN is incorrect."""
  INCORRECT_PIN

  """The card was declined."""
  CARD_DECLINED

  """There was an error while processing the payment."""
  PROCESSING_ERROR

  """Call the card issuer."""
  CALL_ISSUER

  """
  The card has been reported as lost or stolen, and the card issuer has
  requested that the merchant keep the card and call the number on the back.

  """
  PICK_UP_CARD

  """There is an error in the gateway or merchant configuration."""
  CONFIG_ERROR

  """A real card was used but the gateway was in test mode."""
  TEST_MODE_LIVE_CARD

  """
  The gateway or merchant configuration doesn't support a feature, such as network tokenization.
  """
  UNSUPPORTED_FEATURE

  """There was an unknown error with processing the payment."""
  GENERIC_ERROR

  """The payment method is not available in the customer's country."""
  INVALID_COUNTRY

  """The amount is either too high or too low for the provider."""
  INVALID_AMOUNT

  """The payment method is momentarily unavailable."""
  PAYMENT_METHOD_UNAVAILABLE

  """The payment method was invalid."""
  AMAZON_PAYMENTS_INVALID_PAYMENT_METHOD

  """The maximum amount has been captured."""
  AMAZON_PAYMENTS_MAX_AMOUNT_CHARGED

  """The maximum amount has been refunded."""
  AMAZON_PAYMENTS_MAX_AMOUNT_REFUNDED

  """The maximum of 10 authorizations has been captured for an order."""
  AMAZON_PAYMENTS_MAX_AUTHORIZATIONS_CAPTURED

  """The maximum of 10 refunds has been processed for an order."""
  AMAZON_PAYMENTS_MAX_REFUNDS_PROCESSED

  """The order was canceled, which canceled all open authorizations."""
  AMAZON_PAYMENTS_ORDER_REFERENCE_CANCELED

  """The order was not confirmed within three hours."""
  AMAZON_PAYMENTS_STALE
}

"""Specifies the information needed to create an order transaction."""
input OrderTransactionInput {
  """The amount of money for this transaction."""
  amount: Money!

  """The payment gateway to use for this transaction."""
  gateway: String!

  """The kind of transaction."""
  kind: OrderTransactionKind!

  """The ID of the order associated with the transaction."""
  orderId: ID!

  """
  The ID of the optional parent transaction, for example the authorization of a capture.
  """
  parentId: ID
}

"""The different kinds of order transactions."""
enum OrderTransactionKind {
  """An authorization and capture performed together in a single step."""
  SALE

  """
  A transfer of the money that was reserved during the authorization stage.
  """
  CAPTURE

  """
  An amount reserved against the cardholder's funding source.
  Money does not change hands until the authorization is captured.

  """
  AUTHORIZATION

  """A cancellation of a pending authorization or capture."""
  VOID

  """
  A partial or full return of captured funds to the cardholder.
  A refund can happen only after a capture is processed.

  """
  REFUND

  """Money returned to the customer when they have paid too much."""
  CHANGE

  """An authorization for a payment taken with an EMV credit card reader."""
  EMV_AUTHORIZATION

  """A suggested refund transaction that can be used to create a refund."""
  SUGGESTED_REFUND
}

"""Transaction status' describe the status of a transaction."""
enum OrderTransactionStatus {
  """The transaction succeeded."""
  SUCCESS

  """The transaction failed."""
  FAILURE

  """The transaction is pending."""
  PENDING

  """There was an error while processing the transaction."""
  ERROR

  """Awaiting a response."""
  AWAITING_RESPONSE
}

type OrderUpdatePayload {
  """The updated order."""
  order: Order

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""This specifies the fields for a packing slip."""
input PackingSlipInput {
  """The id of the order for this packing slip."""
  orderId: ID!

  """The line items included on the packing slip."""
  lineItems: [PackingSlipInputLineItemInput!]!
}

"""This is the input for an individual line item on a packing slip."""
input PackingSlipInputLineItemInput {
  """Line item id."""
  id: ID!

  """The quantity of this line item on the packing slip."""
  shippingQuantity: Int!
}

type PackingSlipPdfPreviewPayload {
  """Asynchronous job creating the packing slip preview PDF."""
  job: Job

  """
  Unique identifier for the generated packing slip PDF.
  To be passed as an argument to the query to be run upon job completion.

  """
  pdfIdentifier: String

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type PackingSlipsPdfCreatePayload {
  """The asynchronous job creating the packing slip PDF."""
  job: Job

  """
  The unique identifier for the generated packing slips pdf. Use when polling along with job id.
  """
  pdfIdentifier: String

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The packing slip template that belongs to a shop."""
type PackingSlipTemplate {
  """
  Body of the packing slip [Liquid](https://help.shopify.com/themes/liquid) template.
  """
  body: LiquidHTML!

  """Boolean indicating if this is the default template."""
  defaultTemplate: Boolean!
}

type PackingSlipTemplateResetPayload {
  """The default packing slip template."""
  packingSlipTemplate: PackingSlipTemplate

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type PackingSlipTemplateUpdatePayload {
  """The updated packing slip template."""
  packingSlipTemplate: PackingSlipTemplate

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Information about pagination in a connection."""
type PageInfo {
  """Indicates if there are more pages to fetch."""
  hasNextPage: Boolean!

  """Indicates if there are any pages prior to the current page."""
  hasPreviousPage: Boolean!
}

"""Page size for a printable asset (eg: shipping label)."""
enum PageSize {
  PAGE_8_X_11
  PAGE_4_X_6
}

"""Holds all the payment authorization settings for the shop."""
type PaymentAuthorizationSettings implements Node {
  """
  Email notifications are enabled when authorizations are close to expiring.
  """
  enableAuthorizationsExpiryNotifications: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The processing method for all payments."""
  processingMethod: PaymentProcessingMethod!
}

"""Represents details of a payment method."""
type PaymentMethod {
  """The name of the payment method."""
  name: String!

  """The credit card rates."""
  rates: [PaymentMethodRate!]

  """The type of payment method."""
  type: PaymentMethodType!
}

"""Represents details of a payment method configuration."""
type PaymentMethodConfiguration {
  """Whether the payment method is enabled."""
  enabled: Boolean!

  """Identifier for the payment method."""
  name: String!

  """The type of payment method."""
  type: PaymentMethodType!
}

"""All the available credit card rate types and values."""
type PaymentMethodRate {
  """The type or differentiator of the rate."""
  differentiator: RateDifferentiator!

  """The credit card flat fee."""
  flatFee: MoneyV2!

  """The credit card rate."""
  rate: Float!
}

"""List of payment methods used in Shopify"""
enum PaymentMethods {
  VISA
  MASTERCARD
  DISCOVER
  AMERICAN_EXPRESS
  DINERS_CLUB
  JCB
  DANKORT
  MAESTRO
  FORBRUGSFORENINGEN
  PAYPAL
  BOGUS
  BITCOIN
  LITECOIN
  DOGECOIN
}

"""Type of payment method."""
enum PaymentMethodType {
  """Credit Card."""
  CREDIT_CARD

  """Accelerated Checkout."""
  WALLET

  """Local Payment Method."""
  LPM
}

"""The available payment processing methods."""
enum PaymentProcessingMethod {
  """Manually capture payment for orders."""
  MANUAL

  """Automatically capture payment for orders."""
  AUTO
}

"""Represents payment providers."""
type PaymentProvider implements Node {
  """Label for the attachment field."""
  attachment: String

  """Whether the provider accepts refunds."""
  canRefund: Boolean!

  """Provider configuration for this shop."""
  configuration: PaymentProviderConfiguration

  """Supported countries of the provider."""
  countries: [CountryCode!]!

  """Labels for credentials fields."""
  credentials: [PaymentProviderCredentialLabel!]!

  """Discounted transaction fee while the shop is in trial."""
  discountedTransactionFee: Float!

  """Discount transaction fee end date for the shop on trial."""
  discountedTransactionFeeEndAt: DateTime!

  """Is the shop eligible for the provider."""
  eligible: Boolean!

  """The group of the provider."""
  group: ProviderGroup!

  """Globally unique identifier."""
  id: ID!

  """The display name of the provider."""
  name: String!

  """The payment methods of the provider."""
  paymentMethods: [PaymentMethod!]!

  """Does the provider offer a test mode."""
  testModeAvailable: Boolean!

  """Transaction fee for the shop."""
  transactionFee: Float!

  """The url of the provider."""
  url: URL
}

"""Holds all payment provider configuration information."""
type PaymentProviderConfiguration implements Node {
  """The attachment for the gateway."""
  attachment: String

  """Payment provider credentials provided by the merchant."""
  credentials: [PaymentProviderCredential!]!

  """The status of the gateway."""
  enabled: Boolean!

  """Extra settings for the gateway such as checkboxes or radio buttons."""
  extraSettings: [Attribute!]!

  """Globally unique identifier."""
  id: ID!

  """Payment methods that are active."""
  paymentMethods: [PaymentMethodConfiguration!]!

  """Provider info for the gateway."""
  provider: PaymentProvider!

  """Status of test mode for the gateway."""
  testModeEnabled: Boolean!
}

type PaymentProviderConnection {
  """A list of edges."""
  edges: [PaymentProviderEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Payment gateway credentials."""
type PaymentProviderCredential {
  """Credential identifier."""
  index: Int!

  """Credential text label."""
  label: String!

  """
  Check if this credential is sensitive, like passwords or private tokens.
  """
  sensitive: Boolean!

  """Credential value. Note that sensitive credentials are returned null."""
  value: String
}

"""Represents the description of each credential."""
type PaymentProviderCredentialLabel {
  """Credential identifier."""
  index: Int!

  """Credential label."""
  label: String!
}

type PaymentProviderDisablePayload {
  """The global id of the disabled payment provider."""
  disabledPaymentProviderId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Reasons for disabling Shopify Payments provider."""
enum PaymentProviderDisableReason {
  """Rates are too expensive."""
  RATES_ARE_TOO_EXPENSIVE

  """Payout times are too slow."""
  PAYOUT_TIMES_ARE_TOO_SLOW

  """Product is prohibited."""
  PRODUCT_IS_PROHIBITED

  """In-person selling is not supported."""
  IN_PERSON_SELLING_IS_NOT_SUPPORTED

  """Fraud tools don’t support business needs."""
  FRAUD_TOOLS_DON_T_SUPPORT_BUSINESS_NEEDS

  """Preferred currency is not available."""
  PREFERRED_CURRENCY_IS_NOT_AVAILABLE

  """Integration with third party systems is not possible."""
  INTEGRATION_WITH_THIRD_PARTY_SYSTEMS_IS_NOT_POSSIBLE

  """Other."""
  OTHER
}

type PaymentProviderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PaymentProviderEdge."""
  node: PaymentProvider!
}

"""Settings related to payments."""
type PaymentSettings {
  """List of the digital wallets which the shop supports."""
  supportedDigitalWallets: [DigitalWallet!]!
}

"""A POS link registered by an app."""
type PosLink {
  """The app that registered this link."""
  app: App!

  """The layout of the displayed link."""
  layout: PosLinkLayout!

  """The text displayed by the link."""
  text: String!

  """The URL the link points to."""
  url: URL!
}

"""Available layouts for a POS link."""
enum PosLinkLayout {
  MODAL
  FULLSCREEN
}

"""Resource locations for a POS link."""
enum PosLinkResourceLocation {
  EDIT
  COMPLETE
}

"""Resource types for a POS link."""
enum PosLinkResourceType {
  CARTS
  ORDERS
}

"""
Price rules are a set of conditions, including entitlements and prerequisites,
that must be met in order for a discount code to apply.
"""
type PriceRule implements Node & CommentEventSubject & LegacyInteroperability {
  """
  The maximum number of times the price rule will be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod!

  """The application that created the price rule."""
  app: App

  """When the price rule was created."""
  createdAt: DateTime!

  """A selection of customers for whom the price rule applies."""
  customerSelection: PriceRuleCustomerSelection!

  """List of the price rule's discount codes."""
  discountCodes(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DiscountCodeSortKeys = ID

    """
    Supported filter parameters:
     - `times_used`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): PriceRuleDiscountCodeConnection!

  """How many discount codes associated with the price rule."""
  discountCodesCount: Int!

  """When the price rule expires, or never if null."""
  endsAt: DateTime

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  entitlementToPrerequisiteQuantityRatio: PriceRuleEntitlementToPrerequisiteQuantityRatio @deprecated(reason: "Use `prerequisiteToEntitlementQuantityRatio` instead")

  """The paginated list of events associated with the price rule."""
  events(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: EventSortKeys = ID

    """
    Supported filter parameters:
     - `created_at`
     - `comments`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): EventConnection!

  """A list of features used by the price rule."""
  features: [PriceRuleFeature!]!

  """
  Indicates whether or not any timeline comments have been made on the price rule.
  """
  hasTimelineComment: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The items to which the price rule applies."""
  itemEntitlements: PriceRuleItemEntitlements!

  """The line item objects required for the price rule to be applicable."""
  itemPrerequisites: PriceRuleLineItemPrerequisites!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean!

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRange

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRange

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRange

  """
  Quantity of prerequisite items required for the price rule to be applicable,  compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatio

  """The url used to share the discount."""
  shareableUrl: URL @deprecated(reason: "Use `shareableUrls` instead")

  """URLs that can be used to share the discount."""
  shareableUrls: [PriceRuleShareableUrl!]!

  """The shipping lines to which the price rule applies."""
  shippingEntitlements: PriceRuleShippingLineEntitlements!

  """When the price rule is starting to be active."""
  startsAt: DateTime!

  """The status of the price rule."""
  status: PriceRuleStatus!

  """A summary of the price rule."""
  summary: String

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget!

  """The title of the price rule."""
  title: String!

  """The total sales brought by the price rule."""
  totalSales: MoneyV2

  """A list of features used by the price rule."""
  traits: [PriceRuleTrait!]! @deprecated(reason: "Use `features` instead")

  """How many times the price rule has been used."""
  usageCount: Int!

  """The maximum number of times the price rule can be applied."""
  usageLimit: Int

  """A time period during which a price rule is applicable."""
  validityPeriod: PriceRuleValidityPeriod!

  """The value of the price rule."""
  value: PriceRuleValue! @deprecated(reason: "Use `valueV2` instead")

  """The value of the price rule."""
  valueV2: PricingValue!
}

type PriceRuleActivatePayload {
  """The activated price rule."""
  priceRule: PriceRule

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""
The method by which the price rule's value is allocated to its entitled items.
"""
enum PriceRuleAllocationMethod {
  """The value will be applied to each of the entitled items."""
  EACH

  """The value will be applied once across the entitled items."""
  ACROSS
}

type PriceRuleBulkActivatePayload {
  """The asynchronous job activating the price rules."""
  job: Job!

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleBulkDeactivatePayload {
  """The asynchronous job deactivating the price rules."""
  job: Job!

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleBulkDeletePayload {
  """The asynchronous job removing the price rules."""
  job: Job!

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleConnection {
  """A list of edges."""
  edges: [PriceRuleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type PriceRuleCreatePayload {
  """The newly created price rule."""
  priceRule: PriceRule

  """The newly created discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""A selection of customers for whom the price rule applies."""
type PriceRuleCustomerSelection {
  """List of customers to whom the price rule applies."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `total_spent`
     - `orders_count`
     - `order_date`
     - `accepts_marketing`
     - `last_abandoned_order_date`
     - `state`
     - `country`
     - `email`
     - `phone`
     - `customer_date`
     - `updated_at`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): CustomerConnection!

  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean!

  """
  List of customer saved searches that contain the customers to whom the price rule applies.
  """
  savedSearches: [SavedSearch!]!
}

"""Specifies the input fields to update a price rule customer selection."""
input PriceRuleCustomerSelectionInput {
  """Whether the price rule applies to all customers."""
  forAllCustomers: Boolean = false

  """
  List of customer saved searches that contain the customers to whom the price
  rule applies. No single customer IDs may be present.
  """
  savedSearchIds: [ID!]

  """
  List of customers to add to the current list of customers to whom the price rule applies. `savedSearchIds` must be empty.
  """
  customerIdsToAdd: [ID!]

  """
  A list of customers to remove from the current list of customers to whom the price rule applies.
  """
  customerIdsToRemove: [ID!]
}

type PriceRuleDeactivatePayload {
  """The deactivated price rule."""
  priceRule: PriceRule

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleDeletePayload {
  """The id price of the deleted price rule."""
  deletedPriceRuleId: ID

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """The shop of the deleted price rule."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""A discount code of a price rule."""
type PriceRuleDiscountCode implements Node {
  """The application that created the discount code."""
  app: App

  """The code of a discount."""
  code: String!

  """Globally unique identifier."""
  id: ID!

  """The usage count of the discount code."""
  usageCount: Int!
}

type PriceRuleDiscountCodeConnection {
  """A list of edges."""
  edges: [PriceRuleDiscountCodeEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type PriceRuleDiscountCodeCreatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The newly created discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleDiscountCodeEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleDiscountCodeEdge."""
  node: PriceRuleDiscountCode!
}

"""Specifies the input fields to manipulate a discount code."""
input PriceRuleDiscountCodeInput {
  """The code of a discount."""
  code: String
}

type PriceRuleDiscountCodeUpdatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The updated discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

type PriceRuleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PriceRuleEdge."""
  node: PriceRule!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRuleEntitlementToPrerequisiteQuantityRatio {
  """The quantity of entitlements in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisites in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be
applicable, compared to quantity of entitled items.
"""
input PriceRuleEntitlementToPrerequisiteQuantityRatioInput {
  """The quantity of entitlements in the ratio."""
  entitlementQuantity: Int

  """The quantity of prerequisites in the ratio."""
  prerequisiteQuantity: Int
}

"""Possible error codes that could be returned by a price rule mutation."""
enum PriceRuleErrorCode {
  """Input value is blank."""
  BLANK

  """Input value should be equal to allowed value."""
  EQUAL_TO

  """Input value should be greater than minimum allowed value."""
  GREATER_THAN

  """Input value is invalid."""
  INVALID

  """Input value should be less or equal to maximum allowed value."""
  LESS_THAN_OR_EQUAL_TO

  """Input value is already taken."""
  TAKEN

  """Input value is too long."""
  TOO_LONG

  """Input value is too short."""
  TOO_SHORT
  ITEM_ENTITLEMENTS_MISSING
  ITEM_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  CANNOT_ENTITLE_COLLECTIONS_WITH_PRODUCTS_OR_VARIANTS
  ITEM_ENTITLEMENT_INVALID_TYPE
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_PRODUCT
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_VARIANT
  ITEM_ENTITLEMENTS_EXCEEDED_MAX_COLLECTION
  ITEM_ENTITLEMENTS_INVALID_PRODUCT
  ITEM_ENTITLEMENTS_INVALID_VARIANT
  ITEM_ENTITLEMENTS_INVALID_COLLECTION
  ITEM_ENTITLEMENTS_DUPLICATE_PRODUCT
  ITEM_ENTITLEMENTS_DUPLICATE_VARIANT
  ITEM_ENTITLEMENTS_DUPLICATE_COLLECTION
  VARIANT_ALREADY_ENTITLED_THROUGH_PRODUCT
  ITEM_PREREQUISITES_INVALID_TYPE
  ITEM_PREREQUISITES_INVALID_COLLECTION
  ITEM_PREREQUISITES_EXCEEDED_MAX
  ITEM_PREREQUISITES_INVALID_PRODUCT
  ITEM_PREREQUISITES_INVALID_VARIANT
  ITEM_PREREQUISITES_DUPLICATE_PRODUCT
  ITEM_PREREQUISITES_DUPLICATE_VARIANT
  ITEM_PREREQUISITES_DUPLICATE_COLLECTION
  ITEM_PREREQUISITES_MUST_BE_EMPTY
  CANNOT_PREREQUISITE_COLLECTION_WITH_PRODUCT_OR_VARIANTS
  ITEM_PREREQUISITES_MISSING
  SHIPPING_ENTITLEMENTS_EXCEEDED_MAX
  SHIPPING_ENTITLEMENTS_INVALID_TARGET_TYPE_OR_SELECTION
  SHIPPING_ENTITLEMENTS_UNSUPPORTED_DESTINATION_TYPE
  SHIPPING_ENTITLEMENTS_INVALID_COUNTRY
  INVALID_TARGET_TYPE_PREREQUISITE_SHIPPING_PRICE_RANGE
  SHIPPING_ENTITLEMENTS_DUPLICATE_COUNTRY
  SHIPPING_ENTITLEMENTS_MISSING
  CUSTOMER_PREREQUISITES_INVALID_SELECTION
  CUSTOMER_PREREQUISITES_MISSING
  BOTH_CUSTOMER_AND_SAVED_SEARCH_PREREQUISITES_SELECTED
  CUSTOMER_SAVED_SEARCH_EXCEEDED_MAX
  CUSTOMER_PREREQUISITES_EXCEEDED_MAX
  CUSTOMER_SAVED_SEARCH_INVALID
  CUSTOMER_SAVED_SEARCH_DUPLICATE
  DISCOUNT_CODE_DUPLICATE
  BOGO_INVALID_TARGET_TYPE
  BOGO_INVALID_VALUE_TYPE
  BOGO_INVALID_TARGET_SELECTION
  PRICE_RULE_PERCENTAGE_VALUE_OUTSIDE_RANGE
  PRICE_RULE_ALLOCATION_LIMIT_IS_ZERO
  PRICE_RULE_EXCEEDED_MAX_DISCOUNT_CODE
  END_DATE_BEFORE_START_DATE
  PREREQUISITE_SUBTOTAL_AND_QUANTITY_RANGE_BOTH_PRESENT
  SHOP_EXCEEDED_MAX_PRICE_RULES
  PRICE_RULE_ALLOCATION_LIMIT_ON_NON_BOGO
}

"""A list of features used by the price rule."""
enum PriceRuleFeature {
  """The price rule supports buy-one-get-one."""
  BUY_ONE_GET_ONE

  """
  The price rule supports buy-one-get-one using custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """The price rule supports bulk discounts."""
  BULK

  """The price rule supports specific customers."""
  SPECIFIC_CUSTOMERS

  """The price rule supports quantity discounts."""
  QUANTITY_DISCOUNTS
}

"""The value of a fixed amount price rule."""
type PriceRuleFixedAmountValue {
  """The monetary value of the price rule."""
  amount: Money!
}

"""Specifies the input fields to manipulate a price rule."""
input PriceRuleInput {
  """PriceRuleValidityPeriod for the price rule."""
  validityPeriod: PriceRuleValidityPeriodInput

  """Whether the price rule can be applied only once per customer."""
  oncePerCustomer: Boolean = false

  """A selection of customers for whom the price rule applies."""
  customerSelection: PriceRuleCustomerSelectionInput

  """The maximum number of times the price rule can be applied."""
  usageLimit: Int

  """Title of the price rule."""
  title: String

  """
  The maximum number of times the price rule will be allocated onto an order.
  """
  allocationLimit: Int

  """
  The method (each or across) by which the price rule's value is allocated to its entitled items.
  """
  allocationMethod: PriceRuleAllocationMethod

  """The value of the price rule."""
  value: PriceRuleValueInput

  """
  The type of lines (line_item or shipping_line) to which the price rule applies.
  """
  target: PriceRuleTarget

  """
  The sum of the entitled items subtotal prices must fall within this range for the price rule to be applicable.
  """
  prerequisiteSubtotalRange: PriceRuleMoneyRangeInput

  """
  The number of the entitled items must fall within this range for the price rule to be applicable.
  """
  prerequisiteQuantityRange: PriceRuleQuantityRangeInput

  """
  The shipping cost must fall within this range for the price rule to be applicable.
  """
  prerequisiteShippingPriceRange: PriceRuleMoneyRangeInput

  """The items to which the price rule applies."""
  itemEntitlements: PriceRuleItemEntitlementsInput

  """The items needed to apply the price rule."""
  itemPrerequisites: PriceRuleItemPrerequisitesInput

  """The shipping lines to which the price rule applies."""
  shippingEntitlements: PriceRuleShippingEntitlementsInput

  """
  Quantity of prerequisite items required for the price rule to be applicable,
  compared to quantity of entitled items. This argument is deprecated: Use
  `prerequisiteToEntitlementQuantityRatio` instead.
  """
  entitlementToPrerequisiteQuantityRatio: PriceRuleEntitlementToPrerequisiteQuantityRatioInput

  """
  Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
  """
  prerequisiteToEntitlementQuantityRatio: PriceRulePrerequisiteToEntitlementQuantityRatioInput
}

"""
The items to which this price rule applies. This may be multiple products,
product variants, collections or combinations of the aforementioned.
"""
type PriceRuleItemEntitlements {
  """The collections to which the price rule applies."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """The product variants to which the price rule applies."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """The products to which the price rule applies."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether the price rule applies to all line items."""
  targetAllLineItems: Boolean!
}

"""
Specifies the input fields to update a price rule line item entitlement.
"""
input PriceRuleItemEntitlementsInput {
  """Whether the price rule applies to all items."""
  targetAllLineItems: Boolean = false

  """The products to which the price rule applies."""
  productIds: [ID!]

  """The product variants to which the price rule applies."""
  productVariantIds: [ID!]

  """The collections to which the price rule applies."""
  collectionIds: [ID!]
}

"""
Specifies the input fields to update a price rule's item prerequisites.
"""
input PriceRuleItemPrerequisitesInput {
  """The products needed for the price rule to be applied."""
  productIds: [ID!]

  """The product variants needed for the price rule to be applied."""
  productVariantIds: [ID!]

  """The collections needed for the price rule to be applied."""
  collectionIds: [ID!]
}

"""
Single or multiple line item products, product variants or collections required
for the price rule to be applicable, can also be provided in combination.
"""
type PriceRuleLineItemPrerequisites {
  """The collections required for the price rule to be applicable."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """The product variants required for the price rule to be applicable."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantConnection!

  """The products required for the price rule to be applicable."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!
}

"""A money range within which the price rule is applicable."""
type PriceRuleMoneyRange {
  """The lower bound of the money range."""
  greaterThan: Money

  """The lower bound or equal of the money range."""
  greaterThanOrEqualTo: Money

  """The upper bound of the money range."""
  lessThan: Money

  """The upper bound or equal of the money range."""
  lessThanOrEqualTo: Money
}

"""
Specifies the input fields to update the money range within which the price rule is applicable.

"""
input PriceRuleMoneyRangeInput {
  """The upper bound of the money range."""
  lessThan: Money

  """The upper or equal bound of the money range."""
  lessThanOrEqualTo: Money

  """The lower bound of the money range."""
  greaterThan: Money

  """The lower or equal bound of the money range."""
  greaterThanOrEqualTo: Money
}

"""The value of a percent price rule."""
type PriceRulePercentValue {
  """The percent value of the price rule."""
  percentage: Float!
}

"""
Quantity of prerequisite items required for the price rule to be applicable, compared to quantity of entitled items.
"""
type PriceRulePrerequisiteToEntitlementQuantityRatio {
  """The quantity of entitlements in the ratio."""
  entitlementQuantity: Int!

  """The quantity of prerequisites in the ratio."""
  prerequisiteQuantity: Int!
}

"""
Specifies the quantity of prerequisite items required for the price rule to be
applicable, compared to quantity of entitled items.
"""
input PriceRulePrerequisiteToEntitlementQuantityRatioInput {
  """The quantity of entitlements in the ratio."""
  entitlementQuantity: Int

  """The quantity of prerequisites in the ratio."""
  prerequisiteQuantity: Int
}

"""A quantity range within which the price rule is applicable."""
type PriceRuleQuantityRange {
  """The lower bound of the quantity range."""
  greaterThan: Int

  """The lower bound or equal of the quantity range."""
  greaterThanOrEqualTo: Int

  """The upper bound of the quantity range."""
  lessThan: Int

  """The upper bound or equal of the quantity range."""
  lessThanOrEqualTo: Int
}

"""
Specifies the input fields to update the quantity range within which the price rule is applicable.

"""
input PriceRuleQuantityRangeInput {
  """The upper bound of the quantity range."""
  lessThan: Int

  """The upper or equal bound of the quantity range."""
  lessThanOrEqualTo: Int

  """The lower bound of the quantity range."""
  greaterThan: Int

  """The lower or equal bound of the quantity range."""
  greaterThanOrEqualTo: Int
}

"""Shareable URL for the discount code associated with the price rule."""
type PriceRuleShareableUrl {
  """
  Image URL of the item (product or collection) to which discount applies.
  """
  targetItemImage: Image

  """Type of page where URL lands."""
  targetType: PriceRuleShareableUrlTargetType!

  """Title for the page where URL lands."""
  title: String!

  """Actual URL for the discount code."""
  url: URL!
}

"""Page type where shareable URL lands."""
enum PriceRuleShareableUrlTargetType {
  HOME
  PRODUCT
  COLLECTION
}

"""
Specifies the input fields to update a price rule shipping entitlement.
"""
input PriceRuleShippingEntitlementsInput {
  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean = false

  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean = false
}

"""The shipping lines to which the price rule applies to."""
type PriceRuleShippingLineEntitlements {
  """The codes for the countries to which the price rule applies to."""
  countryCodes: [CountryCode!]!

  """
  Whether the price rule is applicable to countries that have not been defined in the shop's shipping zones.
  """
  includeRestOfWorld: Boolean!

  """Whether the price rule applies to all shipping lines."""
  targetAllShippingLines: Boolean!
}

"""The set of valid sort keys for the priceRules query."""
enum PriceRuleSortKeys {
  """Sort by the `starts_at` value."""
  STARTS_AT

  """Sort by the `ends_at` value."""
  ENDS_AT

  """Sort by the `title` value."""
  TITLE

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The status of the price rule."""
enum PriceRuleStatus {
  ACTIVE
  EXPIRED
  SCHEDULED
}

"""
The type of lines (line_item or shipping_line) to which the price rule applies.
"""
enum PriceRuleTarget {
  """The price rule applies to line items."""
  LINE_ITEM

  """The price rule applies to shipping lines."""
  SHIPPING_LINE
}

"""A list of features used by the price rule."""
enum PriceRuleTrait {
  """The price rule is a buy-one-get-one price rule."""
  BUY_ONE_GET_ONE

  """
  The price rule supports buy-one-get-one using custom allocation limit.
  """
  BUY_ONE_GET_ONE_WITH_ALLOCATION_LIMIT

  """The price rule is a bulk discount price rule."""
  BULK

  """The price rule supports specific customers."""
  SPECIFIC_CUSTOMERS

  """The price rule supports quantity discounts."""
  QUANTITY_DISCOUNTS
}

type PriceRuleUpdatePayload {
  """The updated price rule."""
  priceRule: PriceRule

  """The updated discount code."""
  priceRuleDiscountCode: PriceRuleDiscountCode

  """List of errors that occurred executing the mutation."""
  priceRuleUserErrors: [PriceRuleUserError!]!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]! @deprecated(reason: "Use `priceRuleUserErrors` instead")
}

"""
Represents an error that happens during execution of a price rule mutation.
"""
type PriceRuleUserError implements DisplayableError {
  """Error code to uniquely identify the error."""
  code: PriceRuleErrorCode

  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""A time period during which a price rule is applicable."""
type PriceRuleValidityPeriod {
  """The time after which the price rule becomes invalid."""
  end: DateTime

  """The time after which the price rule is valid."""
  start: DateTime!
}

"""
Specifies the input fields to update the validity period of a price rule.
"""
input PriceRuleValidityPeriodInput {
  start: DateTime!
  end: DateTime
}

"""The value of the price rule."""
union PriceRuleValue = PriceRulePercentValue | PriceRuleFixedAmountValue

"""Specifies the input fields to update a price rule."""
input PriceRuleValueInput {
  """The percentage value of the price rule."""
  percentageValue: Float

  """The fixed amount value of the price rule."""
  fixedAmountValue: Money
}

"""The value of the percentage pricing object."""
type PricingPercentageValue {
  """The percentage value of the object."""
  percentage: Float!
}

"""The value of the pricing object."""
union PricingValue = PricingPercentageValue | MoneyV2

"""
Represents a product, including information about related collections and product variants.
"""
type Product implements Node & Navigable & HasMetafields & Publishable & OnlineStorePreviewable & LegacyInteroperability {
  """
  The number of publication a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """The description of the product, complete with HTML formatting."""
  bodyHtml: String @deprecated(reason: "Use `descriptionHtml` instead")

  """A list of the collections that include the product."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `collection_type`
     - `updated_at`
     - `published_status`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): CollectionConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was created.

  """
  createdAt: DateTime!

  """A default cursor for use in pagination."""
  defaultCursor: String!

  """
  Stripped description of the product, single line with HTML tags removed.
  """
  description(
    """Truncates string after the given length."""
    truncateAt: Int
  ): String!

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: HTML!

  """
  Stripped description of the product, single line with HTML tags removed.
  Truncated to 60 characters.

  """
  descriptionPlainSummary: String! @deprecated(reason: "Use `description` instead")

  """
  Information about the product that's provided through resource feedback.
  """
  feedback: ResourceFeedback

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """
  A unique human-friendly string for the product. Automatically generated from the product's title.
  """
  handle: String!

  """
  Whether the product has only a single variant with the default option and value.
  """
  hasOnlyDefaultVariant: Boolean!

  """Whether the product has out of stock variants."""
  hasOutOfStockVariants: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The images associated with the product."""
  images(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductImageSortKeys = POSITION

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): ImageConnection!

  """Whether the product is in a given collection."""
  inCollection(
    """The ID of the collection to check."""
    id: ID!
  ): Boolean!

  """Whether the product is a gift card."""
  isGiftCard: Boolean!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """The online store preview URL."""
  onlineStorePreviewUrl: URL

  """
  The online store URL for the product.
  A value of `null` indicates that the product is not published to the Online Store sales channel.

  """
  onlineStoreUrl: URL

  """List of custom product options (maximum of 3 per product)."""
  options(
    """Truncate the array result to this size."""
    first: Int
  ): [ProductOption!]!

  """The price range."""
  priceRange: ProductPriceRange!

  """A list of the channels where the product is published."""
  productPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  """The product type specified by the merchant."""
  productType: String!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false it
    will return all resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """A list of the channels where the product is published."""
  publications(
    """
    Return only the publications that are published. If false it will return all publications.
    """
    onlyPublished: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductPublicationConnection! @deprecated(reason: "Use `resourcePublications` instead")

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601))
  when the product was published to the Online Store.

  """
  publishedAt: DateTime

  """Check to see if resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see if resource is published to the calling app's channel."""
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see if resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see if resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Return only the resources that are published. If false it will return all resource publications.
    """
    onlyPublished: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """SEO information of the product."""
  seo: SEO!

  """The storefront ID of the product."""
  storefrontId: StorefrontID!

  """A list of the tags that have been added to the product."""
  tags: [String!]!

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The title of the product."""
  title: String!

  """The quantity of inventory in stock."""
  totalInventory: Int!

  """The number of variants that are associated with this product."""
  totalVariants: Int!

  """Whether inventory tracking has been enabled for this product."""
  tracksInventory: Boolean!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  """
  The date and time ([ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601)) when the product was last modified.

  """
  updatedAt: DateTime!

  """A list of variants associated with the product."""
  variants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = POSITION
  ): ProductVariantConnection!

  """The name of the product's vendor."""
  vendor: String!
}

"""Specifies product images to append."""
input ProductAppendImagesInput {
  """The ID of the product."""
  id: ID!

  """The images to be appended to the product."""
  images: [ImageInput!]!
}

type ProductAppendImagesPayload {
  """List of new images appended to the product."""
  newImages(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): [Image!]

  """The product object."""
  product: Product

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkAddTagsPayload {
  """The asynchronous job adding the new tags to the products."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkAddToCollectionsPayload {
  """The asynchronous job adding products to the collections given."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkDeletePayload {
  """The asynchronous job removing the products."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkPublishPayload {
  """The asynchronous job publishing products on the publications given."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkRemoveFromCollectionsPayload {
  """The asynchronous job removing products from the collections given."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkRemoveTagsPayload {
  """The asynchronous job removing the tags to the products."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductBulkUnpublishPayload {
  """
  The asynchronous job which unpublishes products on the publications given.
  """
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The set of valid sort keys for the products query."""
enum ProductCollectionSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `price` value."""
  PRICE

  """Sort by the `best-selling` value."""
  BEST_SELLING

  """Sort by the `created` value."""
  CREATED

  """Sort by the `id` value."""
  ID

  """Sort by the `manual` value."""
  MANUAL

  """Sort by the `collection-default` value."""
  COLLECTION_DEFAULT

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

type ProductConnection {
  """A list of edges."""
  edges: [ProductEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductCreatePayload {
  """The product object."""
  product: Product

  """The shop associated with the product."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductDeleteImagesPayload {
  """This is an array of IDs of images to delete."""
  deletedImageIds: [ID!]!

  """This is the product object."""
  product: Product

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the product to delete."""
input ProductDeleteInput {
  """The ID of the product."""
  id: ID!
}

type ProductDeletePayload {
  """The ID of the deleted product."""
  deletedProductId: ID

  """The shop associated with the product."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductDuplicatePayload {
  """The asynchronous job duplicating the product images."""
  imageJob: Job

  """The duplicated product."""
  newProduct: Product

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductEdge."""
  node: Product!
}

"""The set of valid sort keys for the images query."""
enum ProductImageSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `position` value."""
  POSITION

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

type ProductImageUpdatePayload {
  """Image updated."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields required to create a product."""
input ProductInput {
  """
  A description of the product. Supports HTML formatting. This argument is deprecated: Use `descriptionHtml` instead.
  """
  bodyHtml: String

  """The IDs of the collections that this product will be added to."""
  collectionsToJoin: [ID!]

  """The IDs of collections that will no longer include the product."""
  collectionsToLeave: [ID!]

  """The description of the product, complete with HTML formatting."""
  descriptionHtml: String

  """
  A unique human-friendly string for the product. Automatically generated from the product's title.

  """
  handle: String

  """
  Whether a redirect is required after a new handle has been provided.
  If true, then the old handle is redirected to the new one automatically.

  """
  redirectNewHandle: Boolean = false

  """Specifies the product to update or create a new product if absent."""
  id: ID

  """The images to associate with the product."""
  images: [ImageInput!]

  """The metafields to associate with this product."""
  metafields: [MetafieldInput!]

  """The SEO information associated with the product."""
  seo: SEOInput

  """List of custom product options (maximum of 3 per product)."""
  options: [String!]

  """The product type specified by the merchant."""
  productType: String

  """
  A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  productPublications: [ProductPublicationInput!]

  """
  A list of the channels where the product is published. This argument is deprecated: Use `PublishablePublish` instead.
  """
  publications: [ProductPublicationInput!]

  """This argument is deprecated: Use `PublishablePublish` instead."""
  publishDate: DateTime

  """This argument is deprecated: Use `PublishablePublish` instead."""
  publishOn: DateTime

  """This argument is deprecated: Use `PublishablePublish` instead."""
  published: Boolean

  """This argument is deprecated: Use `PublishablePublish` instead."""
  publishedAt: DateTime

  """A list of the tags that have been added to the product."""
  tags: [String!]

  """The theme template used when viewing the product in a store."""
  templateSuffix: String

  """The theme template used when viewing the gift card in a store."""
  giftCardTemplateSuffix: String

  """The title of the product."""
  title: String

  """A list of variants associated with the product."""
  variants: [ProductVariantInput!]

  """The name of the product's vendor."""
  vendor: String
}

"""Products that are frequently abandoned."""
type ProductInsightFrequentlyAbandoned implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightFrequentlyAbandonedProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightFrequentlyAbandonedProductInfoMetrics implements InsightProductInfoMetric {
  """Percentage of carts in which this product has been abandoned."""
  cartAbandonRate: Float!

  """Number of time this product has been added to cart."""
  carts: Int!

  """Number of orders in which this product has been added to."""
  orders: Int!

  """A product."""
  product: Product!
}

type ProductInsightFrequentlyAbandonedProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightFrequentlyAbandonedProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightFrequentlyAbandonedProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  The item at the end of ProductInsightFrequentlyAbandonedProductInfoMetricsEdge.
  """
  node: ProductInsightFrequentlyAbandonedProductInfoMetrics!
}

"""Products that have high potential."""
type ProductInsightHighPotential implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightHighPotentialProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightHighPotentialProductInfoMetrics implements InsightProductInfoMetric {
  """The rate of sessions that converted to checkouts for this product."""
  conversionRate: Float!

  """A product."""
  product: Product!

  """Number of sessions this product has been viewed in."""
  sessions: Int!
}

type ProductInsightHighPotentialProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightHighPotentialProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightHighPotentialProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  The item at the end of ProductInsightHighPotentialProductInfoMetricsEdge.
  """
  node: ProductInsightHighPotentialProductInfoMetrics!
}

"""Products that need improvement."""
type ProductInsightNotSelling implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightNotSellingProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightNotSellingProductInfoMetrics implements InsightProductInfoMetric {
  """A product."""
  product: Product!

  """Number of sessions this product has been viewed in."""
  sessions: Int!

  """Number of units sold growth delta between periods."""
  unitsSoldGrowthNet: Int!

  """Number of units this product has sold during the current period."""
  unitsSoldThisPeriod: Int!
}

type ProductInsightNotSellingProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightNotSellingProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightNotSellingProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  The item at the end of ProductInsightNotSellingProductInfoMetricsEdge.
  """
  node: ProductInsightNotSellingProductInfoMetrics!
}

"""Product performance insights for this shop."""
type ProductInsights implements InsightGroup {
  """Products that are frequently abandoned."""
  frequentlyAbandoned: ProductInsightFrequentlyAbandoned!

  """Products that have high potential."""
  highPotential: ProductInsightHighPotential!

  """The period in which the shop insights were gathered."""
  insightDateRange: InsightDateRange!

  """Products that are not selling."""
  notSelling: ProductInsightNotSelling!

  """Products that need improvement."""
  toImprove: ProductInsightToImprove!

  """Top selling products."""
  topSelling: ProductInsightTopSelling!

  """Products that are trending up in sales."""
  trendingUp: ProductInsightTrendingUp!
}

"""Products that need improvement."""
type ProductInsightToImprove implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightToImproveProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightToImproveProductInfoMetrics implements InsightProductInfoMetric {
  """The rate of sessions that converted to checkouts for this product."""
  conversionRate: Float!

  """A product."""
  product: Product!

  """Number of sessions in which this product has been viewed."""
  sessions: Int!
}

type ProductInsightToImproveProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightToImproveProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightToImproveProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductInsightToImproveProductInfoMetricsEdge."""
  node: ProductInsightToImproveProductInfoMetrics!
}

"""Top selling products."""
type ProductInsightTopSelling implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightTopSellingProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightTopSellingProductInfoMetrics implements InsightProductInfoMetric {
  """A product."""
  product: Product!

  """Number of units of this product that have been sold."""
  unitsSold: Int!
}

type ProductInsightTopSellingProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightTopSellingProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightTopSellingProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  The item at the end of ProductInsightTopSellingProductInfoMetricsEdge.
  """
  node: ProductInsightTopSellingProductInfoMetrics!
}

"""Products that are trending up in sales."""
type ProductInsightTrendingUp implements InsightSuggestible {
  """ID of this insight."""
  id: ID!

  """Paginated list of product metrics."""
  products(
    """Number of products to return."""
    first: Int!
  ): ProductInsightTrendingUpProductInfoMetricsConnection!

  """The number of product metrics."""
  productsCount: Int!

  """A list of suggestions the user can take."""
  suggestions: [InsightSuggestion!]!
}

"""Metrics and product information for an individual product."""
type ProductInsightTrendingUpProductInfoMetrics implements InsightProductInfoMetric {
  """A product."""
  product: Product!

  """Number of units sold."""
  unitsSold: Int!

  """Units sold growth delta between periods."""
  unitsSoldGrowthNet: Int!

  """Units sold delta between periods."""
  unitsSoldGrowthRate: Float!
}

type ProductInsightTrendingUpProductInfoMetricsConnection {
  """A list of edges."""
  edges: [ProductInsightTrendingUpProductInfoMetricsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductInsightTrendingUpProductInfoMetricsEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """
  The item at the end of ProductInsightTrendingUpProductInfoMetricsEdge.
  """
  node: ProductInsightTrendingUpProductInfoMetrics!
}

"""
Custom product property names like "Size", "Color", and "Material".
Products are based on permutations of these options.
A product may have a maximum of 3 options.
255 characters limit each.

"""
type ProductOption implements Node {
  """Globally unique identifier."""
  id: ID!

  """The product option’s name."""
  name: String!

  """The product option's position."""
  position: Int!

  """The corresponding value to the product option name."""
  values: [String!]!
}

"""The price range of the product."""
type ProductPriceRange {
  """The highest variant's price."""
  maxVariantPrice: MoneyV2!

  """The lowest variant's price."""
  minVariantPrice: MoneyV2!
}

"""Represents the channels where a product is published."""
type ProductPublication {
  """The channel where the product was or is published."""
  channel: Channel!

  """Whether the publication is published or not."""
  isPublished: Boolean!

  """The product that was or is going to be published on the channel."""
  product: Product!

  """
  The date that the product was or is going to be published on the channel.
  """
  publishDate: DateTime
}

type ProductPublicationConnection {
  """A list of edges."""
  edges: [ProductPublicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductPublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductPublicationEdge."""
  node: ProductPublication!
}

"""Specifies a publication to which a product will be published."""
input ProductPublicationInput {
  """ID of the publication."""
  publicationId: ID

  """
  ID of the channel. This argument is deprecated: Use publicationId instead.
  """
  channelId: ID

  """This argument is deprecated: Use publicationId instead."""
  channelHandle: String

  """The date and time that the product was (or will be) published."""
  publishDate: DateTime
}

"""Specifies a product to publish and the channels to publish it to."""
input ProductPublishInput {
  """The product to create or update publications for."""
  id: ID!

  """The publication that the product is published to."""
  productPublications: [ProductPublicationInput!]!
}

type ProductPublishPayload {
  """The product that has been published."""
  product: Product

  """The channels where the product is published."""
  productPublications: [ProductPublication!] @deprecated(reason: "Use publications within product instead")

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductReorderImagesPayload {
  """The asynchronous job reordering the images."""
  job: Job

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The set of valid sort keys for the products query."""
enum ProductSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `product_type` value."""
  PRODUCT_TYPE

  """Sort by the `vendor` value."""
  VENDOR

  """Sort by the `inventory_total` value."""
  INVENTORY_TOTAL

  """Sort by the `updated_at` value."""
  UPDATED_AT

  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `published_at` value."""
  PUBLISHED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""
Specifies a product to unpublish from a channel and the sales channels to unpublish it from.
"""
input ProductUnpublishInput {
  """The ID of the product to create or update publications for."""
  id: ID!

  """The channels to unpublish the product from."""
  productPublications: [ProductPublicationInput!]!
}

type ProductUnpublishPayload {
  """The product that has been unpublished."""
  product: Product

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductUpdatePayload {
  """The updated product."""
  product: Product

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a product variant."""
type ProductVariant implements Node & HasMetafields & Navigable & LegacyInteroperability {
  """Whether the product variant is available for sale."""
  availableForSale: Boolean!

  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant in the default shop currency."""
  compareAtPrice: Money

  """The date and time when the variant was created."""
  createdAt: DateTime!

  """A default cursor for use in pagination."""
  defaultCursor: String!

  """
  Display name of the variant, based on product's title + variant's title.
  """
  displayName: String!

  """The fulfillment service associated with the product."""
  fulfillmentService: FulfillmentService

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String

  """Globally unique identifier."""
  id: ID!

  """The featured image for the variant."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """The featured image for the variant."""
  images(
    """Truncate the array result to this size."""
    first: Int

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): [Image!]! @deprecated(reason: "Use the singular `image` field instead. There may never be more than one variant image.")

  """
  The ID for the inventory item, which is used to query for inventory information.
  """
  inventoryItem: InventoryItem!

  """
  The fulfillment service that tracks the number of items in stock for the product variant.
  """
  inventoryManagement: ProductVariantInventoryManagement!

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy!

  """The total sellable quantity of the variant."""
  inventoryQuantity: Int

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.

  """
  position: Int!

  """
  List of prices and compare-at prices in the presentment currencies for this shop.
  """
  presentmentPrices(
    """The presentment currencies prices should return in."""
    presentmentCurrencies: [CurrencyCode!]

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductVariantPricePairConnection!

  """The price of the product variant in the default shop currency."""
  price: Money!

  """The product that this variant belongs to."""
  product: Product!

  """
  Whether a customer needs to provide a shipping address when placing an order for the product variant.

  """
  requiresShipping: Boolean!

  """List of product options applied to the variant."""
  selectedOptions: [SelectedOption!]!

  """
  An identifier for the product variant in the shop. Required in order to connect to a fulfillment service.

  """
  sku: String

  """The storefront ID of the product variant."""
  storefrontId: StorefrontID!

  """Whether a tax is charged when the product variant is sold."""
  taxable: Boolean!

  """The title of the product variant."""
  title: String!

  """
  The date and time (ISO 8601 format) when the product variant was last modified.

  """
  updatedAt: DateTime!

  """
  The weight of the product variant in the unit system specified with weight_unit.
  """
  weight: Float

  """
  The unit of measurement that applies to the product variant's weight. If you
  don't specify a value for weight_unit, then the shop's default unit of
  measurement is applied. Valid values: `g`, `kg`, `oz`, `lb`.

  """
  weightUnit: WeightUnit!
}

type ProductVariantConnection {
  """A list of edges."""
  edges: [ProductVariantEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductVariantCreatePayload {
  """The product associated with the variant."""
  product: Product

  """The successfully created variant."""
  productVariant: ProductVariant

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductVariantDeletePayload {
  """ID of the deleted product variant."""
  deletedProductVariantId: ID

  """Product of the deleted product variant."""
  product: Product

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ProductVariantEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantEdge."""
  node: ProductVariant!
}

"""Specifies a product variant to create or update."""
input ProductVariantInput {
  """The value of the barcode associated with the product."""
  barcode: String

  """The compare-at price of the variant."""
  compareAtPrice: Money

  """The ID of the fulfillment service associated with the variant."""
  fulfillmentServiceId: ID

  """The Harmonized System Code (or HS Tariff Code) for the variant."""
  harmonizedSystemCode: String

  """
  Specifies the product variant to update or create a new variant if absent.
  """
  id: ID

  """The ID of the image that's associated with the variant."""
  imageId: ID

  """
  The URL of an image to associate with the variant.  This field can only be
  used through mutations that create product images and must match one of the
  URLs being created on the product.

  """
  imageSrc: String

  """
  The fulfillment service that tracks the number of items in stock for the
  product variant. If you track the inventory yourself using the admin, then set
  the value to `shopify`. Valid values: `shopify` or the handle of a fulfillment
  service that has inventory management enabled.

  """
  inventoryManagement: ProductVariantInventoryManagement

  """
  Whether customers are allowed to place an order for the product variant when it's out of stock.
  """
  inventoryPolicy: ProductVariantInventoryPolicy

  """This argument is deprecated: Use `inventoryQuantities` instead."""
  inventoryQuantity: Int

  """
  This argument is deprecated: Use the `inventoryAdjustQuantity` mutation instead.
  """
  inventoryQuantityAdjustment: Int

  """
  Create only field. The inventory quantities at each location where the variant is stocked.
  """
  inventoryQuantities: [InventoryLevelInput!]

  """Additional customizable information about the product variant."""
  metafields: [MetafieldInput!]

  """
  The custom properties that a shop owner uses to define product variants.
  """
  options: [String!]

  """
  The order of the product variant in the list of product variants. The first position in the list is 1.

  """
  position: Int

  """The price of the variant."""
  price: Money

  """
  Create only required field. Specifies the product on which to create the variant.
  """
  productId: ID

  """Whether the variant requires shipping."""
  requiresShipping: Boolean

  """The SKU for the variant."""
  sku: String

  """Whether the variant is taxable."""
  taxable: Boolean

  """
  This argument is deprecated: Variant title is not a writable field; it is generated from the selected variant options.
  """
  title: String

  """The tax code associated with the variant."""
  taxCode: String

  """The weight of the variant."""
  weight: Float

  """The unit of weight that's used to measure the variant."""
  weightUnit: WeightUnit
}

"""The method of inventory tracking for a product variant."""
enum ProductVariantInventoryManagement {
  SHOPIFY
  NOT_MANAGED
  FULFILLMENT_SERVICE
}

"""
The inventory policy for a product variant controls whether customers can continue to buy the variant when it
is out of stock. When the value is <code>continue</code>, customers are able to buy the variant when it's out of stock.
When the value is <code>deny</code>, customers can't buy the variant when it's out of stock.

"""
enum ProductVariantInventoryPolicy {
  DENY
  CONTINUE
}

"""
The compare-at price and price of a variant sharing a currency.

"""
type ProductVariantPricePair {
  """The compare-at price of the variant with associated currency."""
  compareAtPrice: MoneyV2

  """The price of the variant with associated currency."""
  price: MoneyV2!
}

type ProductVariantPricePairConnection {
  """A list of edges."""
  edges: [ProductVariantPricePairEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ProductVariantPricePairEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ProductVariantPricePairEdge."""
  node: ProductVariantPricePair!
}

"""The set of valid sort keys for the variants query."""
enum ProductVariantSortKeys {
  """Sort by the `title` value."""
  TITLE

  """Sort by the `name` value."""
  NAME

  """Sort by the `sku` value."""
  SKU

  """Sort by the `inventory_quantity` value."""
  INVENTORY_QUANTITY

  """Sort by the `inventory_management` value."""
  INVENTORY_MANAGEMENT

  """Sort by the `inventory_levels.available` value."""
  INVENTORY_LEVELS_AVAILABLE

  """Sort by the `inventory_policy` value."""
  INVENTORY_POLICY

  """Sort by the `full_title` value."""
  FULL_TITLE

  """Sort by the `popular` value."""
  POPULAR

  """Sort by the `position` value."""
  POSITION

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

type ProductVariantUpdatePayload {
  """The product associated with the variant."""
  product: Product

  """The updated variant."""
  productVariant: ProductVariant

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Provider group such as alternative or other, used for payments."""
enum ProviderGroup {
  OTHER
  PAYPAL
  ALTERNATIVE
  MANUAL
  CUSTOM
  AMAZON_PAYMENTS
  GOOGLE
  WALLET
  GIFT_CARD
  POS_ONLY
}

"""
A publication is a group of products and collections that is published to an
app. A publication can be a platform or marketplace such
as Facebook or Pinterest, an online store, or POS.

"""
type Publication implements Node {
  """The app associated with the publication."""
  app: App!

  """
  The collection publications for the list of collections published to the publication.
  """
  collectionPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of collections published to the publication."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): CollectionConnection!

  """Whether the collection is available to the publication."""
  hasCollection(
    """Collection ID to check."""
    id: ID!
  ): Boolean!

  """Globally unique identifier."""
  id: ID!

  """Name of the publication."""
  name: String!

  """
  The product publications for the list of products published to the publication.
  """
  productPublicationsV3(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of products published to the publication."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ProductConnection!

  """Whether or not this publication supports future publishing."""
  supportsFuturePublishing: Boolean!
}

type PublicationConnection {
  """A list of edges."""
  edges: [PublicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type PublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of PublicationEdge."""
  node: Publication!
}

"""Specifies the input fields required to publish a resource."""
input PublicationInput {
  """
  ID of the channel. This argument is deprecated: Use publicationId instead.
  """
  channelId: ID

  """ID of the publication."""
  publicationId: ID

  """The date and time that the product was (or will be) published."""
  publishDate: DateTime
}

"""
Represents a resource that can be published to a channel.
A publishable resource can be either a Product or Collection.

"""
interface Publishable {
  """
  The number of publication a resource is published to without feedback errors.
  """
  availablePublicationCount: Int!

  """The number of publications a resource is published on."""
  publicationCount(
    """
    Include only the resource's publications that are published. If false it
    will return all resource's publications including future publications.
    """
    onlyPublished: Boolean = true
  ): Int!

  """Check to see if resource is published to a given channel."""
  publishedOnChannel(
    """The ID of the channel to check."""
    channelId: ID!
  ): Boolean! @deprecated(reason: "Use `publishedOnPublication` instead")

  """Check to see if resource is published to the calling app's channel."""
  publishedOnCurrentChannel: Boolean! @deprecated(reason: "Use `publishedOnCurrentPublication` instead")

  """
  Check to see if resource is published to the calling app's publication.
  """
  publishedOnCurrentPublication: Boolean!

  """Check to see if resource is published to a given publication."""
  publishedOnPublication(
    """The ID of the publication to check."""
    publicationId: ID!
  ): Boolean!

  """The list of resources that are published to a publication."""
  resourcePublications(
    """
    Return only the resources that are published. If false it will return all resource publications.
    """
    onlyPublished: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ResourcePublicationConnection!

  """The list of channels that the resource is not published to."""
  unpublishedChannels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `unpublishedPublications` instead")

  """The list of publications that the resource is not published to."""
  unpublishedPublications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!
}

type PublishablePublishPayload {
  """Resource that has been published."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type PublishablePublishToCurrentChannelPayload {
  """Resource that has been published."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type PublishableUnpublishPayload {
  """Resource that has been unpublished."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type PublishableUnpublishToCurrentChannelPayload {
  """Resource that has been published."""
  publishable: Publishable

  """The user's shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
The schema's entry-point for queries. This acts as the public, top-level API from which all queries must start.
"""
type QueryRoot {
  """Lookup an App by ID or return the currently authenticated App."""
  app(
    """The ID to lookup the App by."""
    id: ID
  ): App

  """
  Fetches app by handle.
  Returns null if the app doesn't exist.

  """
  appByHandle(
    """Handle of the App."""
    handle: String!
  ): App

  """
  Fetches app by apiKey.
  Returns null if the app doesn't exist.

  """
  appByKey(
    """API key of the App."""
    apiKey: String!
  ): App

  """
  Lookup an AppInstallation by ID or return the AppInstallation for the currently authenticated App.
  """
  appInstallation(
    """ID used to lookup AppInstallation."""
    id: ID
  ): AppInstallation

  """List of app installations."""
  appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppInstallationSortKeys = INSTALLED_AT

    """The category of app installations to fetch."""
    category: AppInstallationCategory

    """The privacy level of app installations to fetch."""
    privacy: AppInstallationPrivacy = PUBLIC
  ): AppInstallationConnection!

  """Returns an automatic discount resource by ID."""
  automaticDiscount(
    """The ID of the DiscountAutomatic to return."""
    id: ID!
  ): DiscountAutomatic

  """List of the shop's automatic discount saved searches."""
  automaticDiscountSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of automatic discounts."""
  automaticDiscounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `type`
     - `status`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): DiscountAutomaticConnection!

  """
  List carrier shipping packaging configurations that are available for creation.
  """
  carrierShippingPackagingConfigurations: [DeliveryCarrierShippingPackaging!]

  """Lookup a channel by ID."""
  channel(
    """The ID of the Channel to return."""
    id: ID!
  ): Channel @deprecated(reason: "Use `publication` instead")

  """List of the active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `publications` instead")

  """Returns a Collection resource by ID."""
  collection(
    """The ID of the Collection to return."""
    id: ID!
  ): Collection

  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection

  """
  A list of rule conditions to define how collections with rules can be created.
  """
  collectionRulesConditions: [CollectionRuleConditions!]!

  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `collection_type`
     - `updated_at`
     - `published_status`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): CollectionConnection!

  """Return the AppInstallation for the currently authenticated App."""
  currentAppInstallation: AppInstallation!

  """Returns a Customer resource by ID."""
  customer(
    """The ID of the Customer to return."""
    id: ID!
  ): Customer

  """List of the shop's customer saved searches."""
  customerSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSavedSearchSortKeys = ID

    """
    Supported filter parameters:
     - `name`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): SavedSearchConnection!

  """List of customer accounts."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `total_spent`
     - `orders_count`
     - `order_date`
     - `accepts_marketing`
     - `last_abandoned_order_date`
     - `state`
     - `country`
     - `email`
     - `phone`
     - `customer_date`
     - `updated_at`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): CustomerConnection!

  """The paginated list of deletion events."""
  deletionEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DeletionEventSortKeys = ID

    """
    Supported filter parameters:
     - `occurred_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """List of subject types to filter by."""
    subjectTypes: [DeletionEventSubjectType!]
  ): DeletionEventConnection!

  """Returns a MethodDefinition by ID."""
  deliveryMethodDefinition(
    """The ID of the DeliveryMethodDefinition to return."""
    id: ID!
  ): DeliveryMethodDefinition

  """
  List of the delivery method defintions, either all, active or inactive.
  """
  deliveryMethodDefinitions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `active`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): DeliveryMethodDefinitionConnection!

  """Lookup a Dns Zone by ID."""
  dnsZone(
    """The ID of the DnsZone to return."""
    id: ID!
  ): DnsZone

  """Lookup a Domain by ID."""
  domain(
    """The ID of the Domain to return."""
    id: ID!
  ): Domain

  """Lookup a DomainSubscription by ID."""
  domainSubscription(
    """The ID of the DomainSubscription to return."""
    id: ID!
  ): DomainSubscription

  """Returns a DraftOrder resource by ID."""
  draftOrder(
    """The ID of the DraftOrder to return."""
    id: ID!
  ): DraftOrder

  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of saved draft orders."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DraftOrderSortKeys = ID

    """
    Supported filter parameters:
     - `status`
     - `updated_at`
     - `customer_id`
     - `created_at`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): DraftOrderConnection!

  """Lookup an exchange by ID."""
  exchange(
    """The ID of the Exchange to return."""
    id: ID!
  ): Exchange

  """Returns a Fulfillment resource by ID."""
  fulfillment(
    """The ID of the Fulfillment to return."""
    id: ID!
  ): Fulfillment

  """Returns an InventoryItem resource by ID."""
  inventoryItem(
    """The ID of the InventoryItem to return."""
    id: ID!
  ): InventoryItem

  """List of inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `id`
     - `sku`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): InventoryItemConnection!

  """Returns an InventoryLevel resource by ID."""
  inventoryLevel(
    """The ID of the InventoryLevel to return."""
    id: ID!
  ): InventoryLevel

  """
  Returns a Job resource by ID. Used to check the status of internal jobs and any applicable changes.

  """
  job(
    """ID of the job to query"""
    id: ID!
  ): Job

  """Returns an inventory Location resource by ID."""
  location(
    """
    The ID of the location to return. If no ID is provided, the primary location of the Shop is returned.
    """
    id: ID
  ): Location

  """List of active locations."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: LocationSortKeys = NAME

    """
    Supported filter parameters:
     - `name`
     - `address1`
     - `address2`
     - `city`
     - `zip`
     - `province`
     - `country`
     - `active`
     - `legacy`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): LocationConnection!

  """
  Returns a list of locations eligible for shipping label purchasing for subsets (but not necessarily all) of the order IDs.
  """
  locationsEligibleForLabelPurchase(
    """
    The IDs of the orders in question. You may not supply more than 50 order IDs.
    """
    orderIds: [ID!]!
  ): [Location!]!

  """List of a campaign's marketing activities."""
  marketingActivities(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MarketingActivitySortKeys = CREATED_AT

    """
    Supported filter parameters:
     - `title`
     - `app_id`
     - `tactic`
     - `marketing_campaign_id`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): MarketingActivityConnection!

  """Returns a MarketingActivity resource by ID."""
  marketingActivity(
    """The ID of the MarketingActivity to return."""
    id: ID!
  ): MarketingActivity

  """The marketing activity creation item."""
  marketingActivityCreationItems: [MarketingActivityCreationItem!]!

  """Returns a marketing activity extension resource by ID."""
  marketingActivityExtension(
    """The ID of the marketing activity extension to return."""
    id: ID!
  ): MarketingActivityExtension

  """The shop's registered marketing activity extensions."""
  marketingActivityExtensions: [MarketingActivityExtension!]!

  """List of the shop's marketing activity saved searches."""
  marketingActivitySavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a MarketingCampaign resource by ID."""
  marketingCampaign(
    """The ID of the MarketingCampaign to return."""
    id: ID!
  ): MarketingCampaign

  """List of the shop's marketing campaign saved searches."""
  marketingCampaignSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """The marketing campaign suggestions."""
  marketingCampaignSuggestionItems(
    """The number of elements of marketing campaign suggestions to return."""
    size: Int
  ): [MarketingCampaignSuggestionItem!]!

  """List of a shop's marketing campaigns."""
  marketingCampaigns(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MarketingCampaignSortKeys = CREATED_AT

    """
    Supported filter parameters:
     - `title`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): MarketingCampaignConnection!

  """Returns a MarketingEvent resource by ID."""
  marketingEvent(
    """The ID of the MarketingEvent to return."""
    id: ID!
  ): MarketingEvent

  """Returns a marketing recommendation resource by ID."""
  marketingRecommendation(
    """The ID of the marketing recommendation to return."""
    id: ID!
  ): MarketingRecommendation

  """List of marketing recommendations."""
  marketingRecommendations: [MarketingRecommendation!]!

  """Returns a specific node by ID."""
  node(
    """The ID of the Node to return."""
    id: ID!
  ): Node

  """Returns the list of nodes with the given IDs."""
  nodes(
    """The IDs of the Nodes to return."""
    ids: [ID!]!
  ): [Node]!

  """
  The Apps that are recommended to be installed for creating marketing activity.
  """
  nonInstalledMarketingApps: [App!]!

  """The shop's online store channel."""
  onlineStore: OnlineStore!

  """Returns an Order resource by ID."""
  order(
    """The ID of the Order to return."""
    id: ID!
  ): Order

  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of orders placed."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = PROCESSED_AT

    """
    Supported filter parameters:
     - `status`
     - `financial_status`
     - `fulfillment_status`
     - `source_name`
     - `chargeback_status`
     - `risk_level`
     - `customer_id`
     - `email`
     - `credit_card_last4`
     - `processed_at`
     - `checkout_token`
     - `cart_token`
     - `location_id`
     - `channel_id`
     - `sales_channel`
     - `discount_code`
     - `test`
     - `fraud_protection_level`
     - `reference_location_id`
     - `tag`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): OrderConnection!

  """Returns a PackingSlipTemplate for the Shop."""
  packingSlipTemplate: PackingSlipTemplate!

  """The packing slips PDF if it exists, given a unique identifier."""
  packingSlipsPdf(
    """The identifier returned from the packingSlipsPdfCreate mutation."""
    pdfIdentifier: String!
  ): URL

  """The payment authorization settings for the shop."""
  paymentAuthorizationSettings: PaymentAuthorizationSettings!

  """Returns a Provider resource by ID."""
  paymentProvider(
    """The ID of the PaymentProvider to return."""
    id: ID!
  ): PaymentProvider

  """List of payment providers."""
  paymentProviders(
    """Search for providers by group."""
    group: ProviderGroup

    """Search by country."""
    countries: [CountryCode!]

    """Filter only eligible providers."""
    eligibleOnly: Boolean = true

    """Filter only enabled providers."""
    enabledOnly: Boolean

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PaymentProviderConnection!

  """Lookup a price rule by ID."""
  priceRule(
    """The ID of the PriceRule to return."""
    id: ID!
  ): PriceRule

  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """List of price rules."""
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: PriceRuleSortKeys = ID

    """
    Supported filter parameters:
     - `starts_at`
     - `ends_at`
     - `status`
     - `discount_type`
     - `times_used`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): PriceRuleConnection!

  """Returns a Product resource by ID."""
  product(
    """The ID of the Product to return."""
    id: ID!
  ): Product

  """Return a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product

  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection!

  """Returns a ProductVariant resource by ID."""
  productVariant(
    """The ID of the ProductVariant to return."""
    id: ID!
  ): ProductVariant

  """List of the product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `product_type`
     - `vendor`
     - `managed`
     - `managed_by`
     - `inventory_quantity`
     - `product_id`
     - `collection`
     - `gift_card`
     - `barcode`
     - `location_id`
     - `updated_at`
     - `sku`
     - `published_status`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): ProductVariantConnection!

  """List of products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `product_type`
     - `vendor`
     - `gift_card`
     - `sku`
     - `barcode`
     - `inventory_total`
     - `created_at`
     - `updated_at`
     - `out_of_stock_somewhere`
     - `published_status`
     - `tag`
     - `error_feedback`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): ProductConnection!

  """Lookup a publication by ID."""
  publication(
    """The ID of the Publication to return."""
    id: ID!
  ): Publication

  """List of the active publications."""
  publications(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): PublicationConnection!

  """Returns a Refund resource by ID."""
  refund(
    """The ID of the Refund to return."""
    id: ID!
  ): Refund

  """
  Generated messages for the resource type provided.
  Typically they appear on top of the resource page.

  """
  resourceAlerts(
    """The resource type to filter the alerts by."""
    type: ResourceType!
  ): [ResourceAlert!]!

  """Returns a return label resource by ID."""
  returnLabel(
    """The ID of the DeliveryReturnLabel to return."""
    id: ID!
  ): DeliveryReturnLabel

  """Lookup a script tag resource by ID."""
  scriptTag(
    """The ID of the ScriptTag to return."""
    id: ID!
  ): ScriptTag

  """List of script tags."""
  scriptTags(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """The source URL of the script tag to filter by."""
    src: URL
  ): ScriptTagConnection!

  """List of saved shipping packagings used to pack shipments."""
  shippingPackagings(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): DeliveryShippingPackagingConnection!

  """
  Returns a Shop resource corresponding to access token used in request.
  """
  shop: Shop!

  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: ShopifyPaymentsAccount

  """Returns a StaffMember resource by ID."""
  staffMember(
    """
    The ID of the staff account to return. If no ID is provided, the staff account making the query (if any) is returned.
    """
    id: ID
  ): StaffMember

  """Information about support through the Shopify admin."""
  support: Support!

  """A list of tax jurisdictions in a provided region."""
  taxJurisdictions(
    """Search for tax jurisdictions within the specified tax region."""
    taxRegion: CountryCode!

    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Returns the elements that come after the specified cursor."""
    after: String
  ): TaxJurisdictionConnection!

  """Returns a TaxOverride resource by ID."""
  taxOverride(
    """The ID of the TaxOverride to return."""
    id: ID!
  ): TaxOverride

  """Available tax override zones for the country."""
  taxOverrideZones(
    """The country to retrieve tax override zones for."""
    countryCode: CountryCode!
  ): [TaxOverrideZone!]

  """List of a shop's tax overrides."""
  taxOverrides(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `country`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): TaxOverrideConnection!

  """A list of regions the shop will charge taxes in."""
  taxRegions: [TaxRegion!]!

  """The list of tax registrations that exist for the specified region."""
  taxRegistrations(
    """The tax region to retrieve tax registrations from."""
    taxRegion: CountryCode!
  ): [TaxRegistration!]!

  """List of tracking carriers available for a shop."""
  trackingCarriers(
    """Tracking number to filter carriers by."""
    trackingNumber: String
  ): [TrackingCarrier!]!

  """Returns a webhook subscription by ID."""
  webhookSubscription(
    """The ID of the WebhookSubscription to return."""
    id: ID!
  ): WebhookSubscription

  """List of webhook subscriptions."""
  webhookSubscriptions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: WebhookSubscriptionSortKeys = CREATED_AT

    """
    Supported filter parameters:
     - `created_at`
     - `updated_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """Callback URL to filter by."""
    callbackUrl: URL

    """Response format to filter by."""
    format: WebhookSubscriptionFormat

    """List of webhook subscription topics to filter by."""
    topics: [WebhookSubscriptionTopic!]
  ): WebhookSubscriptionConnection!
}

"""A checkout line item that doesn't represent a registered product."""
input QuickSaleLineItemInput {
  """Price of the line item, used for custom items."""
  price: Decimal

  """Title of the line item, used for custom items."""
  title: String
}

"""Type/differentiator of rates."""
enum RateDifferentiator {
  """Domestic online."""
  DOMESTIC_ONLINE

  """Domestic card present."""
  DOMESTIC_CARD_PRESENT

  """International online."""
  INTERNATIONAL_ONLINE

  """International card present."""
  INTERNATIONAL_CARD_PRESENT
}

"""Amount charged to a shop each billing interval."""
type RecurringAppPlan implements Node {
  """Globally unique identifier."""
  id: ID!

  """Price charged every billing interval."""
  price: MoneyV2!
}

"""Represents a refund of items or transactions in an order."""
type Refund implements Node & LegacyInteroperability {
  """When the refund was created."""
  createdAt: DateTime

  """Globally unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """Note associated with the refund."""
  note: String

  """The RefundLineItem resources attached to the refund."""
  refundLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): RefundLineItemConnection!

  """
  Whether the RefundLineItem resources were restocked when the refund was created.
  """
  restocked: Boolean!

  """Staff member who created the refund."""
  staffMember: StaffMember

  """Total amount refunded across all the transactions for this refund."""
  totalRefunded: MoneyV2! @deprecated(reason: "Use `totalRefundedSet` instead")

  """
  Total amount refunded across all the transactions for this refund in shop and presentment currencies.
  """
  totalRefundedSet: MoneyBag!

  """Transactions associated with the refund."""
  transactions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): OrderTransactionConnection!

  """When the refund was last updated."""
  updatedAt: DateTime!
}

type RefundCreatePayload {
  """The order associated with the created refund."""
  order: Order

  """The created refund."""
  refund: Refund

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the fields to create a refund."""
input RefundInput {
  """
  The currency (in ISO format) that is used to refund the order. This must be
  the presentment currency (the currency used by the customer) and is a required
  field for orders where the currency and presentment currency differ.
  """
  currency: CurrencyCode

  """Order ID for which the refund is created."""
  orderId: ID!

  """
  Whether to add the line items back to the store's inventory. This argument is
  deprecated: Use `restock_type` on refund line items instead.
  """
  restock: Boolean

  """An optional note attached to a refund."""
  note: String

  """Whether to send a refund notification to the customer."""
  notify: Boolean

  """Specifies how much of the shipping cost to refund."""
  shipping: ShippingRefundInput

  """A list of line items to refund."""
  refundLineItems: [RefundLineItemInput!]

  """A list of transactions involved in the refund."""
  transactions: [OrderTransactionInput!]
}

"""Represents the details about a refunded line item."""
type RefundLineItem {
  """The fulfillment line item in the refund."""
  fulfillmentLineItem: FulfillmentLineItem

  """
  Returns a LineItem resource. This represents the LineItem in the non-refund context.
  """
  lineItem: LineItem!

  """The inventory restock location."""
  location: Location

  """Returns the price of a refunded line item."""
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """
  Returns the price of a refunded line item in shop and presentment currencies.
  """
  priceSet: MoneyBag!

  """Returns the quantity of a refunded line item."""
  quantity: Int!

  """Represents the type of restock for the refunded line item."""
  refundType: RefundLineItemRefundType! @deprecated(reason: "Use `restockType` instead")

  """Whether or not the line item was removed from the order."""
  removal: Boolean!

  """Represents the type of restock for the refunded line item."""
  restockType: RefundLineItemRestockType!

  """
  Whether the refunded line item was restocked. Not applicable in the context of a SuggestedRefund.
  """
  restocked: Boolean!

  """Returns the subtotal price of a refunded line item."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  Returns the subtotal price of a refunded line item in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """Returns the total tax charged on a refunded line item."""
  totalTax: Money! @deprecated(reason: "Use `totalTaxSet` instead")

  """
  Returns the total tax charged on a refunded line item in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag!
}

type RefundLineItemConnection {
  """A list of edges."""
  edges: [RefundLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type RefundLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of RefundLineItemEdge."""
  node: RefundLineItem!
}

"""Specifies the fields required to return line items on a refund."""
input RefundLineItemInput {
  """The ID of the line item in the refund."""
  lineItemId: ID!

  """The quantity of the associated line item that was returned."""
  quantity: Int!

  """
  The type of restock for this line item. This argument is deprecated: Use `restock_type` instead.
  """
  refundType: RefundLineItemRefundType

  """The type of restock for this line item."""
  restockType: RefundLineItemRestockType

  """
  The intended location for restocking if `refundType` is not `NO_RESTOCK`
  """
  locationId: ID

  """Whether or not the line item was removed from the order."""
  removal: Boolean

  """The ID of the fulfillment line item in the refund."""
  fulfillmentLineItemId: ID
}

"""The type of restock performed for a particular refund line item."""
enum RefundLineItemRefundType {
  """Refund line item was returned."""
  RETURN

  """Refund line item was canceled."""
  CANCEL

  """
  Refund line item was restocked, without specifically being identified as a return or cancelation.
  """
  LEGACY_RESTOCK

  """Refund line item was not restocked."""
  NO_RESTOCK
}

"""The type of restock performed for a particular refund line item."""
enum RefundLineItemRestockType {
  """Refund line item was returned."""
  RETURN

  """Refund line item was canceled."""
  CANCEL

  """
  Refund line item was restocked, without specifically being identified as a return or cancelation.
  """
  LEGACY_RESTOCK

  """Refund line item was not restocked."""
  NO_RESTOCK
}

"""
Presents information or problems to merchants, with 1 or more actions that they can take.
They can optionally have a specific icon and be dismissed by merchants.

"""
type ResourceAlert {
  """
  Buttons in the alert that link to related information.
  For example, _View risk assessment_.

  """
  actions: [ResourceAlertAction!]!

  """Details about the alert."""
  content: HTML!

  """
  Unique identifier that appears when an alert is manually closed by the merchant.
  Most alerts cannot be manually closed.

  """
  dismissibleHandle: String

  """Icon that displays with the alert."""
  icon: ResourceAlertIcon

  """Indication of how important the alert is."""
  severity: ResourceAlertSeverity!

  """The name of the alert."""
  title: String!
}

"""An action associated to a resource alert."""
type ResourceAlertAction {
  """Whether the action is primary or not."""
  primary: Boolean!

  """Resource for the action to show."""
  show: String

  """Action title."""
  title: String!

  """Action target URL."""
  url: URL!
}

enum ResourceAlertIcon {
  CHECKMARK_CIRCLE
  INFORMATION_CIRCLE
}

enum ResourceAlertSeverity {
  DEFAULT
  INFO
  WARNING
  SUCCESS
  CRITICAL
  ERROR @deprecated(reason: "`ERROR` severity is being deprecated in favour of `WARNING` or `CRITICAL` instead")
}

"""List of export formats available."""
enum ResourceExportableType {
  ORDERS
  PRODUCTS
  PRICE_RULES
}

type ResourceFeedback {
  appFeedback: [AppFeedback!]! @deprecated(reason: "Use `details` instead")

  """List of AppFeedback detailing issues regarding a resource."""
  details: [AppFeedback!]!

  """Summary of resource feedback pertaining to the resource."""
  summary: String!
}

"""A resource limit represents the limits that the resource has."""
type ResourceLimit {
  """Whether or not the resource is available."""
  available: Boolean!

  """Quantity available. If null the quantity available is unlimited."""
  quantityAvailable: Int

  """Quantity limit of the resource. If null the quantity is unlimited."""
  quantityLimit: Int

  """
  Quantity used of the resource. If null the quantity used cannot be retrieved.
  """
  quantityUsed: Int
}

"""Resource locations in admin."""
enum ResourceLocation {
  ACTION
  INDEX
  SHOW
  NEW
}

"""
A resource publication represents that a resource has been published to a publication.
"""
type ResourcePublication {
  """The channel the resource publication is published to."""
  channel: Channel! @deprecated(reason: "Use `publication` instead")

  """Whether the resource publication is published or not."""
  isPublished: Boolean!

  """The publication the resource publication is published to."""
  publication: Publication!

  """
  The date that the resource publication was or is going to be published to the publication.
  """
  publishDate: DateTime!

  """The resource published to the publication."""
  publishable: Publishable!
}

type ResourcePublicationConnection {
  """A list of edges."""
  edges: [ResourcePublicationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ResourcePublicationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ResourcePublicationEdge."""
  node: ResourcePublication!
}

"""Resource types in admin."""
enum ResourceType {
  ORDERS
  DRAFT_ORDERS
  PRODUCTS
  VARIANTS
  COLLECTIONS
  PAGES
  BLOGS
  ARTICLES
  CUSTOMERS
  PRICE_RULES
  ABANDONED_CHECKOUTS

  """Resource type for Apps."""
  APPS

  """Resource type for Marketing Campaigns."""
  MARKETING_CAMPAIGNS

  """Resource type for Marketing Activities."""
  MARKETING_ACTIVITIES

  """Resource type for External Marketing Activities."""
  EXTERNAL_MARKETING_ACTIVITIES

  """Resource type for Marketing Activity Reports."""
  MARKETING_ACTIVITY_REPORTS

  """Resource type for Marketing Summary."""
  MARKETING_SUMMARY
  CHECKOUTS @deprecated(reason: "checkouts is no longer supported")
  DISCOUNTS @deprecated(reason: "discounts is no longer supported, use `PRICE_RULES` instead")
  MARKETING @deprecated(reason: "marketing is no longer supported")
}

type ReturnLabelPurchasePayload {
  """Asynchronous job purchasing the return label."""
  job: Job

  """The return label enqueued for purchase."""
  returnLabel: DeliveryReturnLabel

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ReturnLabelSendEmailPayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ReturnLabelUpdatePayload {
  """The return label that was updated."""
  returnLabel: DeliveryReturnLabel

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a risk assessment for an order."""
type RiskAssessment {
  """Optional facts used to describe the risk assessment."""
  facts(
    """The sort order for the risk assessment facts."""
    sortKey: FactSortKeys = DEFAULT

    """Truncate the array result to this size."""
    first: Int
  ): [RiskFact!]!

  """The provider of the risk assessment."""
  providerName: String!

  """
  The likelihood that the order is fraudulent, based on this risk assessment.
  """
  result: RiskAssessmentResult!
}

"""List of possible values for a RiskAssessment result."""
enum RiskAssessmentResult {
  HIGH
  MEDIUM
  LOW
  NONE
  PENDING
}

"""
A risk fact belongs to a single risk assessment and serves to provide additional
context for an assessment. Risk facts are not necessarily tied to the result of
the recommendation.
"""
type RiskFact {
  """A description of the fact."""
  description: String!

  """
  Indicates whether the fact is a negative, neutral or positive contributor with regards to risk.
  """
  sentiment: RiskFactSentiment!
}

"""List of possible values for a RiskFact sentiment."""
enum RiskFactSentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

"""
A saved search is a representation of a search query saved in the admin.
"""
type SavedSearch implements Node & LegacyInteroperability {
  """The filters of a saved search."""
  filters: [SearchFilter!]!

  """Globally unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The name of a saved search."""
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!

  """The type of resource this saved search is searching in."""
  resourceType: SearchResultType!

  """The search terms of a saved search."""
  searchTerms: String!
}

type SavedSearchConnection {
  """A list of edges."""
  edges: [SavedSearchEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Specifies the fields required to create a saved search."""
input SavedSearchCreateInput {
  """The type of resouce this saved search is searching in."""
  resourceType: SearchResultType!

  """A descriptive name of the saved search."""
  name: String!

  """
  The query string of a saved search. This includes search terms and filters.
  """
  query: String!
}

type SavedSearchCreatePayload {
  """The saved search that was created."""
  savedSearch: SavedSearch

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the fields to delete a saved search."""
input SavedSearchDeleteInput {
  """ID of the saved search to delete."""
  id: ID!
}

type SavedSearchDeletePayload {
  """The id of the saved search that was deleted."""
  deletedSavedSearchId: ID

  """The shop of the saved search that was deleted."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type SavedSearchEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SavedSearchEdge."""
  node: SavedSearch!
}

"""Specifies the fields required to update a saved search."""
input SavedSearchUpdateInput {
  """ID of the saved search to update."""
  id: ID!

  """A descriptive name of the saved search."""
  name: String

  """
  The query string of a saved search. This included search terms and filters.
  """
  query: String
}

type SavedSearchUpdatePayload {
  """The saved search that was updated."""
  savedSearch: SavedSearch

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Script discount applications capture the intentions of a discount that
was created by a Shopify Script for an order's line item or shipping line.

"""
type ScriptDiscountApplication implements DiscountApplication {
  """
  The method by which the discount's value is allocated to its entitled items.
  """
  allocationMethod: DiscountApplicationAllocationMethod!

  """The description of the application as defined by the Script."""
  description: String!

  """
  An ordered index which can be used to identify the discount application and indicate the precedence
  of the discount application for calculations.

  """
  index: Int!

  """
  Which lines of targetType on the order that the discount is allocated over.
  """
  targetSelection: DiscountApplicationTargetSelection!

  """
  The type of line on the order that the discount is applicable towards.
  """
  targetType: DiscountApplicationTargetType!

  """The value of the discount application."""
  value: PricingValue!
}

"""
A script tag represents remote JavaScript code that is loaded into the pages of
a shop's storefront or the order status page of checkout.

"""
type ScriptTag implements Node & LegacyInteroperability {
  """The date and time when the script tag was created."""
  createdAt: DateTime!

  """
  The page or pages on the online store that the script should be included.
  """
  displayScope: ScriptTagDisplayScope!

  """Globally unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The URL to the remote script."""
  src: URL!

  """The date and time when the script tag was last updated."""
  updatedAt: DateTime!
}

type ScriptTagConnection {
  """A list of edges."""
  edges: [ScriptTagEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ScriptTagCreatePayload {
  """The script tag that was created."""
  scriptTag: ScriptTag

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type ScriptTagDeletePayload {
  """The ID of the deleted script tag."""
  deletedScriptTagId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
The page or pages on the online store where the script should be included.

"""
enum ScriptTagDisplayScope {
  """
  Include the script on both the web storefront and the order status page.
  """
  ALL

  """Include the script only on the order status page."""
  ORDER_STATUS

  """Include the script only on the web storefront."""
  ONLINE_STORE
}

type ScriptTagEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ScriptTagEdge."""
  node: ScriptTag!
}

"""
Specifies the input fields for a script tag.

"""
input ScriptTagInput {
  """The URL of the remote script."""
  src: URL

  """
  The page or pages on the online store where the script should be included.
  """
  displayScope: ScriptTagDisplayScope
}

type ScriptTagUpdatePayload {
  """The script tag that was updated."""
  scriptTag: ScriptTag

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""A filter in a search query represented by a key value pair."""
type SearchFilter {
  """The key of the search filter."""
  key: String!

  """The value of the search filter."""
  value: String!
}

"""
A list of search filters along with their specific options in value and label pair for filtering.
"""
type SearchFilterOptions {
  """A list of options that can be use to filter product availability."""
  productAvailability: [FilterOption!]!
}

"""Represents an individual result returned from a search."""
type SearchResult {
  """Returns the search result description text."""
  description: String

  """Returns the Image resource presented to accompany a search result."""
  image: Image

  """Returns the ID of the resource returned in the search result."""
  reference: Node!

  """Returns the resource title."""
  title: String!

  """Returns the absolute URL to the resource in the search result."""
  url: URL!
}

"""The connection type for SearchResult."""
type SearchResultConnection {
  """A list of edges."""
  edges: [SearchResultEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  resultsAfterCount: Int!
}

type SearchResultEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of SearchResultEdge."""
  node: SearchResult!
}

"""Specifies the type of resources to be returned from a search."""
enum SearchResultType {
  ORDER
  CUSTOMER
  PRODUCT
  ONLINE_STORE_PAGE
  ONLINE_STORE_BLOG
  ONLINE_STORE_ARTICLE
  COLLECTION
  DRAFT_ORDER
  PRICE_RULE

  """An automatic discount."""
  AUTOMATIC_DISCOUNT

  """Marketing activities represent marketing created via apps."""
  MARKETING_ACTIVITY

  """Marketing campaign is a group of marketing activities."""
  MARKETING_CAMPAIGN
}

"""
Custom properties that a shop owner can use to define product variants.
Multiple options can exist. Options are represented as: option1, option2, option3, etc.

"""
type SelectedOption {
  """The product option’s name."""
  name: String!

  """The product option’s value."""
  value: String!
}

"""SEO information."""
type SEO {
  """SEO Description."""
  description: String

  """SEO Title."""
  title: String
}

"""SEO information."""
input SEOInput {
  """SEO title of the product."""
  title: String

  """SEO description of the product."""
  description: String
}

"""Reasons for cancelling a shipping label."""
enum ShippingLabelCancellationReason {
  """Wrong mail service"""
  WRONG_MAIL_SERVICE

  """Wrong package size"""
  WRONG_PACKAGE_SIZE

  """Wrong shipment weight"""
  WRONG_WEIGHT

  """Can't mail by ship date"""
  WRONG_SHIP_DATE

  """Can't download label"""
  ERROR_DOWNLOADING_LABEL

  """Can't print label"""
  ERROR_PRINTING_LABEL

  """Wrong label format"""
  WRONG_LABEL_FORMAT

  """Label is too expensive"""
  LABEL_TOO_EXPENSIVE

  """Other"""
  OTHER
}

"""
Represents the shipping details that the customer chose for their order.
"""
type ShippingLine {
  """Whether the shipping line is custom."""
  custom: Boolean!

  """
  The discounts that have been allocated onto the shipping line by discount applications.

  """
  discountAllocations: [DiscountAllocation!]!

  """The pre-tax shipping price with discounts applied."""
  discountedPrice: MoneyV2! @deprecated(reason: "Use `discountedPriceSet` instead")

  """
  The pre-tax shipping price with discounts applied in shop and presentment currencies.
  """
  discountedPriceSet: MoneyBag!

  """The pre-tax shipping price without any discounts applied."""
  originalPrice: MoneyV2! @deprecated(reason: "Use `originalPriceSet` instead")

  """
  The pre-tax shipping price without any discounts applied in shop and presentment currencies.
  """
  originalPriceSet: MoneyBag!

  """Returns the price of the shipping line."""
  price: Money! @deprecated(reason: "Use `originalPriceSet` instead")

  """Returns the human-readable unique identifier for the shipping line."""
  shippingRateHandle: String

  """Returns the title of the shipping line."""
  title: String!
}

"""Specifies the shipping details for the order."""
input ShippingLineInput {
  """Price of the shipping rate."""
  price: Money

  """Human-readable unique identifier for the shipping rate."""
  shippingRateHandle: String

  """Title of the shipping rate."""
  title: String
}

"""The shipping method for the delivery."""
type ShippingMethod {
  """A unique code associated with the rate. For example: `expedited_mail`"""
  code: String!

  """
  A description of the rate, which customers will see at checkout.
  For example: `Includes tracking and insurance`.

  """
  label: String!
}

"""The type of package."""
enum ShippingPackageType {
  BOX
  FLAT_RATE
  ENVELOPE
  SOFT_PACK
  TUBE
}

"""Type of packaging."""
enum ShippingPackaging {
  """A shipping box."""
  BOX

  """A flat rate packaging supplied by a carrier."""
  FLAT_RATE

  """An envelope."""
  ENVELOPE

  """A soft-pack, bubble-wrap or vinyl envelope."""
  SOFT_PACK
}

"""A shipping rate to be applied to an order."""
type ShippingRate {
  """Carrier service that provides this rate."""
  carrierService: DeliveryCarrierService

  """Human-readable unique identifier for this shipping rate."""
  handle: String!

  """Maximum estimated number of business days until delivery."""
  maximumEstimatedBusinessDaysToDelivery: Int

  """Minimum estimated number of business days until delivery."""
  minimumEstimatedBusinessDaysToDelivery: Int

  """Price of this shipping rate."""
  price: MoneyV2!

  """Code defining the type of service provided."""
  serviceCode: String

  """Title of this shipping rate."""
  title: String!
}

"""Represents the shipping costs refunded on the Refund."""
type ShippingRefund {
  """The monetary value of the shipping fees to be returned."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The monetary value of the shipping fees to be returned in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The maximum amount of shipping fees currently refundable."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The maximum amount of shipping fees currently refundable in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """
  The monetary value of the tax allocated to shipping fees to be returned.
  """
  tax: Money! @deprecated(reason: "Use `taxSet` instead")

  """
  The monetary value of the tax allocated to shipping fees to be returned in shop and presentment currencies.
  """
  taxSet: MoneyBag!
}

"""Specifies the fields required to return shipping costs on a Refund."""
input ShippingRefundInput {
  """The monetary value of the shipping fees to be returned."""
  amount: Money

  """Whether a full refund is provided."""
  fullRefund: Boolean
}

"""
Represents the shop object.

"""
type Shop implements Node & HasMetafields {
  """Alert message that appears in the Shopify admin."""
  alerts: [ShopAlert!]!

  """The token required to query the shop's reports or dashboards."""
  analyticsToken: String!

  """List of app installations on the shop."""
  appInstallations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppInstallationSortKeys = INSTALLED_AT

    """The category of app installations to fetch."""
    category: AppInstallationCategory

    """The privacy level of app installations to fetch."""
    privacy: AppInstallationPrivacy = PUBLIC
  ): AppInstallationConnection! @deprecated(reason: "Use `QueryRoot.appInstallations` instead.")

  """Return active app links on the shop."""
  appLinks(
    """The type of the link resource to filter by."""
    type: ResourceType!

    """The location of the link resource to filter by."""
    location: ResourceLocation!

    """The ID of the link resource to filter by."""
    resourceId: ID

    """
    Whether to include links which are in-context. By default they are excluded.
    """
    includeInContext: Boolean
  ): [AppLink!]!

  """List of sales channels not currently installed on the shop."""
  availableChannelApps(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): AppConnection!

  """Determine available template options for a shop."""
  availableTemplateOptions(
    """The template resource type to filter by."""
    resourceType: ShopTemplateResource!
  ): [String!]! @deprecated(reason: "Will be moved to OnlineStore.")

  """Whether or not the specified beta is enabled on the shop."""
  beta(
    """The beta name."""
    name: String!
  ): Boolean!

  """The shop's billing address information."""
  billingAddress: MailingAddress!

  """List of channel app installations on the shop."""
  channelAppInstallations(
    """If true, don't include private channel app installations."""
    excludePrivateApps: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppInstallationSortKeys = INSTALLED_AT
  ): AppInstallationConnection! @deprecated(reason: "Use `appInstallations` instead")

  """Exposes the number of channels."""
  channelCount: Int! @deprecated(reason: "Use `publicationCount` instead")

  """List of the shop's active sales channels."""
  channels(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ChannelConnection! @deprecated(reason: "Use `QueryRoot.channels` instead.")

  """Specifies whether the shop supports checkouts via Checkout API."""
  checkoutApiSupported: Boolean!

  """Whether the shop should perform translation context collection."""
  collectTranslationContext: Boolean!

  """Return a collection by its handle."""
  collectionByHandle(
    """The handle of the collection."""
    handle: String!
  ): Collection @deprecated(reason: "Use `QueryRoot.collectionByHandle` instead.")

  """List of the shop's collection saved searches."""
  collectionSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")

  """List of the shop's collections."""
  collections(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CollectionSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `collection_type`
     - `updated_at`
     - `published_status`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): CollectionConnection! @deprecated(reason: "Use `QueryRoot.collections` instead.")

  """Countries that have been defined in shipping zones for the shop."""
  countriesInShippingZones: CountriesInShippingZones!

  """The three letter code for the shop's currency."""
  currencyCode: CurrencyCode!

  """The shop's customer account requirement preference."""
  customerAccounts: ShopCustomerAccountsSetting!

  """List of the shop's customer saved searches."""
  customerSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSavedSearchSortKeys = ID

    """
    Supported filter parameters:
     - `name`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.customerSavedSearches` instead.")

  """Tags added to customer accounts."""
  customerTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """Customer accounts associated to the shop."""
  customers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: CustomerSortKeys = ID

    """
    Supported filter parameters:
     - `total_spent`
     - `orders_count`
     - `order_date`
     - `accepts_marketing`
     - `last_abandoned_order_date`
     - `state`
     - `country`
     - `email`
     - `phone`
     - `customer_date`
     - `updated_at`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): CustomerConnection! @deprecated(reason: "Use `QueryRoot.customers` instead.")

  """The shop's meta description used in search engine results."""
  description: String

  """List of the shop's draft order saved searches."""
  draftOrderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.draftOrderSavedSearches` instead.")

  """Tags added to draft orders."""
  draftOrderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of saved draft orders on the shop."""
  draftOrders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: DraftOrderSortKeys = ID

    """
    Supported filter parameters:
     - `status`
     - `updated_at`
     - `customer_id`
     - `created_at`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): DraftOrderConnection! @deprecated(reason: "Use `QueryRoot.draftOrders` instead.")

  """The shop's contact e-mail address."""
  email: String!

  """The presentment currencies enabled for the shop."""
  enabledPresentmentCurrencies: [CurrencyCode!]!

  """Collection of products that charge EU Digital Goods VAT Tax on."""
  euDigitalGoodsCollection: Collection

  """Determine the shop's group assignment for an experiment."""
  experimentAssigment(
    """The name of the experiment."""
    name: String!
  ): String

  """Experiments on the shop."""
  experiments: Experiments!

  """The shop's features."""
  features: ShopFeatures!

  """List of the shop's installed fulfillment services."""
  fulfillmentServices: [FulfillmentService!]!

  """Google Ads info for this shop."""
  googleAdsSettings: GoogleAdsSettings!

  """Whether the shop has an active tax service."""
  hasActiveTaxService: Boolean!

  """Whether a shop has at least one tax service."""
  hasTaxService: Boolean!

  """The shop's time zone as defined by the IANA."""
  ianaTimezone: String!

  """Globally unique identifier."""
  id: ID!

  """List of apps that are installed on the shop."""
  installedApps(
    """
    Whether or not to only return visible apps. By default, only visible apps are returned.
    Visible apps are ones which can be seen on the installed apps page.
    To return *any* installed app (including non-visible ones), set this to `false`.

    """
    visibleOnly: Boolean = true

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: AppsSortKeys = TITLE
  ): AppConnection! @deprecated(reason: "Use `appInstallations` instead")

  """List of the shop's inventory items."""
  inventoryItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """
    Supported filter parameters:
     - `id`
     - `sku`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): InventoryItemConnection! @deprecated(reason: "Use `QueryRoot.inventoryItems` instead.")

  """Determine whether a milestone has been completed."""
  isMilestoneComplete(
    """The milestone to check."""
    milestone: ShopMilestone!
  ): Boolean!

  """Whether or not the shop is trackable."""
  isTrackable: Boolean!

  """
  The number of pendings orders on the shop.
  Limited to a maximum of 10000.

  """
  limitedPendingOrderCount: LimitedPendingOrderCount!

  """List of active locations of the shop."""
  locations(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: LocationSortKeys = NAME

    """
    Supported filter parameters:
     - `name`
     - `address1`
     - `address2`
     - `city`
     - `zip`
     - `province`
     - `country`
     - `active`
     - `legacy`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """If true, also include the legacy locations of fulfillment services."""
    includeLegacy: Boolean = false

    """If true, also include the locations that are deactivated."""
    includeInactive: Boolean = false
  ): LocationConnection! @deprecated(reason: "Use `QueryRoot.locations` instead.")

  """Shop's marketing actions."""
  marketingActions(
    """Resource type the marketing action will be used for."""
    type: ResourceType!

    """Location where the marketing action will be used."""
    location: ResourceLocation!

    """Resource ID of the item the marketing action is being used for."""
    resourceId: ID
  ): [AppLink!]!

  """List of a shop's marketing activities."""
  marketingEvents(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: MarketingEventSortKeys = ID

    """
    Supported filter parameters:
     - `description`
     - `started_at`
     - `type`
     - `app_id`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): MarketingEventConnection!

  """Requests for feedback for the merchant from Shopify."""
  merchantFeedback(
    """The ID of the feedback form."""
    id: Int!
  ): MerchantFeedback

  """The metafield associated with the resource."""
  metafield(
    """Container for a set of metafields (maximum of 20 characters)."""
    namespace: String!

    """Identifier for the metafield (maximum of 30 characters)."""
    key: String!
  ): Metafield

  """A paginated list of metafields associated with the resource."""
  metafields(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): MetafieldConnection!

  """
  Milestones used to determine a merchant's progress through their shop's setup.
  """
  milestones: [ShopMilestoneStatus!]!

  """The shop's .myshopify.com domain name."""
  myshopifyDomain: String!

  """The shop's name."""
  name: String!

  """Shop's navigation items."""
  navigationItems(
    """The type of navigation items to filter by."""
    type: NavigationItemV2Type!
  ): [NavigationItemV2!]!

  """The navigation settings of the shop."""
  navigationSettings: [NavigationItem!]!

  """The shop's online store channel."""
  onlineStore: OnlineStore @deprecated(reason: "Use QueryRoot.onlineStore instead.")

  """List of the shop's order saved searches."""
  orderSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.orderSavedSearches` instead.")

  """Tags added to orders."""
  orderTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of orders placed on the shop."""
  orders(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: OrderSortKeys = PROCESSED_AT

    """
    Supported filter parameters:
     - `status`
     - `financial_status`
     - `fulfillment_status`
     - `source_name`
     - `chargeback_status`
     - `risk_level`
     - `customer_id`
     - `email`
     - `credit_card_last4`
     - `processed_at`
     - `checkout_token`
     - `cart_token`
     - `location_id`
     - `channel_id`
     - `sales_channel`
     - `discount_code`
     - `test`
     - `fraud_protection_level`
     - `reference_location_id`
     - `tag`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): OrderConnection! @deprecated(reason: "Use `QueryRoot.orders` instead.")

  """List of a shop's payment gateways."""
  paymentProviderConfigurations(
    """Filter only currently active gateways."""
    enabledOnly: Boolean
  ): [PaymentProviderConfiguration!]!

  """Settings related to payments."""
  paymentSettings: PaymentSettings!

  """Number of pending orders on the shop."""
  pendingOrderCount: Int! @deprecated(reason: "Use `limitedPendingOrderCount` instead")

  """The shop's plan."""
  plan: ShopPlan!

  """Shop's POS links."""
  posLinks(
    """The type of the link resource to filter by."""
    type: PosLinkResourceType!

    """The location of the link resource to filter by."""
    location: PosLinkResourceLocation!

    """The ID of the link resource to filter by."""
    resourceId: ID
  ): [PosLink!]!

  """List of the shop's price rule saved searches."""
  priceRuleSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.priceRuleSavedSearches` instead.")

  """List of the shop’s price rules."""
  priceRules(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: PriceRuleSortKeys = ID

    """
    Supported filter parameters:
     - `starts_at`
     - `ends_at`
     - `status`
     - `discount_type`
     - `times_used`
     - `updated_at`
     - `created_at`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): PriceRuleConnection! @deprecated(reason: "Use `QueryRoot.priceRules` instead.")

  """The shop's primary domain name."""
  primaryDomain: Domain!

  """Return a product by its handle."""
  productByHandle(
    """The handle of the product."""
    handle: String!
  ): Product @deprecated(reason: "Use `QueryRoot.productByHandle` instead.")

  """All images of all products of the shop."""
  productImages(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductImageSortKeys = CREATED_AT

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): ImageConnection!

  """List of the shop's product saved searches."""
  productSavedSearches(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): SavedSearchConnection! @deprecated(reason: "Use `QueryRoot.productSavedSearches` instead.")

  """Tags added to products."""
  productTags(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """Types added to products."""
  productTypes(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of the shop's product variants."""
  productVariants(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductVariantSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `product_type`
     - `vendor`
     - `managed`
     - `managed_by`
     - `inventory_quantity`
     - `product_id`
     - `collection`
     - `gift_card`
     - `barcode`
     - `location_id`
     - `updated_at`
     - `sku`
     - `published_status`
     - `tag`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String
  ): ProductVariantConnection! @deprecated(reason: "Use `QueryRoot.productVariants` instead.")

  """Vendors added to products."""
  productVendors(
    """Returns up to the first `n` elements from the list."""
    first: Int!
  ): StringConnection!

  """List of the shop's products."""
  products(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ProductSortKeys = ID

    """
    Supported filter parameters:
     - `title`
     - `product_type`
     - `vendor`
     - `gift_card`
     - `sku`
     - `barcode`
     - `inventory_total`
     - `created_at`
     - `updated_at`
     - `out_of_stock_somewhere`
     - `published_status`
     - `tag`
     - `error_feedback`

    See the detailed [search syntax](https://help.shopify.com/api/getting-started/search-syntax).

    """
    query: String

    """
    ID of an existing saved search.
    The search’s query string will be used as the query argument.

    """
    savedSearchId: ID
  ): ProductConnection! @deprecated(reason: "Use `QueryRoot.products`.")

  """Exposes the number of publications."""
  publicationCount: Int!

  """Resource limits of a shop."""
  resourceLimits: ShopResourceLimits!

  """The URL of the rich text editor."""
  richTextEditorUrl: URL!

  """Return admin search results."""
  search(
    """The search query to filter by."""
    query: String!

    """The search result types to filter by."""
    types: [SearchResultType!]

    """Returns up to the first `n` elements from the list."""
    first: Int!

    """Returns the elements that come after the specified cursor."""
    after: String
  ): SearchResultConnection!

  """List of search filter options."""
  searchFilters: SearchFilterOptions!

  """Whether the shop has outstanding setup steps."""
  setupRequired: Boolean!

  """Countries that the shop ships to."""
  shipsToCountries: [CountryCode!]!

  """Whether an employee is impersonating the current user."""
  shopifyEmployeeSession: Boolean!

  """Shopify Payments account information, including balances and payouts."""
  shopifyPaymentsAccount: ShopifyPaymentsAccount @deprecated(reason: "Use `QueryRoot.shopifyPaymentsAccount` instead.")

  """Whether or not show install mobile app banner."""
  showInstallMobileAppBanner: Boolean!

  """List of the shop's staff members."""
  staffMembers(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): StaffMemberConnection!

  """
  Storefront access token of a private application. Scoped per-application.
  """
  storefrontAccessTokens(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): StorefrontAccessTokenConnection!

  """The URL of the shop's storefront."""
  storefrontUrl: URL! @deprecated(reason: "Use `url` instead")

  """The shop's tax services."""
  taxServices: [TaxService!]!

  """Specifies whether or not taxes are charged for shipping."""
  taxShipping: Boolean!

  """
  The setting for whether applicable taxes are included in product prices.
  """
  taxesIncluded: Boolean!

  """The shop's time zone offset."""
  timezoneOffset: String!

  """The shop's time zone offset expressed in number of minutes."""
  timezoneOffsetMinutes: Int!

  """Whether or not the trial has expired."""
  trialExpired: Boolean! @deprecated(reason: "Use Shop.plan.trialExpired instead.")

  """Trial period information. If null the user is not in a trial period."""
  trialPeriod: TrialPeriod @deprecated(reason: "Use Shop.plan.trialPeriod instead.")

  """Whether or not the shop has a trial plan."""
  trialPlan: Boolean! @deprecated(reason: "Use Shop.plan.trial instead.")

  """All images uploaded to the shop."""
  uploadedImages(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ShopImageSortKeys = CREATED_AT

    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): ImageConnection!

  """The URL of the shop's storefront."""
  url: URL!

  """The shop's primary unit of weight for products and shipping."""
  weightUnit: WeightUnit!
}

"""Alert message that appears in the Shopify admin."""
type ShopAlert {
  """Button in the alert that links to related information."""
  action: ShopAlertAction!

  """Description of the alert."""
  description: String!
}

"""An action associated to a shop alert."""
type ShopAlertAction {
  """Action title."""
  title: String!

  """Action target URL."""
  url: URL!
}

"""
Possible branding of a shop.
Branding can be used to define the look of a shop including its styling and logo in the Shopify Admin.

"""
enum ShopBranding {
  SHOPIFY_GOLD
  SHOPIFY_PLUS
  ROGERS
  SHOPIFY
}

"""
Represents the shop's customer account requirement preference.

"""
enum ShopCustomerAccountsSetting {
  REQUIRED
  OPTIONAL
  DISABLED
}

type ShopDigitalGoodsTaxesCollectionUpdatePayload {
  """The updated shop."""
  shop: Shop!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents the feature set available to the shop.

"""
type ShopFeatures {
  """Whether a shop's admin can request Adwords credit."""
  allowedAdwordsCredit: Boolean!

  """Whether a shop has access to avalara avatax."""
  avalaraAvatax: Boolean!

  """Whether a shop has the better refunds view enabled."""
  betterRefunds: Boolean!

  """Branding of the shop."""
  branding: ShopBranding!

  """Whether a shop's storefront can have CAPTCHA protection."""
  captcha: Boolean!

  """
  Whether a shop's storefront can have CAPTCHA protection for domains not managed by Shopify.
  """
  captchaExternalDomains: Boolean!

  """Whether a shop has access to the dynamic remarketing feature."""
  dynamicRemarketing: Boolean!
  financialReports: Boolean! @deprecated(reason: "Financial reports are available for all merchants; this will always return true.")

  """Whether a shop can create gift cards."""
  giftCards: Boolean!

  """
  Display Harmonized System codes on products.  Used for customs when shipping cross-border.
  """
  harmonizedSystemCode: Boolean!

  """
  Whether to show the live view. Live view is hidden from merchants that are on a trial or don't have a storefront.
  """
  liveView: Boolean!

  """Whether to show the manually sort feature view."""
  manuallySortProductsInSmartCollectionsFeatureEnabled: Boolean!

  """Whether the multi-location functionality is enabled for this shop."""
  multiLocation: Boolean!

  """Whether a shop will see the new React version of /admin/orders."""
  newAdminOrderIndexRoute: Boolean!

  """Whether a shop has access to the onboarding visual."""
  onboardingVisual: Boolean!

  """
  Whether a shop has packing slip customization and printing in orders and fulfillment enabled.
  """
  packingSlips: Boolean!

  """
  Whether a shop is using the pseudotranslation feature. More information on https://github.com/Shopify/pseudolocalization.
  """
  pseudotranslation: Boolean!

  """Whether a shop has access to all reporting features."""
  reports: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean! @deprecated(reason: "Use Shop.plan.shopifyPlus instead.")

  """
  Whether to show metrics. Metrics are hidden for new merchants until they become meaningful.
  """
  showMetrics: Boolean!

  """Whether the shop has an online storefront."""
  storefront: Boolean!
}

"""
Balance and payout information for a
[Shopify Payments](https://help.shopify.com/manual/payments/shopify-payments/getting-paid-with-shopify-payments)
account. Balance includes all balances for the currencies supported by the shop.
You can also query for a list of payouts, where each payout includes the corresponding currencyCode field.

"""
type ShopifyPaymentsAccount implements Node {
  """Current balances in all currencies for the account."""
  balance: [MoneyV2!]!

  """All bank accounts configured for the Shopify Payments account."""
  bankAccounts(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyPaymentsBankAccountConnection!

  """Globally unique identifier."""
  id: ID!

  """
  The legal entity for the Shopify Payments account.

  """
  legalEntity: ShopifyPaymentsLegalEntity!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: ShopifyPaymentsPayoutTransactionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyPaymentsPayoutConnection!
}

"""
A balance debit represents the movement of funds away from a Shopify Payments
account's balance to a target account. This target account is selected depending
on the reason behind the balance debit.

"""
type ShopifyPaymentsBalanceDebit implements Node {
  """The payments account of the balance debit."""
  account: ShopifyPaymentsAccount!

  """The amount and currency of the balance debit."""
  amount: MoneyV2!

  """
  The time the balance debit was created at.

  """
  createdAt: DateTime!

  """
  A summary describing the balance debit.

  """
  description: String!

  """
  The reason behind a failed balance debit.

  """
  failureCode: ShopifyPaymentsBalanceDebitFailureCode

  """Globally unique identifier."""
  id: ID!

  """
  Set of key-value pairs that you can attach to a balance debit. This can be useful for storing additional
  information about the balance debit in a structured format.

  """
  metadata: JSON

  """
  The time the balance debit was processed at.

  """
  processedAt: DateTime

  """
  The reason behind the balance debit.

  """
  reasonCode: ShopifyPaymentsBalanceDebitReasonCode!

  """
  The status of a balance debit.

  """
  status: ShopifyPaymentsBalanceDebitStatus!
}

"""The reason behind a failed balance debit."""
enum ShopifyPaymentsBalanceDebitFailureCode {
  """
  There are insufficient funds in the payments account's balance to satisfy the balance debit amount.
  """
  INSUFFICIENT_FUNDS

  """Invalid payments account."""
  INVALID_ACCOUNT

  """Unknown failure."""
  UNKNOWN
}

type ShopifyPaymentsBalanceDebitPayload {
  """
  The balance debit that represents the movement of funds away from a Shopify Payments
            account's balance to a target account. This target account is selected depending
            on the reason behind the balance debit.
  """
  debit: ShopifyPaymentsBalanceDebit

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The reason behind the balance debit."""
enum ShopifyPaymentsBalanceDebitReasonCode {
  """The balance debit represents a capital remittance."""
  CAPITAL_REMITTANCE

  """The balance debit represents a chargeback protection fee."""
  CHARGEBACK_PROTECTION
}

"""
A balance debit reversal is a partial or full reversal of a debit.

"""
type ShopifyPaymentsBalanceDebitReversal implements Node {
  """The payments account of the reversal."""
  account: ShopifyPaymentsAccount!

  """The amount and currency of the reversal."""
  amount: MoneyV2!

  """
  A summary describing the reason the debit was reversed.

  """
  description: String!

  """
  The reason behind a failed balance debit reversal, if it failed or errored out.

  """
  failureCode: ShopifyPaymentsBalanceDebitReversalFailureCode

  """Globally unique identifier."""
  id: ID!

  """
  Set of key-value pairs that you can attach to a debit reversal.
  This can be useful for storing additional information about the reversal in a structured format.

  """
  metadata: JSON

  """
  The date and time the debit reversal was processed at.

  """
  processedAt: DateTime

  """
  The status of a balance debit reversal.

  """
  status: ShopifyPaymentsBalanceDebitReversalStatus!
}

"""The reason behind a failed balance debit reversal."""
enum ShopifyPaymentsBalanceDebitReversalFailureCode {
  """
  There are insufficient funds in the Shopify Payments platform account's balance to satisfy the reversal amount.
  """
  INSUFFICIENT_FUNDS

  """
  The reversal amount that was requested exceeds the debit's original amount.
  """
  REVERSAL_AMOUNT_EXCEEDED

  """Invalid payments account."""
  INVALID_ACCOUNT

  """Unknown failure."""
  UNKNOWN
}

"""The status associated to a balance debit reversal."""
enum ShopifyPaymentsBalanceDebitReversalStatus {
  """The debit was successfully reversed."""
  SUCCESS

  """
  The debit was not able to be reversed. See the failure code for more details.
  """
  FAILURE

  """The debit reversal request has been received but not yet processed."""
  PENDING

  """An error occurred when processing the balance debit reversal."""
  ERROR
}

type ShopifyPaymentsBalanceDebitReversePayload {
  """The object that contains the metadata about the reversal."""
  debitReversal: ShopifyPaymentsBalanceDebitReversal

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""The status associated to a balance debit."""
enum ShopifyPaymentsBalanceDebitStatus {
  """The funds were successfully debited from the account."""
  SUCCESS

  """
  The funds were not able to be debited from the account. See the failure code for more details.
  """
  FAILURE

  """The debit request has been received but not yet processed."""
  PENDING

  """An error occurred when processing the balance debit."""
  ERROR
}

"""
A bank account that can receive payouts.

"""
type ShopifyPaymentsBankAccount implements Node {
  """
  The account number of the bank account.

  """
  accountNumber: String!

  """
  The last digits of the account number (the rest is redacted).

  """
  accountNumberLastDigits: String!

  """
  The name of the bank.

  """
  bankName: String

  """
  The currency of the bank account.

  """
  currency: CurrencyCode!

  """Globally unique identifier."""
  id: ID!

  """
  All current and previous payouts made between the account and the bank account.
  """
  payouts(
    """Filter the direction of the payout."""
    transactionType: ShopifyPaymentsPayoutTransactionType

    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): ShopifyPaymentsPayoutConnection!

  """
  The routing number of the bank account.

  """
  routingNumber: String!

  """
  The status of the bank account.

  """
  status: ShopifyPaymentsBankAccountStatus!
}

type ShopifyPaymentsBankAccountConnection {
  """A list of edges."""
  edges: [ShopifyPaymentsBankAccountEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ShopifyPaymentsBankAccountEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsBankAccountEdge."""
  node: ShopifyPaymentsBankAccount!
}

"""The bank account status."""
enum ShopifyPaymentsBankAccountStatus {
  """A bank account that hasn't had any activity and that's not validated."""
  NEW

  """It was determined that the bank account exists."""
  VALIDATED

  """Bank account validation was successful."""
  VERIFIED

  """A payout to the bank account failed."""
  ERRORED
}

"""A legal entity for a payments account."""
type ShopifyPaymentsLegalEntity implements Node {
  """The company name of the legal entity."""
  companyName: String!

  """The family name of the legal entity."""
  familyName: String

  """The given name of the legal entity."""
  givenName: String

  """Globally unique identifier."""
  id: ID!
}

"""
Payouts represent the movement of money between a merchant's Shopify
Payments balance and their bank account.

"""
type ShopifyPaymentsPayout implements Node {
  """The bank account for the payout."""
  bankAccount: ShopifyPaymentsBankAccount!

  """The total amount and currency of the payout."""
  gross: MoneyV2! @deprecated(reason: "Use `net` instead")

  """Globally unique identifier."""
  id: ID!

  """
  The exact time when the payout was issued. The payout only contains
  balance transactions that were available at this time.

  """
  issuedAt: DateTime!

  """The total amount and currency of the payout."""
  net: MoneyV2!

  """The transfer status of the payout."""
  status: ShopifyPaymentsPayoutStatus!

  """The summary of the payout."""
  summary: ShopifyPaymentsPayoutSummary!

  """The direction of the payout."""
  transactionType: ShopifyPaymentsPayoutTransactionType!
}

type ShopifyPaymentsPayoutConnection {
  """A list of edges."""
  edges: [ShopifyPaymentsPayoutEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type ShopifyPaymentsPayoutEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of ShopifyPaymentsPayoutEdge."""
  node: ShopifyPaymentsPayout!
}

"""The transfer status of the payout."""
enum ShopifyPaymentsPayoutStatus {
  """
  The payout has been created and had transactions assigned to it, but
  it has not yet been submitted to the bank.

  """
  SCHEDULED

  """The payout has been submitted to the bank."""
  IN_TRANSIT

  """The payout has been successfully deposited into the bank."""
  PAID

  """The payout has been declined by the bank."""
  FAILED

  """The payout has been canceled by Shopify."""
  CANCELED
}

"""
Breakdown of the total fees and gross of each of the different types of transactions associated
with the payout.

"""
type ShopifyPaymentsPayoutSummary {
  """Total fees for all adjustments including disputes."""
  adjustmentsFee: MoneyV2!

  """Total gross amount for all adjustments including disputes."""
  adjustmentsGross: MoneyV2!

  """Total fees for all charges."""
  chargesFee: MoneyV2!

  """Total gross amount for all charges."""
  chargesGross: MoneyV2!

  """Total fees for all refunds."""
  refundsFee: MoneyV2!

  """Total gross amount for all refunds."""
  refundsFeeGross: MoneyV2!

  """Total fees for all reserved funds."""
  reservedFundsFee: MoneyV2!

  """Total gross amount for all reserved funds."""
  reservedFundsGross: MoneyV2!

  """Total fees for all retried payouts."""
  retriedPayoutsFee: MoneyV2!

  """Total gross amount for all retried payouts."""
  retriedPayoutsGross: MoneyV2!
}

"""The possible transaction types for a payout."""
enum ShopifyPaymentsPayoutTransactionType {
  """The payout is a deposit."""
  DEPOSIT

  """The payout is a withdrawal."""
  WITHDRAWAL
}

"""The set of valid sort keys for the uploadedImages query."""
enum ShopImageSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

type ShopImageUploadPayload {
  """Image uploaded."""
  image(
    """
    Image width in pixels between 1 and 2048. This argument is deprecated: Use `maxWidth` on `Image.transformedSrc` instead.
    """
    maxWidth: Int

    """
    Image height in pixels between 1 and 2048. This argument is deprecated: Use
    `maxHeight` on `Image.transformedSrc` instead.
    """
    maxHeight: Int

    """
    Crops the image according to the specified region. This argument is
    deprecated: Use `crop` on `Image.transformedSrc` instead.
    """
    crop: CropRegion

    """
    Image size multiplier for high-resolution retina displays. Must be between 1
    and 3. This argument is deprecated: Use `scale` on `Image.transformedSrc` instead.
    """
    scale: Int = 1
  ): Image

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Milestones used to determine a shop's progress through setup."""
enum ShopMilestone {
  """Setup payments gateway."""
  SETUP_PAYMENTS_GATEWAY

  """Setup shipping."""
  SETUP_SHIPPING

  """Setup tax."""
  SETUP_TAX

  """Setup unlock store."""
  SETUP_UNLOCK_STORE

  """Setup import store."""
  SETUP_IMPORT_STORE
}

type ShopMilestoneCompletePayload {
  """The milestone that was completed."""
  milestoneStatus: ShopMilestoneStatus

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a shop-specific milestone."""
type ShopMilestoneStatus {
  """Whether the shop has completed the milestone."""
  completed: Boolean!

  """The date and time the milestone was completed."""
  completedDate: DateTime

  """The milestone."""
  milestone: ShopMilestone!
}

"""
Represents the billing plan of the shop.

"""
type ShopPlan {
  """The name of the shop's billing plan."""
  displayName: String!

  """Url used to view current invoice."""
  invoiceUrl: URL!

  """Whether the shop is a partner development shop for testing purposes."""
  partnerDevelopment: Boolean!

  """Whether the shop has a Shopify Plus subscription."""
  shopifyPlus: Boolean!

  """Whether or not the shop has a trial plan."""
  trial: Boolean!

  """Whether or not the trial has expired."""
  trialExpired: Boolean!

  """Trial period information. If null the user is not in a trial period."""
  trialPeriod: TrialPeriod
}

"""Resource limits of a shop."""
type ShopResourceLimits {
  """Maximum number of product options allowed."""
  maxProductOptions: Int!

  """Maximum number of variants allowed."""
  maxProductVariants: Int!

  """
  Whether the shop has reached the limit of the number of URL redirects it can make for resources.
  """
  redirectLimitReached: Boolean!

  """
  SKU limits. If the shop has unlimited skus the quantity used cannot be retrieved.
  """
  skuResourceLimits: ResourceLimit!
}

type ShopTaxSettingsUpdatePayload {
  """The updated shop."""
  shop: Shop

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Possible resource type of a template."""
enum ShopTemplateResource {
  PRODUCT
  GIFT_CARD
}

"""
Filters products returned based on how they are sorted in a smart collection.
"""
enum SmartCollectionSortingType {
  AUTOMATICALLY_SORTED
  MANUALLY_SORTED
}

"""Represents data about a staff member's Shopify account."""
type StaffMember implements Node {
  """A description of the staff member's access level."""
  accountAccess: String!

  """Whether the staff member is active."""
  active: Boolean!

  """The image used as the user's avatar in the Shopify admin."""
  avatar(
    """
    The image width in pixels between 1 and 2048 This argument is deprecated: Use `maxWidth` on argument `image` instead.
    """
    maxWidth: Int

    """
    The image height in pixels between 1 and 2048 This argument is deprecated: Use `maxHeight` argument on `image` instead.
    """
    maxHeight: Int

    """The default image returned when the staff member has no image."""
    fallback: StaffMemberDefaultImage = DEFAULT
  ): Image!

  """All the businesses a staff member has access to."""
  businesses(
    """The type of business products, e.g. 'shop'."""
    productType: String
  ): [StaffMemberBusiness!]

  """The staff member's email address."""
  email: String!

  """Whether the staff member account exists."""
  exists: Boolean!

  """The staff member's first name."""
  firstName: String

  """Globally unique identifier."""
  id: ID!

  """The Identity account page URL for the staff member."""
  identityAccountUrl: URL!

  """The staff member's initials, if available."""
  initials: [String!]

  """Whether the user is the shop owner."""
  isShopOwner: Boolean!

  """The staff member's last name."""
  lastName: String

  """
  The staff member's preferred locale. Locale values use the format `language`
  or `language-COUNTRY`, where `language` is a two-letter language code, and
  `COUNTRY` is a two-letter country code. For example: `en` or `en-US`
  """
  locale: String!

  """The staff member's full name."""
  name: String!

  """The staff member's phone number."""
  phone: String

  """
  Data used to customize the Shopify admin when the staff member is logged in.
  """
  privateData: StaffMemberPrivateData!
}

"""Represents a business to which a staff user belongs."""
type StaffMemberBusiness {
  """
  A unique identifier representing the business in the business platform.
  """
  businessId: String!

  """
  An URL referencing a logo of the business to which the staff member belongs.
  """
  logo: URL

  """A name for the business to which the staff member belongs."""
  name: String!

  """All the business products a staff member has access to."""
  products: [StaffMemberBusinessProduct!]!
}

"""Represents a business product a staff user has access to."""
type StaffMemberBusinessProduct {
  """An external identifier for the business product."""
  externalId: String

  """A name for the business product."""
  name: String!

  """The type of business products, e.g. 'shop'."""
  productType: String!

  """An URL for the business product."""
  url: URL
}

type StaffMemberConnection {
  """A list of edges."""
  edges: [StaffMemberEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Default image. This parameter is valid when the user has no image."""
enum StaffMemberDefaultImage {
  """Returns a default image."""
  DEFAULT

  """Returns a transparent image."""
  TRANSPARENT

  """Returns a URL that returns a 404 error if the image is not present."""
  NOT_FOUND
}

type StaffMemberEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StaffMemberEdge."""
  node: StaffMember!
}

"""The input fields used to update a staff member."""
input StaffMemberInput {
  """The staff member's email address."""
  email: String

  """The staff member's first name."""
  firstName: String

  """The staff member's last name."""
  lastName: String

  """The staff member's access permissions for the Shopify admin."""
  permissions: [StaffMemberPermission!]
}

"""The input fields used to invite a staff member."""
input StaffMemberInviteInput {
  """The staff member's email address."""
  email: String!

  """The staff member's first name."""
  firstName: String

  """The staff member's last name."""
  lastName: String

  """The staff member's access permissions for the Shopify admin."""
  permissions: [StaffMemberPermission!]
}

type StaffMemberInvitePayload {
  """The invited staff member."""
  staffMember: StaffMember

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Access permissions for staff."""
enum StaffMemberPermission {
  """Viewing/adding Apps."""
  APPLICATIONS

  """Viewing/adding Sales Channels."""
  CHANNELS

  """Viewing/adding Customers."""
  CUSTOMERS

  """Access to Home."""
  DASHBOARD

  """Buying/connecting domains to Online Store."""
  DOMAINS

  """Viewing/creating Draft Orders."""
  DRAFT_ORDERS

  """Exporting Customers."""
  EXPORT_CUSTOMERS

  """Exporting Draft Orders."""
  EXPORT_DRAFT_ORDERS

  """Exporting Orders."""
  EXPORT_ORDERS

  """Exporting Products."""
  EXPORT_PRODUCTS

  """Full permissions."""
  FULL

  """Selling Gift cards."""
  GIFT_CARDS

  """Viewing/modifying Online Store navigation."""
  LINKS

  """Modifying locations."""
  LOCATIONS

  """Viewing/creating Discounts."""
  MARKETING

  """Viewing/creating marketing campaigns and viewing performance metrics."""
  MARKETING_SECTION

  """
  Viewing Orders and Abandoned checkouts. Can still create Draft Orders without this permission.
  """
  ORDERS

  """Viewing Analytics Dashboards & Live View."""
  OVERVIEWS

  """Viewing/creating Pages and Blog posts on the Online Store."""
  PAGES

  """Viewing/modifying account settings."""
  PREFERENCES

  """Viewing/creating products, transfers, inventory, and collections."""
  PRODUCTS

  """Viewing/creating Reports."""
  REPORTS

  """Viewing/modifying Online Store themes."""
  THEMES
}

"""
Data used to customize the Shopify admin for a logged-in staff member.
"""
type StaffMemberPrivateData {
  """Paginated list of activities."""
  activityFeed(
    """Number of activities to return ordered by date descending."""
    first: Int!
  ): ActivityConnection!

  """Information on Capital updated on a regular schedule."""
  capital: HomeCapitalSummary

  """
  A list of cards that can be shown to the staff member on the Shopify Home.
  """
  cards(
    """Show only home cards with a specified layout to the staff member."""
    acceptLayout: [HomeCardLayout!]

    """Show only home cards with a specified action to the staff member."""
    acceptAction: [HomeCardAction!]
  ): [HomeCard!]!

  """The date when the user was created."""
  createdAt: DateTime!

  """Encrypted shop id."""
  encryptedShopId: String!

  """Encrypted user id."""
  encryptedUserId: String!

  """
  Home Feed Theme holding more information about the list of Home Cards.
  """
  feedTheme: HomeFeedTheme

  """Home greeting messages localized to the client time."""
  greeting(
    """The date and time in the staff member's locale."""
    clientDatetime: DateTime!
  ): HomeGreeting!

  """Whether current user is using an Identity account."""
  identityOwned: Boolean!

  """Insights for this shop."""
  insights: Insights!

  """
  Notifications that will be shown to the staff member on the Shopify Home.
  """
  notifications: [HomeNotification!]!

  """List of onboarding tasks for the shop."""
  onboarding: HomeOnboarding

  """Access permisions for the staff member."""
  permissions: [StaffMemberPermission!]!

  """List of merchant tasks requiring action."""
  tasks: [HomeTask!]!
}

type StaffMemberUpdatePayload {
  """The updated staff member."""
  staffMember: StaffMember

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Staged target information."""
type StagedUploadTarget {
  """Parameters of an image to be uploaded."""
  parameters: [ImageUploadParameter!]!

  """Image URL."""
  url: String!
}

input StagedUploadTargetGenerateInput {
  resource: StagedUploadTargetGenerateUploadResource!
  filename: String!
  mimeType: String!
}

type StagedUploadTargetGeneratePayload {
  parameters: [MutationsStagedUploadTargetGenerateUploadParameter!]!
  url: String!

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the resource type to receive."""
enum StagedUploadTargetGenerateUploadResource {
  TIMELINE
  PRODUCT_IMAGE
  COLLECTION_IMAGE
  SHOP_IMAGE
}

type StagedUploadTargetsGeneratePayload {
  """The staged upload targets that were generated."""
  urls: [StagedUploadTarget!]

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Image to be uploaded."""
input StageImageInput {
  """Image resource."""
  resource: StagedUploadTargetGenerateUploadResource!

  """Image filename."""
  filename: String!

  """Image MIME type."""
  mimeType: String!
}

"""
Token used to delegate unauthenticated access scopes to clients that need to access the unautheticated Storefront API.

"""
type StorefrontAccessToken implements Node {
  """List of permissions associated with the token."""
  accessScopes: [AccessScope!]!

  """The issued public access token."""
  accessToken: String!

  """The date and time when the public access token was created."""
  createdAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """
  An arbitrary title for each token determined by the developer, used for reference         purposes.
  """
  title: String!

  """The date and time when the storefront access token was updated."""
  updatedAt: DateTime!
}

type StorefrontAccessTokenConnection {
  """A list of edges."""
  edges: [StorefrontAccessTokenEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type StorefrontAccessTokenCreatePayload {
  shop: Shop!
  storefrontAccessToken: StorefrontAccessToken

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields to delete a storefront access token."""
input StorefrontAccessTokenDeleteInput {
  id: ID!
}

type StorefrontAccessTokenDeletePayload {
  deletedStorefrontAccessTokenId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type StorefrontAccessTokenEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StorefrontAccessTokenEdge."""
  node: StorefrontAccessToken!
}

"""Specifies the input fields for a storefront access token."""
input StorefrontAccessTokenInput {
  title: String!
}

"""
Represents a unique identifier in the Storefront API. A `StorefrontID` value can
be used wherever an ID is expected in the Storefront API.
"""
scalar StorefrontID

type StringConnection {
  """A list of edges."""
  edges: [StringEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type StringEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of StringEdge."""
  node: String!
}

"""Represents a suggested transaction."""
type SuggestedOrderTransaction {
  """The masked account number associated with the payment method."""
  accountNumber: String

  """The amount of the transaction."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """The amount on the order transaction in applicable currencies."""
  amountSet: MoneyBag!

  """
  The human-readable payment gateway name used to process the transaction.
  """
  formattedGateway: String

  """The payment gateway used to process the transaction."""
  gateway: String

  """Specifies the kind of the suggested order transaction."""
  kind: SuggestedOrderTransactionKind!

  """
  Specifies the available amount to refund on the gateway. Only available within SuggestedRefund.
  """
  maximumRefundable: Money @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  Specifies the available amount to refund on the gateway in shop and
  presentment currencies. Only available within SuggestedRefund.
  """
  maximumRefundableSet: MoneyBag

  """
  The associated parent transaction, for example the authorization of a capture.
  """
  parentTransaction: OrderTransaction
}

"""Specifies the kind of the suggested order transaction."""
enum SuggestedOrderTransactionKind {
  """A suggested refund transaction for an order."""
  SUGGESTED_REFUND
}

"""
Represents the suggested refund to be submitted based on the items being returned.
"""
type SuggestedRefund {
  """The total monetary value to be refunded."""
  amount: Money! @deprecated(reason: "Use `amountSet` instead")

  """
  The total monetary value to be refunded in shop and presentment currencies.
  """
  amountSet: MoneyBag!

  """The total monetary value available to refund."""
  maximumRefundable: Money! @deprecated(reason: "Use `maximumRefundableSet` instead")

  """
  The total monetary value available to refund in shop and presentment currencies.
  """
  maximumRefundableSet: MoneyBag!

  """Array of returned line items."""
  refundLineItems: [RefundLineItem!]!

  """Refund details for shipping costs paid by customer."""
  shipping: ShippingRefund!

  """The sum of all the prices of the line items being refunded."""
  subtotal: Money! @deprecated(reason: "Use `subtotalSet` instead")

  """
  The sum of all the prices of the line items being refunded in shop and presentment currencies.
  """
  subtotalSet: MoneyBag!

  """Array of SuggestedOrderTransaction items."""
  suggestedTransactions: [SuggestedOrderTransaction!]!

  """
  The total cart discount amount that was applied to all line items in this refund.
  """
  totalCartDiscountAmountSet: MoneyBag!

  """
  The sum of all the taxes being refunded from the order (must be positive) in shop and presentment currencies.
  """
  totalTaxSet: MoneyBag!

  """
  The sum of all the taxes being refunded from the order (must be positive).
  """
  totalTaxes: Money! @deprecated(reason: "Use `totalTaxSet` instead")

  """The sum of all tips being refunded from the order."""
  totalTips: MoneyV2!
}

"""Information about support through the Shopify admin."""
type Support {
  """The tag to use for a chat event origin."""
  chatEventOriginTag: ChatEventOriginTag!
}

type TagsAddPayload {
  """The object that was updated."""
  node: Node

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TagsRemovePayload {
  """The object that was updated."""
  node: Node

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents a tax jurisdiction within a country or region.

"""
type TaxJurisdiction {
  """The ISO 3166-2 code for the tax jurisdiction."""
  code: String!

  """The name of the tax jurisdiction."""
  name: String!

  """A list of tax rates that apply in the  current jurisdiction."""
  taxRates: [TaxRate!]!
}

type TaxJurisdictionConnection {
  """A list of edges."""
  edges: [TaxJurisdictionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type TaxJurisdictionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TaxJurisdictionEdge."""
  node: TaxJurisdiction!
}

"""
Represents the information about the tax charged on the associated line item.
"""
type TaxLine {
  """The amount of tax to be charged."""
  price: Money! @deprecated(reason: "Use `priceSet` instead")

  """The amount of tax to be charged in shop and presentment currencies."""
  priceSet: MoneyBag!

  """The tax rate to be applied."""
  rate: Float

  """The percentage of the price that the tax rate represents."""
  ratePercentage: Float

  """The name of the tax."""
  title: String!
}

"""
Represents a tax override for a country, or region within a country, on a collection of products or shipping.

"""
type TaxOverride implements Node {
  """Collection associated with this tax override."""
  collection: Collection

  """The country code of the country this tax override applies to."""
  countryCode: CountryCode!

  """The date and time when the tax override was created."""
  createdAt: DateTime!

  """Globally unique identifier."""
  id: ID!

  """
  Whether the override applies to the products in the collection or on shipping them.
  """
  isShipping: Boolean!

  """The regions and their rates associated with this tax override."""
  taxOverrideRegions(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): TaxOverrideRegionConnection!

  """The date and time when the tax override was last modified."""
  updatedAt: DateTime!
}

type TaxOverrideAddRegionPayload {
  """The updated tax override."""
  taxOverride: TaxOverride

  """The updated tax override."""
  taxOverrideRegion: TaxOverrideRegion

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxOverrideConnection {
  """A list of edges."""
  edges: [TaxOverrideEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type TaxOverrideCreatePayload {
  """The tax override that has been created."""
  taxOverride: TaxOverride

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxOverrideDeletePayload {
  """ID of the deleted tax override."""
  deletedTaxOverrideId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxOverrideEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TaxOverrideEdge."""
  node: TaxOverride!
}

"""Specifies the input fields required to create a tax override."""
input TaxOverrideInput {
  """Specifies the regions that this tax override applies to."""
  taxOverrideRegions: [TaxOverrideRegionInput!]

  """The ID of the collection this tax override applies to."""
  collectionId: ID

  """The country this override applies to."""
  countryCode: CountryCode!

  """
  Indicates if the override applies to the products in a collection or on shipping them.
  """
  isShipping: Boolean!
}

"""
Represents a tax override region.

"""
type TaxOverrideRegion implements Node {
  """Globally unique identifier."""
  id: ID!

  """The rate at which to override."""
  rate: Float!

  """Specifies zone that the tax override region applies to."""
  zone: TaxOverrideZone!
}

type TaxOverrideRegionConnection {
  """A list of edges."""
  edges: [TaxOverrideRegionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type TaxOverrideRegionDeletePayload {
  """ID of the deleted tax override region."""
  deletedTaxOverrideRegionId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxOverrideRegionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of TaxOverrideRegionEdge."""
  node: TaxOverrideRegion!
}

"""Specifies the input fields required to create a tax override region."""
input TaxOverrideRegionInput {
  """
  Specifies the tax override region to update or create a new tax override if absent.
  """
  id: ID

  """The rate at which to override."""
  rate: Float!

  """Specifies zone that the tax override region applies to."""
  zoneId: ID!
}

type TaxOverrideRegionUpdatePayload {
  """The updated tax override region."""
  taxOverrideRegion: TaxOverrideRegion

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxOverrideUpdatePayload {
  """The tax override that has been created."""
  taxOverride: TaxOverride

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""
Represents a tax override region.

"""
type TaxOverrideZone {
  """The ISO 3166-2 code for the tax override zone."""
  code: String

  """The ID of the task. A unique identifier used for analytics."""
  id: ID!

  """The name of the zone being overridden."""
  name: String!

  """The rate applied to the zone."""
  rate: Float!

  """The type zone being overridden."""
  zoneType: TaxOverrideZoneType!
}

"""
TaxOverrideRegion zone describes the geopolitical area the tax override applies to.
"""
enum TaxOverrideZoneType {
  """Country."""
  COUNTRY

  """Province."""
  PROVINCE

  """State."""
  STATE

  """County."""
  COUNTY

  """City."""
  CITY
}

"""
Represents a tax rate that would apply to items.

"""
type TaxRate {
  """The abbreviated name for the tax rate."""
  code: String!

  """The unique id of the tax rate."""
  id: ID!

  """The value of the tax rate represented as a decimal."""
  rate: Float!
}

"""Information on whether a tax region has been enabled for the shop."""
type TaxRegion {
  """The tax region code represented as a country code."""
  code: CountryCode!

  """Whether the shop has been setup to charge taxes for this region."""
  enabled: Boolean!

  """The name of the tax region."""
  name: String!
}

"""
Represents a registration with some tax jurisdiction that is used to determine the tax rates that are applied
in this region.

"""
type TaxRegistration {
  """The unique code identifying the tax registration."""
  code: String!

  """A unique identifier built from the tax registration code."""
  id: ID!

  """The name of the tax registration."""
  name: String!

  """Whether the shop has been registered for this tax registration."""
  registered: Boolean!

  """The registration number used by the business to remit taxes."""
  registrationNumber: String

  """A list of tax rates that are affected by this registration."""
  taxRates: [TaxRate!]!
}

"""Specifies the input fields required to update a tax registration."""
input TaxRegistrationInput {
  """Specifies the tax registration to update."""
  id: ID!

  """The number used to register the current tax registration."""
  registrationNumber: String

  """Whether to enable or disable this tax registration."""
  registered: Boolean!
}

type TaxRegistrationUpdatePayload {
  """The updated tax registrations."""
  taxRegistrations: [TaxRegistration!]

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Represents a tax service for a shop."""
type TaxService implements Node {
  """Whether the shop has activated this tax service."""
  active: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The name of the tax service."""
  name: String!

  """Whether the shop is using a sandbox account."""
  sandbox: Boolean!

  """Url of the tax service uses to send tax requests."""
  url: URL!
}

type TaxServiceActivatePayload {
  """The activated tax service."""
  taxService: TaxService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type TaxServiceDeactivatePayload {
  """The deactivated tax service."""
  taxService: TaxService

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields to update tax settings on a shop."""
input TaxSettingsInput {
  """Specifies whether or not taxes are charged for shipping."""
  taxShipping: Boolean

  """Specifies whether applicable taxes are included in product prices."""
  taxesIncluded: Boolean

  """Specifies whether the default eu digital goods collection is enabled."""
  euDigitalGoodsCollectionEnabled: Boolean
}

"""A theme for display on the storefront."""
type Theme implements Node & LegacyInteroperability {
  """Globally unique identifier."""
  id: ID!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """The name of the theme."""
  name: String!
  prefix: String!

  """The screenshot for the desktop view of the theme."""
  screenshot(
    """The height of the viewport used to capture the screenshot."""
    height: Int

    """The width of the viewport used to capture the screenshot."""
    width: Int

    """The desired height of the screenshot in pixels."""
    resizeHeight: Int

    """The desired width of the screenshot in pixels."""
    resizeWidth: Int
  ): URL
}

"""Specifies the input fields for a timeline comment."""
input TimelineCommentCreateInput {
  """Resource ID for the timeline comment."""
  resourceId: ID!

  """Human readable text that describes the event."""
  message: String!

  """The attachments associated with the comment event."""
  attachments: [AttachmentInput!]
}

type TimelineCommentCreatePayload {
  event: CommentEvent

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields to delete a timeline comment."""
input TimelineCommentDeleteInput {
  id: ID!
}

type TimelineCommentDeletePayload {
  deletedTimelineCommentId: ID
  subject: CommentEventSubject

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""Specifies the input fields to edit a timeline comment."""
input TimelineCommentEditInput {
  id: ID!
  message: String!
  attachments: [AttachmentInput!]
}

type TimelineCommentEditPayload {
  event: CommentEvent

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

"""A tracking carrier supported by Shopify."""
type TrackingCarrier {
  """Normalized carrier name serving as unique identifier."""
  id: ID!

  """Tracking carrier name."""
  name: String!

  """If carrier has built-in tracking on Shopify admin."""
  supportsShipmentTracking: Boolean!

  """
  Tracking carrier base URL with an optional %s wildcard to be replaced with a tracking number.
  """
  url(
    """
    If provided, this tracking number will replace the %s wildcard in the URL.
    """
    trackingNumber: String
  ): String!
}

"""Specifies the fields for tracking information."""
input TrackingInfoInput {
  """The tracking number of the fulfillment."""
  number: String

  """The URL to track the fulfillment."""
  url: String
}

"""Specifies all possible fields for updating tracking information."""
input TrackingInfoUpdateInput {
  """
  Tracking information consisting of one or more tracking URLs and numbers associated with the fulfillment.

  """
  trackingDetails: [TrackingInfoInput!]

  """The name of the tracking company."""
  trackingCompany: String

  """
  Indicates whether the customer will be notified of this update and future updates for this fulfillment.

  """
  notifyCustomer: Boolean
}

"""Trial account information."""
type TrialPeriod {
  """When the trial period ends."""
  end: DateTime!

  """When the trial period starts."""
  start: DateTime!
}

"""
Represents a line item with remaining fulfillable quantity.

"""
type UnfulfilledLineItem {
  """The fulfillable quantity of the original order line item."""
  fulfillableQuantity: Int!

  """The original order line item."""
  lineItem: LineItem!
}

type UnfulfilledLineItemConnection {
  """A list of edges."""
  edges: [UnfulfilledLineItemEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type UnfulfilledLineItemEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of UnfulfilledLineItemEdge."""
  node: UnfulfilledLineItem!
}

"""
Represents a group of unfulfilled line items in a location and the set of fulfillment actions that can be taken
on the items.

"""
type UnfulfilledLineItemsByLocation implements Node {
  """
  The fulfillment service type that will be used to fulfill the line items.
  """
  fulfillmentServiceType: FulfillmentServiceType!

  """
  Indicates if at least one or more line items can be reassigned to a different location.
  """
  hasReassignableLineItems: Boolean!

  """Globally unique identifier."""
  id: ID!

  """The location where the line items will be fulfilled."""
  location: Location!

  """
  The location name from which items will be fulfilled. Returns fulfillment service name if fulfillment service
  is a third party.

  """
  locationDescriptor: String! @deprecated(reason: "Use location.name instead.")

  """
  Whether the merchant is permitted to print packing slips for this group.
  """
  merchantPackingSlipPrintable: Boolean!

  """Whether any of the line items require shipping."""
  requiresShipping: Boolean!

  """
  List of line items that can be fulfilled together in a single fulfillment.
  """
  unfulfilledLineItems(
    """Returns up to the first `n` elements from the list."""
    first: Int

    """Returns the elements that come after the specified cursor."""
    after: String

    """Returns up to the last `n` elements from the list."""
    last: Int

    """Returns the elements that come before the specified cursor."""
    before: String

    """Reverse the order of the underlying list."""
    reverse: Boolean = false
  ): UnfulfilledLineItemConnection!
}

type UnfulfilledLineItemsByLocationConnection {
  """A list of edges."""
  edges: [UnfulfilledLineItemsByLocationEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type UnfulfilledLineItemsByLocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of UnfulfilledLineItemsByLocationEdge."""
  node: UnfulfilledLineItemsByLocation!
}

"""
An unsigned 64-bit integer. Represents whole numeric values between 0 and 2^64 - 1 encoded as a string of base-10 digits.
"""
scalar UnsignedInt64

"""An RFC 3986 and RFC 3987 compliant URI string."""
scalar URL

"""Usage costs per billing interval."""
type UsageAppPlan {
  """The total usage charges for billing interval."""
  balanceUsed: MoneyV2!

  """
  The capped amount is the limit a customer can be charged for usage based billing.
  """
  cappedAmount: MoneyV2!
}

"""Represents an error in the input of a mutation."""
type UserError implements DisplayableError {
  """Path to the input field which caused the error."""
  field: [String!]

  """The error message."""
  message: String!
}

"""
Time between UTC time and a location's observed time, in the format '+HH:MM' or '-HH:MM'.
"""
scalar UtcOffset

"""
Specifies the
[Urchin Traffic Module (UTM) parameters](https://en.wikipedia.org/wiki/UTM_parameters)
that are associated with a related marketing campaign.

"""
input UTMInput {
  """The name of the UTM campaign."""
  campaign: String!

  """
  The name of the website or application where the referral link exists.
  """
  source: String!

  """The UTM campaign medium."""
  medium: String!
}

type UTMParameters {
  campaign: String
  content: String
  medium: String
  source: String
  term: String
}

"""An input that represents a product with variant."""
input VariantLineItemInput {
  """Variant id for the variant on the line item."""
  variantId: ID!
}

"""
Represents a subscription to a webhook.

"""
type WebhookSubscription implements Node & LegacyInteroperability {
  """
  URL where the webhook subscription should send the POST request when the event occurs.
  """
  callbackUrl: URL!

  """The date and time when the webhook subscription was created."""
  createdAt: DateTime!

  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat!

  """Globally unique identifier."""
  id: ID!

  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]!

  """The ID of the corresponding resource in the REST Admin API."""
  legacyResourceId: UnsignedInt64!

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]!

  """The type of event that triggers the webhook."""
  topic: WebhookSubscriptionTopic!

  """The date and time when the webhook subscription was updated."""
  updatedAt: DateTime!
}

type WebhookSubscriptionConnection {
  """A list of edges."""
  edges: [WebhookSubscriptionEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type WebhookSubscriptionCreatePayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was created."""
  webhookSubscription: WebhookSubscription
}

type WebhookSubscriptionDeletePayload {
  """The ID of the deleted webhook subscription."""
  deletedWebhookSubscriptionId: ID

  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!
}

type WebhookSubscriptionEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of WebhookSubscriptionEdge."""
  node: WebhookSubscription!
}

"""The supported formats for webhook subscriptions."""
enum WebhookSubscriptionFormat {
  JSON
  XML
}

"""
Specifies the input fields for a webhook subscription.

"""
input WebhookSubscriptionInput {
  """
  URL where the webhook subscription should send the POST request when the event occurs.
  """
  callbackUrl: URL

  """The format in which the webhook subscription should send the data."""
  format: WebhookSubscriptionFormat

  """The list of fields to be included in the webhook subscription."""
  includeFields: [String!]

  """
  The list of namespaces for any metafields that should be included in the webhook subscription.
  """
  metafieldNamespaces: [String!]
}

"""The set of valid sort keys for the webhookSubscriptions query."""
enum WebhookSubscriptionSortKeys {
  """Sort by the `created_at` value."""
  CREATED_AT

  """Sort by the `id` value."""
  ID

  """
  During a search (i.e. when the `query` parameter has been specified on the connection) this sorts the
  results by relevance to the search term(s). When no search query is specified, this sort key is not
  deterministic and should not be used.

  """
  RELEVANCE
}

"""The supported topics for webhook subscriptions."""
enum WebhookSubscriptionTopic {
  APP_UNINSTALLED
  CARTS_CREATE
  CARTS_UPDATE
  CHANNELS_DELETE
  CHECKOUTS_CREATE
  CHECKOUTS_DELETE
  CHECKOUTS_UPDATE
  COLLECTION_LISTINGS_ADD
  COLLECTION_LISTINGS_REMOVE
  COLLECTION_LISTINGS_UPDATE
  COLLECTION_PUBLICATIONS_CREATE
  COLLECTION_PUBLICATIONS_DELETE
  COLLECTION_PUBLICATIONS_UPDATE
  COLLECTIONS_CREATE
  COLLECTIONS_DELETE
  COLLECTIONS_UPDATE
  CUSTOMER_GROUPS_CREATE
  CUSTOMER_GROUPS_DELETE
  CUSTOMER_GROUPS_UPDATE
  CUSTOMERS_CREATE
  CUSTOMERS_DELETE
  CUSTOMERS_DISABLE
  CUSTOMERS_ENABLE
  CUSTOMERS_UPDATE
  DISPUTES_CREATE
  DISPUTES_UPDATE
  DRAFT_ORDERS_CREATE
  DRAFT_ORDERS_DELETE
  DRAFT_ORDERS_UPDATE
  FULFILLMENT_EVENTS_CREATE
  FULFILLMENT_EVENTS_DELETE
  FULFILLMENTS_CREATE
  FULFILLMENTS_UPDATE
  ATTRIBUTED_SESSIONS_FIRST
  ATTRIBUTED_SESSIONS_LAST
  ORDER_TRANSACTIONS_CREATE
  ORDERS_CANCELLED
  ORDERS_CREATE
  ORDERS_DELETE
  ORDERS_FULFILLED
  ORDERS_PAID
  ORDERS_PARTIALLY_FULFILLED
  ORDERS_UPDATED
  PRODUCT_LISTINGS_ADD
  PRODUCT_LISTINGS_REMOVE
  PRODUCT_LISTINGS_UPDATE
  PRODUCT_PUBLICATIONS_CREATE
  PRODUCT_PUBLICATIONS_DELETE
  PRODUCT_PUBLICATIONS_UPDATE
  PRODUCTS_CREATE
  PRODUCTS_DELETE
  PRODUCTS_UPDATE
  REFUNDS_CREATE
  SHIPPING_ADDRESSES_CREATE
  SHIPPING_ADDRESSES_UPDATE
  SHOP_UPDATE
  TAX_SERVICES_CREATE
  TAX_SERVICES_UPDATE
  THEMES_CREATE
  THEMES_DELETE
  THEMES_PUBLISH
  THEMES_UPDATE
  VARIANTS_IN_STOCK
  VARIANTS_OUT_OF_STOCK
  INVENTORY_LEVELS_CONNECT
  INVENTORY_LEVELS_UPDATE
  INVENTORY_LEVELS_DISCONNECT
  ATTRIBUTION_RISK
  INVENTORY_ITEMS_CREATE
  INVENTORY_ITEMS_UPDATE
  INVENTORY_ITEMS_DELETE
  LOCATIONS_CREATE
  LOCATIONS_UPDATE
  LOCATIONS_DELETE
}

type WebhookSubscriptionUpdatePayload {
  """List of errors that occurred executing the mutation."""
  userErrors: [UserError!]!

  """The webhook subscription that was updated."""
  webhookSubscription: WebhookSubscription
}

"""Represents weight unit and value."""
type Weight {
  """Unit of measurement for `value`."""
  unit: WeightUnit!

  """The weight using the unit system specified with `unit`."""
  value: Float!
}

"""
Specifies the weight unit and value inputs.

"""
input WeightInput {
  """The weight value using the unit system specified with `weight_unit`."""
  value: Float!

  """Unit of measurement for `value`."""
  unit: WeightUnit!
}

"""Units of measurement for weight."""
enum WeightUnit {
  """1 kilogram equals 1000 grams."""
  KILOGRAMS

  """Metric system unit of mass."""
  GRAMS

  """1 pound equals 16 ounces."""
  POUNDS

  """Imperial system unit of mass."""
  OUNCES
}
